{"version":3,"file":"static/js/350.8e4c2698.chunk.js","mappings":"0IAQA,MAuBA,EAvBeA,CACbC,EACAC,KAEA,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAkB,GAgBpD,MAAO,CAACF,EAdQG,CAACC,EAAgBC,EAAaC,EAAYC,KACxDN,GAAa,GACbO,EAAAA,EACGC,OAAOL,EAAQC,EAAKC,EAAMC,GAC1BG,MAAMC,IACLV,GAAa,GACbH,EAAUa,EAAI,IAEfC,OAAOC,IACNZ,GAAa,GACbF,EAAQc,EAAI,GACZ,EAGqB,C,wHCU7B,MAoFA,EApFqBC,IAIC,IAJA,WACpBC,EAAU,eACVC,EAAc,2BACdC,GACcH,EACd,MAAMI,GAAWC,EAAAA,EAAAA,OACVC,EAAcC,IAAmBnB,EAAAA,EAAAA,UAAS,KAO1CoB,EAAeC,IAAoBrB,EAAAA,EAAAA,WAAkB,IAErDsB,EAAeC,IAAmB5B,EAAAA,EAAAA,IAPpB6B,IAAMT,GAA2B,KAClCJ,GAClBK,GAASS,EAAAA,EAAAA,IAAqBd,MAsBhC,OACEe,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CACZC,MAAK,gBACLC,YAAa,SACbC,OAAQjB,EACRkB,WAAWL,EAAAA,EAAAA,KAACM,EAAAA,IAAiB,IAC7BlC,UAAWwB,EACXW,UAtBoBC,KAClBhB,IAAiBJ,EAAeqB,KAOpCZ,EACE,SAAS,sBAADa,OACctB,EAAeuB,UAAS,aAAAD,OAAYtB,EAAeqB,MACzE,CAAEG,YAAalB,KATfK,EAAAA,EAAAA,IAAqB,CACnBc,aAAc,2BACdC,cAAe,IAQlB,EAWCC,QA7BYA,IAAM1B,GAA2B,GA8B7C2B,mBAAoB,CAClBC,SAAUzB,IAAiBJ,EAAeqB,MAAQb,GAEpDsB,qBACEC,EAAAA,EAAAA,MAACC,EAAAA,IAAU,CAACC,aAAa,EAAOC,kBAAkB,EAAMC,SAAA,CACrD7B,IACCM,EAAAA,EAAAA,KAACwB,EAAAA,IAAI,CAACC,MAAI,EAACC,GAAI,GAAIC,UAAW,YAAYJ,UACxCvB,EAAAA,EAAAA,KAAC4B,EAAAA,IAAkB,CACjBC,QAAS,QACT3B,MAAO,UACP4B,QACE,qFAIN,4BACsB9B,EAAAA,EAAAA,KAAA,KAAAuB,SAAInC,EAAeqB,OAAS,gBACpDU,EAAAA,EAAAA,MAACK,EAAAA,IAAI,CAACC,MAAI,EAACC,GAAI,GAAGH,SAAA,EAChBvB,EAAAA,EAAAA,KAAC+B,EAAAA,IAAQ,CACPC,GAAG,gBACHvB,KAAK,gBACLwB,SAAWC,IACTzC,EAAgByC,EAAMC,OAAOC,MAAM,EAErCC,MAAM,GACND,MAAO5C,KAETQ,EAAAA,EAAAA,KAACsC,EAAAA,IAAM,CACLC,QAAS7C,EACTsC,GAAE,iBACFK,MAAO,iBACP5B,KAAI,iBACJwB,SAAUA,KACRtC,GAAkBD,EAAc,WAM1C,C","sources":["screens/Console/Common/Hooks/useApi.tsx","screens/Console/Tenants/ListTenants/DeleteTenant.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\ntype NoReturnFunction = (param?: any) => void;\ntype ApiMethodToInvoke = (method: string, url: string, data?: any) => void;\ntype IsApiInProgress = boolean;\n\nconst useApi = (\n  onSuccess: NoReturnFunction,\n  onError: NoReturnFunction,\n): [IsApiInProgress, ApiMethodToInvoke] => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const callApi = (method: string, url: string, data?: any, headers?: any) => {\n    setIsLoading(true);\n    api\n      .invoke(method, url, data, headers)\n      .then((res: any) => {\n        setIsLoading(false);\n        onSuccess(res);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setIsLoading(false);\n        onError(err);\n      });\n  };\n\n  return [isLoading, callApi];\n};\n\nexport default useApi;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport {\n  ConfirmDeleteIcon,\n  FormLayout,\n  InformativeMessage,\n  InputBox,\n  Switch,\n  Grid,\n} from \"mds\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { Tenant } from \"../../../../api/operatorApi\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\n\ninterface IDeleteTenant {\n  deleteOpen: boolean;\n  selectedTenant: Tenant;\n  closeDeleteModalAndRefresh: (refreshList: boolean) => any;\n}\n\nconst DeleteTenant = ({\n  deleteOpen,\n  selectedTenant,\n  closeDeleteModalAndRefresh,\n}: IDeleteTenant) => {\n  const dispatch = useAppDispatch();\n  const [retypeTenant, setRetypeTenant] = useState(\"\");\n\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) =>\n    dispatch(setErrorSnackMessage(err));\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteVolumes, setDeleteVolumes] = useState<boolean>(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  const onConfirmDelete = () => {\n    if (retypeTenant !== selectedTenant.name) {\n      setErrorSnackMessage({\n        errorMessage: \"Tenant name is incorrect\",\n        detailedError: \"\",\n      });\n      return;\n    }\n    invokeDeleteApi(\n      \"DELETE\",\n      `/api/v1/namespaces/${selectedTenant.namespace}/tenants/${selectedTenant.name}`,\n      { delete_pvcs: deleteVolumes },\n    );\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Tenant`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: retypeTenant !== selectedTenant.name || deleteLoading,\n      }}\n      confirmationContent={\n        <FormLayout withBorders={false} containerPadding={false}>\n          {deleteVolumes && (\n            <Grid item xs={12} className={\"inputItem\"}>\n              <InformativeMessage\n                variant={\"error\"}\n                title={\"WARNING\"}\n                message={\n                  \"Delete Volumes: Data will be permanently deleted. Please proceed with caution.\"\n                }\n              />\n            </Grid>\n          )}\n          To continue please type <b>{selectedTenant.name}</b> in the box.\n          <Grid item xs={12}>\n            <InputBox\n              id=\"retype-tenant\"\n              name=\"retype-tenant\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setRetypeTenant(event.target.value);\n              }}\n              label=\"\"\n              value={retypeTenant}\n            />\n            <Switch\n              checked={deleteVolumes}\n              id={`delete-volumes`}\n              label={\"Delete Volumes\"}\n              name={`delete-volumes`}\n              onChange={() => {\n                setDeleteVolumes(!deleteVolumes);\n              }}\n            />\n          </Grid>\n        </FormLayout>\n      }\n    />\n  );\n};\n\nexport default DeleteTenant;\n"],"names":["useApi","onSuccess","onError","isLoading","setIsLoading","useState","callApi","method","url","data","headers","api","invoke","then","res","catch","err","_ref","deleteOpen","selectedTenant","closeDeleteModalAndRefresh","dispatch","useAppDispatch","retypeTenant","setRetypeTenant","deleteVolumes","setDeleteVolumes","deleteLoading","invokeDeleteApi","onDelSuccess","setErrorSnackMessage","_jsx","ConfirmDialog","title","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","onConfirm","onConfirmDelete","name","concat","namespace","delete_pvcs","errorMessage","detailedError","onClose","confirmButtonProps","disabled","confirmationContent","_jsxs","FormLayout","withBorders","containerPadding","children","Grid","item","xs","className","InformativeMessage","variant","message","InputBox","id","onChange","event","target","value","label","Switch","checked"],"sourceRoot":""}