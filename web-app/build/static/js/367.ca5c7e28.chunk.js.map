{"version":3,"file":"static/js/367.ca5c7e28.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/FormHr.tsx","screens/Console/Common/TLSCertificate/TLSCertificate.tsx","screens/Console/Tenants/TenantDetails/KMSPolicyInfo.tsx","screens/Console/Tenants/TenantDetails/TenantEncryption.tsx","screens/shared/ErrorBlock.tsx"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Box, InputLabel, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Button, CopyIcon, HelpIcon } from \"mds\";\nimport { fieldBasic } from \"../common/styleLibrary\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\nimport TooltipWrapper from \"../../TooltipWrapper/TooltipWrapper\";\n\ninterface ICodeWrapper {\n  value: string;\n  label?: string;\n  mode?: string;\n  tooltip?: string;\n  classes: any;\n  onChange?: (editor: any, data: any, value: string) => any;\n  onBeforeChange: (editor: any, data: any, value: string) => any;\n  readOnly?: boolean;\n  editorHeight?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n  });\n\nconst CodeMirrorWrapper = ({\n  value,\n  label = \"\",\n  tooltip = \"\",\n  mode = \"json\",\n  classes,\n  onBeforeChange,\n  readOnly = false,\n  editorHeight = \"250px\",\n}: ICodeWrapper) => {\n  return (\n    <React.Fragment>\n      <Grid item xs={12} sx={{ marginBottom: \"10px\" }}>\n        <InputLabel className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div className={classes.tooltip}>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n      </Grid>\n\n      <Grid\n        item\n        xs={12}\n        style={{\n          maxHeight: editorHeight,\n          overflow: \"auto\",\n          border: \"1px solid #eaeaea\",\n        }}\n      >\n        <CodeEditor\n          value={value}\n          language={mode}\n          onChange={(evn) => {\n            onBeforeChange(null, null, evn.target.value);\n          }}\n          id={\"code_wrapper\"}\n          padding={15}\n          style={{\n            fontSize: 12,\n            backgroundColor: \"#fefefe\",\n            fontFamily:\n              \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\n            minHeight: editorHeight || \"initial\",\n            color: \"#000000\",\n          }}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sx={{\n          background: \"#f7f7f7\",\n          border: \"1px solid #eaeaea\",\n          borderTop: 0,\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: \"2px\",\n            paddingRight: \"5px\",\n            justifyContent: \"flex-end\",\n            \"& button\": {\n              height: \"26px\",\n              width: \"26px\",\n              padding: \"2px\",\n              \" .min-icon\": {\n                marginLeft: \"0\",\n              },\n            },\n          }}\n        >\n          <TooltipWrapper tooltip={\"Copy to Clipboard\"}>\n            <CopyToClipboard text={value}>\n              <Button\n                type={\"button\"}\n                id={\"copy-code-mirror\"}\n                icon={<CopyIcon />}\n                color={\"primary\"}\n                variant={\"regular\"}\n              />\n            </CopyToClipboard>\n          </TooltipWrapper>\n        </Box>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(CodeMirrorWrapper);\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport { HelpIcon } from \"mds\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Operator\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport styled from \"@emotion/styled\";\n\nconst FormHr = styled(\"hr\")`\n  border-top: 0;\n  border-left: 0;\n  border-right: 0;\n  border-color: #999999;\n  background-color: transparent;\n`;\n\nexport default FormHr;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { DateTime, Duration } from \"luxon\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { ICertificateInfo } from \"../../Tenants/types\";\nimport LanguageIcon from \"@mui/icons-material/Language\";\nimport Chip from \"@mui/material/Chip\";\nimport {\n  Box,\n  Container,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from \"@mui/material\";\nimport EventBusyIcon from \"@mui/icons-material/EventBusy\";\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\nimport { CertificateIcon } from \"mds\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    certificateIcon: {\n      float: \"left\",\n      paddingTop: \"5px !important\",\n      paddingRight: \"10px !important\",\n    },\n    certificateInfo: { float: \"right\" },\n    certificateWrapper: {\n      height: \"auto\",\n      margin: 5,\n      border: \"1px solid #E2E2E2\",\n      userSelect: \"text\",\n      borderRadius: 4,\n      \"& h6\": {\n        fontWeight: \"bold\",\n      },\n      \"& div\": {\n        padding: 0,\n      },\n    },\n    certificateExpiry: {\n      color: \"#616161\",\n      display: \"flex\",\n      alignItems: \"center\",\n      flexWrap: \"wrap\",\n      marginBottom: 5,\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificateDomains: {\n      color: \"#616161\",\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificatesList: {\n      border: \"1px solid #E2E2E2\",\n      borderRadius: 4,\n      color: \"#616161\",\n      textTransform: \"lowercase\",\n      overflowY: \"scroll\",\n      maxHeight: 145,\n      marginBottom: 10,\n    },\n    certificatesListItem: {\n      padding: \"0px 16px\",\n      borderBottom: \"1px solid #E2E2E2\",\n      \"& div\": {\n        minWidth: 0,\n      },\n      \"& svg\": {\n        fontSize: 12,\n        marginRight: 10,\n        opacity: 0.5,\n      },\n      \"& span\": {\n        fontSize: 12,\n      },\n    },\n    certificateExpiring: {\n      color: \"orange\",\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificateExpired: {\n      color: \"red\",\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n  });\n\ninterface ITLSCertificate {\n  classes: any;\n  certificateInfo: ICertificateInfo;\n  onDelete: any;\n}\n\nconst TLSCertificate = ({\n  classes,\n  certificateInfo,\n  onDelete = () => {},\n}: ITLSCertificate) => {\n  const certificates = certificateInfo.domains || [];\n\n  const expiry = DateTime.fromISO(certificateInfo.expiry);\n  const now = DateTime.utc();\n  // Expose error on Tenant if certificate is near expiration or expired\n  let daysToExpiry: number = 0;\n  let daysToExpiryHuman: string = \"\";\n  let certificateExpiration: string = \"\";\n  if (expiry) {\n    let durationToExpiry = expiry.diff(now);\n    daysToExpiry = durationToExpiry.as(\"days\");\n    daysToExpiryHuman = durationToExpiry\n      .minus(Duration.fromObject({ days: 1 }))\n      .shiftTo(\"days\")\n      .toHuman({ listStyle: \"long\", maximumFractionDigits: 0 });\n    if (daysToExpiry >= 10 && daysToExpiry < 30) {\n      certificateExpiration = classes.certificateExpiring;\n    }\n    if (daysToExpiry < 10) {\n      certificateExpiration = classes.certificateExpired;\n      if (daysToExpiry < 2) {\n        daysToExpiryHuman = durationToExpiry\n          .minus(Duration.fromObject({ minutes: 1 }))\n          .shiftTo(\"hours\", \"minutes\")\n          .toHuman({ listStyle: \"long\", maximumFractionDigits: 0 });\n        if (durationToExpiry.as(\"minutes\") <= 1) {\n          daysToExpiryHuman = \"EXPIRED\";\n        }\n      }\n    }\n  }\n\n  return (\n    <Chip\n      key={certificateInfo.name}\n      variant=\"outlined\"\n      color=\"primary\"\n      className={classes.certificateWrapper}\n      label={\n        <Container>\n          <Grid item xs={1} className={classes.certificateIcon}>\n            <CertificateIcon />\n          </Grid>\n          <Grid item xs={11} className={classes.certificateInfo}>\n            <Typography variant=\"subtitle1\" display=\"block\" gutterBottom>\n              {certificateInfo.name}\n            </Typography>\n            <Box className={classes.certificateExpiry}>\n              <EventBusyIcon color=\"inherit\" fontSize=\"small\" />\n              &nbsp;\n              <span className={\"label\"}>Expiry:&nbsp;</span>\n              <span>{expiry.toFormat(\"yyyy/MM/dd\")}</span>\n            </Box>\n            <Box className={classes.certificateExpiry}>\n              <AccessTimeIcon color=\"inherit\" fontSize=\"small\" />\n              &nbsp;\n              <span className={\"label\"}>Expires in:&nbsp;</span>\n              <span className={certificateExpiration}>{daysToExpiryHuman}</span>\n            </Box>\n            <Divider />\n            <br />\n            <Box className={classes.certificateDomains}>\n              <span className=\"label\">{`${certificates.length} Domain (s):`}</span>\n            </Box>\n            <List className={classes.certificatesList}>\n              {certificates.map((dom, index) => (\n                <ListItem\n                  key={`${dom}-${index}`}\n                  className={classes.certificatesListItem}\n                >\n                  <ListItemAvatar>\n                    <LanguageIcon />\n                  </ListItemAvatar>\n                  <ListItemText primary={dom} />\n                </ListItem>\n              ))}\n            </List>\n          </Grid>\n        </Container>\n      }\n      onDelete={onDelete}\n    />\n  );\n};\n\nexport default withStyles(styles)(TLSCertificate);\n","// This file is part of MinIO Operator\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Box } from \"mds\";\n\nconst getPolicyData = (policies: Record<string, any> = {}) => {\n  const policyNames = Object.keys(policies);\n  return policyNames.map((polName: string) => {\n    const policyConfig = policies[polName] || {};\n    return {\n      name: polName || \"\",\n      identities: policyConfig.identities || [],\n      // v1 specific\n      paths: policyConfig.paths || [],\n      // v2 specific\n      allow: policyConfig.allow || [],\n      deny: policyConfig.deny || [],\n    };\n  });\n};\n\nconst PolicyItem = ({\n  items = [],\n  title = \"\",\n}: {\n  items: string[];\n  title: string;\n}) => {\n  return items?.length ? (\n    <Fragment>\n      <div\n        style={{\n          fontSize: \"0.83em\",\n          fontWeight: \"bold\",\n        }}\n      >\n        {title}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          gap: \"2px\",\n          flexFlow: \"column\",\n          marginLeft: \"8px\",\n        }}\n      >\n        {items.map((iTxt: string) => {\n          return <span style={{ fontSize: \"12px\" }}>- {iTxt}</span>;\n        })}\n      </div>\n    </Fragment>\n  ) : null;\n};\n\nconst KMSPolicyInfo = ({\n  policies = {},\n}: {\n  policies: Record<string, any>;\n}) => {\n  const fmtPolicies = getPolicyData(policies);\n  return fmtPolicies.length ? (\n    <Grid xs={12} marginBottom={\"5px\"}>\n      <h4>Policies</h4>\n      <Box\n        withBorders\n        sx={{\n          maxHeight: \"200px\",\n          overflow: \"auto\",\n          padding: 0,\n        }}\n      >\n        {fmtPolicies.map((pConf: Record<string, any>) => {\n          return (\n            <Box\n              withBorders\n              sx={{\n                display: \"flex\",\n                flexFlow: \"column\",\n                gap: \"2px\",\n                borderLeft: 0,\n                borderRight: 0,\n                borderTop: 0,\n              }}\n            >\n              <div>\n                <b\n                  style={{\n                    fontSize: \"0.83em\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Policy Name:\n                </b>{\" \"}\n                {pConf.name}\n              </div>\n              <PolicyItem title={\"Allow\"} items={pConf?.allow} />\n              <PolicyItem title={\"Deny\"} items={pConf?.deny} />\n              <PolicyItem title={\"Paths\"} items={pConf?.paths} />\n              <PolicyItem title={\"Identities\"} items={pConf?.identities} />\n            </Box>\n          );\n        })}\n      </Box>\n    </Grid>\n  ) : null;\n};\n\nexport default KMSPolicyInfo;\n","// This file is part of MinIO Operator\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ICertificateInfo, ITenantEncryptionResponse } from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button, WarnIcon, SectionTitle } from \"mds\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport { DialogContentText } from \"@mui/material\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport { KeyPair } from \"../ListTenants/utils\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport TLSCertificate from \"../../Common/TLSCertificate/TLSCertificate\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport CodeMirrorWrapper from \"../../Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper\";\nimport FormHr from \"../../Common/FormHr\";\nimport { SecurityContext } from \"../../../../api/operatorApi\";\nimport KMSPolicyInfo from \"./KMSPolicyInfo\";\n\ninterface ITenantEncryption {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    ...containerForHeader,\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n    warningBlock: {\n      color: \"red\",\n      fontSize: \".85rem\",\n      margin: \".5rem 0 .5rem 0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg \": {\n        marginRight: \".3rem\",\n        height: 16,\n        width: 16,\n      },\n    },\n  });\n\nconst TenantEncryption = ({ classes }: ITenantEncryption) => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const [editRawConfiguration, setEditRawConfiguration] = useState<number>(0);\n  const [encryptionRawConfiguration, setEncryptionRawConfiguration] =\n    useState<string>(\"\");\n  const [encryptionEnabled, setEncryptionEnabled] = useState<boolean>(false);\n  const [encryptionType, setEncryptionType] = useState<string>(\"vault\");\n  const [replicas, setReplicas] = useState<string>(\"1\");\n  const [image, setImage] = useState<string>(\"\");\n  const [refreshEncryptionInfo, setRefreshEncryptionInfo] =\n    useState<boolean>(false);\n  const [securityContext, setSecurityContext] = useState<SecurityContext>({\n    fsGroup: \"1000\",\n    fsGroupChangePolicy: \"Always\",\n    runAsGroup: \"1000\",\n    runAsNonRoot: true,\n    runAsUser: \"1000\",\n  });\n  const [policies, setPolicies] = useState<any>([]);\n  const [vaultConfiguration, setVaultConfiguration] = useState<any>(null);\n  const [awsConfiguration, setAWSConfiguration] = useState<any>(null);\n  const [gemaltoConfiguration, setGemaltoConfiguration] = useState<any>(null);\n  const [azureConfiguration, setAzureConfiguration] = useState<any>(null);\n  const [gcpConfiguration, setGCPConfiguration] = useState<any>(null);\n  const [enabledCustomCertificates, setEnabledCustomCertificates] =\n    useState<boolean>(false);\n  const [updatingEncryption, setUpdatingEncryption] = useState<boolean>(false);\n  const [kesServerTLSCertificateSecret, setKesServerTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [minioMTLSCertificateSecret, setMinioMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [minioMTLSCertificate, setMinioMTLSCertificate] =\n    useState<KeyPair | null>(null);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  const [showVaultAppRoleID, setShowVaultAppRoleID] = useState<boolean>(false);\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [showVaultAppRoleSecret, setShowVaultAppRoleSecret] =\n    useState<boolean>(false);\n  const [kmsMTLSCertificateSecret, setKmsMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [kmsCACertificateSecret, setKMSCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [kmsMTLSCertificate, setKmsMTLSCertificate] = useState<KeyPair | null>(\n    null,\n  );\n  const [kesServerCertificate, setKESServerCertificate] =\n    useState<KeyPair | null>(null);\n  const [kmsCACertificate, setKmsCACertificate] = useState<KeyPair | null>(\n    null,\n  );\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [confirmOpen, setConfirmOpen] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (encryptionEnabled) {\n      encryptionValidation = [\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: securityContext.runAsUser,\n          customValidation:\n            securityContext.runAsUser === \"\" ||\n            parseInt(securityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: securityContext.runAsGroup,\n          customValidation:\n            securityContext.runAsGroup === \"\" ||\n            parseInt(securityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: securityContext.fsGroup!,\n          customValidation:\n            securityContext.fsGroup === \"\" ||\n            parseInt(securityContext.fsGroup!) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enabledCustomCertificates) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: false,\n            value: kesServerCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: false,\n            value: kesServerCertificate?.encoded_cert || \"\",\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: false,\n            value: minioMTLSCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: false,\n            value: minioMTLSCertificate?.encoded_cert || \"\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultConfiguration?.endpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultConfiguration?.approle?.id,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultConfiguration?.approle?.secret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultConfiguration?.status?.ping,\n            customValidation: parseInt(vaultConfiguration?.status?.ping) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultConfiguration?.approle?.retry,\n            customValidation: parseInt(vaultConfiguration?.approle?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.endpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.region,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.accesskey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.secretkey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.endpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.token,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.domain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoConfiguration?.keysecure?.credentials?.retry,\n            customValidation:\n              parseInt(gemaltoConfiguration?.keysecure?.credentials?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureConfiguration?.keyvault?.endpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.tenant_id,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_id,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_secret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enabledCustomCertificates,\n    encryptionEnabled,\n    encryptionType,\n    kesServerCertificate?.encoded_key,\n    kesServerCertificate?.encoded_cert,\n    minioMTLSCertificate?.encoded_key,\n    minioMTLSCertificate?.encoded_cert,\n    kmsMTLSCertificate?.encoded_key,\n    kmsMTLSCertificate?.encoded_cert,\n    kmsCACertificate?.encoded_key,\n    kmsCACertificate?.encoded_cert,\n    securityContext,\n    vaultConfiguration,\n    awsConfiguration,\n    gemaltoConfiguration,\n    azureConfiguration,\n    gcpConfiguration,\n    replicas,\n  ]);\n\n  const fetchEncryptionInfo = () => {\n    if (!refreshEncryptionInfo && tenant?.namespace && tenant?.name) {\n      setRefreshEncryptionInfo(true);\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n        )\n        .then((resp: ITenantEncryptionResponse) => {\n          setEncryptionRawConfiguration(resp.raw);\n          if (resp.policies) {\n            setPolicies(resp.policies);\n          }\n          if (resp.vault) {\n            setEncryptionType(\"vault\");\n            setVaultConfiguration(resp.vault);\n          } else if (resp.aws) {\n            setEncryptionType(\"aws\");\n            setAWSConfiguration(resp.aws);\n          } else if (resp.gemalto) {\n            setEncryptionType(\"gemalto\");\n            setGemaltoConfiguration(resp.gemalto);\n          } else if (resp.gcp) {\n            setEncryptionType(\"gcp\");\n            setGCPConfiguration(resp.gcp);\n          } else if (resp.azure) {\n            setEncryptionType(\"azure\");\n            setAzureConfiguration(resp.azure);\n          }\n\n          setEncryptionEnabled(true);\n          setImage(resp.image);\n          setReplicas(resp.replicas);\n          if (resp.securityContext) {\n            setSecurityContext(resp.securityContext);\n          }\n          if (resp.server_tls || resp.minio_mtls || resp.kms_mtls) {\n            setEnabledCustomCertificates(true);\n          }\n          if (resp.server_tls) {\n            setKesServerTLSCertificateSecret(resp.server_tls);\n          }\n          if (resp.minio_mtls) {\n            setMinioMTLSCertificateSecret(resp.minio_mtls);\n          }\n          if (resp.kms_mtls) {\n            setKmsMTLSCertificateSecret(resp.kms_mtls.crt);\n            setKMSCACertificateSecret(resp.kms_mtls.ca);\n          }\n          setRefreshEncryptionInfo(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          console.error(err);\n          setRefreshEncryptionInfo(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    fetchEncryptionInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tenant]);\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n    if (certificateInfo.name === kesServerTLSCertificateSecret?.name) {\n      setKesServerTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === minioMTLSCertificateSecret?.name) {\n      setMinioMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === kmsMTLSCertificateSecret?.name) {\n      setKmsMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === kmsCACertificateSecret?.name) {\n      setKMSCACertificateSecret(null);\n    }\n  };\n\n  const updateEncryptionConfiguration = () => {\n    if (encryptionEnabled) {\n      let insertEncrypt = {};\n      switch (encryptionType) {\n        case \"gemalto\":\n          insertEncrypt = {\n            gemalto: {\n              keysecure: {\n                endpoint: gemaltoConfiguration?.keysecure?.endpoint || \"\",\n                credentials: {\n                  token:\n                    gemaltoConfiguration?.keysecure?.credentials?.token || \"\",\n                  domain:\n                    gemaltoConfiguration?.keysecure?.credentials?.domain || \"\",\n                  retry: parseInt(\n                    gemaltoConfiguration?.keysecure?.credentials?.retry,\n                  ),\n                },\n              },\n            },\n          };\n          break;\n        case \"aws\":\n          insertEncrypt = {\n            aws: {\n              secretsmanager: {\n                endpoint: awsConfiguration?.secretsmanager?.endpoint || \"\",\n                region: awsConfiguration?.secretsmanager?.region || \"\",\n                kmskey: awsConfiguration?.secretsmanager?.kmskey || \"\",\n                credentials: {\n                  accesskey:\n                    awsConfiguration?.secretsmanager?.credentials?.accesskey ||\n                    \"\",\n                  secretkey:\n                    awsConfiguration?.secretsmanager?.credentials?.secretkey ||\n                    \"\",\n                  token:\n                    awsConfiguration?.secretsmanager?.credentials?.token || \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"azure\":\n          insertEncrypt = {\n            azure: {\n              keyvault: {\n                endpoint: azureConfiguration?.keyvault?.endpoint || \"\",\n                credentials: {\n                  tenant_id:\n                    azureConfiguration?.keyvault?.credentials?.tenant_id || \"\",\n                  client_id:\n                    azureConfiguration?.keyvault?.credentials?.client_id || \"\",\n                  client_secret:\n                    azureConfiguration?.keyvault?.credentials?.client_secret ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"gcp\":\n          insertEncrypt = {\n            gcp: {\n              secretmanager: {\n                project_id: gcpConfiguration?.secretmanager?.project_id || \"\",\n                endpoint: gcpConfiguration?.secretmanager?.endpoint || \"\",\n                credentials: {\n                  client_email:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.client_email || \"\",\n                  client_id:\n                    gcpConfiguration?.secretmanager?.credentials?.client_id ||\n                    \"\",\n                  private_key_id:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.private_key_id || \"\",\n                  private_key:\n                    gcpConfiguration?.secretmanager?.credentials?.private_key ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"vault\":\n          insertEncrypt = {\n            vault: {\n              endpoint: vaultConfiguration?.endpoint || \"\",\n              engine: vaultConfiguration?.engine || \"\",\n              namespace: vaultConfiguration?.namespace || \"\",\n              prefix: vaultConfiguration?.prefix || \"\",\n              approle: {\n                engine: vaultConfiguration?.approle?.engine || \"\",\n                id: vaultConfiguration?.approle?.id || \"\",\n                secret: vaultConfiguration?.approle?.secret || \"\",\n                retry: parseInt(vaultConfiguration?.approle?.retry),\n              },\n              status: {\n                ping: parseInt(vaultConfiguration?.status?.ping),\n              },\n            },\n          };\n          break;\n      }\n\n      let encryptionServerKeyPair: any = {};\n      let encryptionClientKeyPair: any = {};\n      let encryptionKMSCertificates: any = {};\n\n      // MinIO -> KES (mTLS certificates)\n      if (\n        minioMTLSCertificate?.encoded_key &&\n        minioMTLSCertificate?.encoded_cert\n      ) {\n        encryptionClientKeyPair = {\n          minio_mtls: {\n            key: minioMTLSCertificate?.encoded_key,\n            crt: minioMTLSCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      // KES server certificates\n      if (\n        kesServerCertificate?.encoded_key &&\n        kesServerCertificate?.encoded_cert\n      ) {\n        encryptionServerKeyPair = {\n          server_tls: {\n            key: kesServerCertificate?.encoded_key,\n            crt: kesServerCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      // KES -> KMS (mTLS certificates)\n      let kmsMTLSKeyPair = null;\n      let kmsCAInsert = null;\n      if (kmsMTLSCertificate?.encoded_key && kmsMTLSCertificate?.encoded_cert) {\n        kmsMTLSKeyPair = {\n          key: kmsMTLSCertificate?.encoded_key,\n          crt: kmsMTLSCertificate?.encoded_cert,\n        };\n      }\n      if (kmsCACertificate?.encoded_cert) {\n        kmsCAInsert = {\n          ca: kmsCACertificate?.encoded_cert,\n        };\n      }\n      if (kmsMTLSKeyPair || kmsCAInsert) {\n        encryptionKMSCertificates = {\n          kms_mtls: {\n            ...kmsMTLSKeyPair,\n            ...kmsCAInsert,\n          },\n        };\n      }\n\n      const dataSend = {\n        raw: editRawConfiguration ? encryptionRawConfiguration : \"\",\n        secretsToBeDeleted: certificatesToBeRemoved || [],\n        replicas: replicas,\n        securityContext: securityContext,\n        image: image,\n        ...encryptionClientKeyPair,\n        ...encryptionServerKeyPair,\n        ...encryptionKMSCertificates,\n        ...insertEncrypt,\n      };\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"PUT\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            dataSend,\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      }\n    } else {\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"DELETE\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            {},\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {confirmOpen && (\n        <ConfirmDialog\n          isOpen={confirmOpen}\n          title={\n            encryptionEnabled\n              ? \"Enable encryption at rest for tenant?\"\n              : \"Disable encryption at rest for tenant?\"\n          }\n          confirmText={encryptionEnabled ? \"Enable\" : \"Disable\"}\n          cancelText=\"Cancel\"\n          onClose={() => setConfirmOpen(false)}\n          onConfirm={updateEncryptionConfiguration}\n          confirmationContent={\n            <DialogContentText>\n              {encryptionEnabled\n                ? \"Data will be encrypted using and external KMS\"\n                : \"Current encrypted information will not be accessible\"}\n              {encryptionEnabled && (\n                <div className={classes.warningBlock}>\n                  <WarnIcon />\n                  <span>\n                    The content of the KES config secret will be overwritten.\n                  </span>\n                </div>\n              )}\n            </DialogContentText>\n          }\n        />\n      )}\n      <Grid container spacing={1}>\n        <Grid item xs>\n          <SectionTitle>Encryption</SectionTitle>\n        </Grid>\n        <Grid item xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\n          <FormSwitchWrapper\n            label={\"\"}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={encryptionEnabled}\n            value={\"tenant_encryption\"}\n            id=\"tenant-encryption\"\n            name=\"tenant-encryption\"\n            onChange={() => {\n              setEncryptionEnabled(!encryptionEnabled);\n            }}\n            description=\"\"\n          />\n        </Grid>\n        <Grid xs={12}>\n          <FormHr />\n        </Grid>\n        {encryptionEnabled && (\n          <Fragment>\n            <Grid item xs={12}>\n              <Tabs\n                value={editRawConfiguration}\n                onChange={(e: React.ChangeEvent<{}>, newValue: number) => {\n                  setEditRawConfiguration(newValue);\n                }}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                aria-label=\"cluster-tabs\"\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n              >\n                <Tab id=\"kms-options\" label=\"Options\" />\n                <Tab id=\"kms-raw-configuration\" label=\"Raw Edit\" />\n              </Tabs>\n            </Grid>\n\n            {editRawConfiguration ? (\n              <Fragment>\n                <Grid item xs={12}>\n                  <CodeMirrorWrapper\n                    value={encryptionRawConfiguration}\n                    mode={\"yaml\"}\n                    onBeforeChange={(editor, data, value) => {\n                      setEncryptionRawConfiguration(value);\n                    }}\n                    editorHeight={\"550px\"}\n                  />\n                </Grid>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <KMSPolicyInfo policies={policies} />\n                <Grid item xs={12} className={classes.encryptionTypeOptions}>\n                  <RadioGroupSelector\n                    currentSelection={encryptionType}\n                    id=\"encryptionType\"\n                    name=\"encryptionType\"\n                    label=\"KMS\"\n                    onChange={(e) => {\n                      setEncryptionType(e.target.value);\n                    }}\n                    selectorOptions={[\n                      { label: \"Vault\", value: \"vault\" },\n                      { label: \"AWS\", value: \"aws\" },\n                      { label: \"Gemalto\", value: \"gemalto\" },\n                      { label: \"GCP\", value: \"gcp\" },\n                      { label: \"Azure\", value: \"azure\" },\n                    ]}\n                  />\n                </Grid>\n\n                {encryptionType === \"vault\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_endpoint\"\n                        name=\"vault_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            endpoint: e.target.value,\n                          })\n                        }\n                        label=\"Endpoint\"\n                        tooltip=\"Endpoint is the Hashicorp Vault endpoint\"\n                        value={vaultConfiguration?.endpoint || \"\"}\n                        error={validationErrors[\"vault_ping\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_engine\"\n                        name=\"vault_engine\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            engine: e.target.value,\n                          })\n                        }\n                        label=\"Engine\"\n                        tooltip=\"Engine is the Hashicorp Vault K/V engine path. If empty, defaults to 'kv'\"\n                        value={vaultConfiguration?.engine || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_namespace\"\n                        name=\"vault_namespace\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            namespace: e.target.value,\n                          })\n                        }\n                        label=\"Namespace\"\n                        tooltip=\"Namespace is an optional Hashicorp Vault namespace. An empty namespace means no particular namespace is used.\"\n                        value={vaultConfiguration?.namespace || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_prefix\"\n                        name=\"vault_prefix\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            prefix: e.target.value,\n                          })\n                        }\n                        label=\"Prefix\"\n                        tooltip=\"Prefix is an optional prefix / directory within the K/V engine. If empty, keys will be stored at the K/V engine top level\"\n                        value={vaultConfiguration?.prefix || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>App Role</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          App Role\n                        </legend>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"vault_approle_engine\"\n                            name=\"vault_approle_engine\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setVaultConfiguration({\n                                ...vaultConfiguration,\n                                approle: {\n                                  ...vaultConfiguration?.approle,\n                                  engine: e.target.value,\n                                },\n                              })\n                            }\n                            label=\"Engine\"\n                            tooltip=\"AppRoleEngine is the AppRole authentication engine path. If empty, defaults to 'approle'\"\n                            value={vaultConfiguration?.approle?.engine || \"\"}\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            type={showVaultAppRoleID ? \"text\" : \"password\"}\n                            id=\"vault_id\"\n                            name=\"vault_id\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setVaultConfiguration({\n                                ...vaultConfiguration,\n                                approle: {\n                                  ...vaultConfiguration?.approle,\n                                  id: e.target.value,\n                                },\n                              })\n                            }\n                            label=\"AppRole ID\"\n                            tooltip=\"AppRoleSecret is the AppRole access secret for authenticating to Hashicorp Vault via the AppRole method\"\n                            value={vaultConfiguration?.approle?.id || \"\"}\n                            required\n                            error={validationErrors[\"vault_id\"] || \"\"}\n                            overlayIcon={\n                              showVaultAppRoleID ? (\n                                <VisibilityOffIcon />\n                              ) : (\n                                <RemoveRedEyeIcon />\n                              )\n                            }\n                            overlayAction={() =>\n                              setShowVaultAppRoleID(!showVaultAppRoleID)\n                            }\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            type={showVaultAppRoleSecret ? \"text\" : \"password\"}\n                            id=\"vault_secret\"\n                            name=\"vault_secret\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setVaultConfiguration({\n                                ...vaultConfiguration,\n                                approle: {\n                                  ...vaultConfiguration?.approle,\n                                  secret: e.target.value,\n                                },\n                              })\n                            }\n                            label=\"AppRole Secret\"\n                            tooltip=\"AppRoleSecret is the AppRole access secret for authenticating to Hashicorp Vault via the AppRole method\"\n                            value={vaultConfiguration?.approle?.secret || \"\"}\n                            required\n                            error={validationErrors[\"vault_secret\"] || \"\"}\n                            overlayIcon={\n                              showVaultAppRoleSecret ? (\n                                <VisibilityOffIcon />\n                              ) : (\n                                <RemoveRedEyeIcon />\n                              )\n                            }\n                            overlayAction={() =>\n                              setShowVaultAppRoleSecret(!showVaultAppRoleSecret)\n                            }\n                          />\n                        </Grid>\n                        <Grid xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            type=\"number\"\n                            min=\"0\"\n                            id=\"vault_retry\"\n                            name=\"vault_retry\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setVaultConfiguration({\n                                ...vaultConfiguration,\n                                approle: {\n                                  ...vaultConfiguration?.approle,\n                                  retry: e.target.value,\n                                },\n                              })\n                            }\n                            label=\"Retry (Seconds)\"\n                            error={validationErrors[\"vault_retry\"] || \"\"}\n                            value={vaultConfiguration?.approle?.retry || \"\"}\n                          />\n                        </Grid>\n                      </fieldset>\n                    </Grid>\n                    <Grid\n                      item\n                      xs={12}\n                      className={classes.formFieldRow}\n                      style={{ marginTop: 15 }}\n                    >\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Status\n                        </legend>\n                        <InputBoxWrapper\n                          type=\"number\"\n                          min=\"0\"\n                          id=\"vault_ping\"\n                          name=\"vault_ping\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setVaultConfiguration({\n                              ...vaultConfiguration,\n                              status: {\n                                ...vaultConfiguration?.status,\n                                ping: e.target.value,\n                              },\n                            })\n                          }\n                          label=\"Ping (Seconds)\"\n                          tooltip=\"controls how often to Vault health status is checked. If not set, defaults to 10s\"\n                          error={validationErrors[\"vault_ping\"] || \"\"}\n                          value={vaultConfiguration?.status?.ping || \"\"}\n                        />\n                      </fieldset>\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"azure\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_endpoint\"\n                        name=\"azure_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        tooltip=\"Endpoint is the Azure KeyVault endpoint\"\n                        error={validationErrors[\"azure_endpoint\"] || \"\"}\n                        value={azureConfiguration?.keyvault?.endpoint || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Credentials\n                        </legend>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"azure_tenant_id\"\n                            name=\"azure_tenant_id\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setAzureConfiguration({\n                                ...azureConfiguration,\n                                keyvault: {\n                                  ...azureConfiguration?.keyvault,\n                                  credentials: {\n                                    ...azureConfiguration?.keyvault\n                                      ?.credentials,\n                                    tenant_id: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Tenant ID\"\n                            tooltip=\"TenantID is the ID of the Azure KeyVault tenant\"\n                            value={\n                              azureConfiguration?.keyvault?.credentials\n                                ?.tenant_id || \"\"\n                            }\n                            error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"azure_client_id\"\n                            name=\"azure_client_id\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setAzureConfiguration({\n                                ...azureConfiguration,\n                                keyvault: {\n                                  ...azureConfiguration?.keyvault,\n                                  credentials: {\n                                    ...azureConfiguration?.keyvault\n                                      ?.credentials,\n                                    client_id: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Client ID\"\n                            tooltip=\"ClientID is the ID of the client accessing Azure KeyVault\"\n                            value={\n                              azureConfiguration?.keyvault?.credentials\n                                ?.client_id || \"\"\n                            }\n                            error={validationErrors[\"azure_client_id\"] || \"\"}\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"azure_client_secret\"\n                            name=\"azure_client_secret\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setAzureConfiguration({\n                                ...azureConfiguration,\n                                keyvault: {\n                                  ...azureConfiguration?.keyvault,\n                                  credentials: {\n                                    ...azureConfiguration?.keyvault\n                                      ?.credentials,\n                                    client_secret: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Client Secret\"\n                            tooltip=\"ClientSecret is the client secret accessing the Azure KeyVault\"\n                            value={\n                              azureConfiguration?.keyvault?.credentials\n                                ?.client_secret || \"\"\n                            }\n                            error={\n                              validationErrors[\"azure_client_secret\"] || \"\"\n                            }\n                          />\n                        </Grid>\n                      </fieldset>\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"gcp\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_project_id\"\n                        name=\"gcp_project_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              project_id: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Project ID\"\n                        tooltip=\"ProjectID is the GCP project ID\"\n                        value={gcpConfiguration?.secretmanager.project_id || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_endpoint\"\n                        name=\"gcp_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        tooltip=\"Endpoint is the GCP project ID. If empty defaults to: secretmanager.googleapis.com:443\"\n                        value={gcpConfiguration?.secretmanager.endpoint || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Credentials\n                        </legend>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gcp_client_email\"\n                            name=\"gcp_client_email\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setGCPConfiguration({\n                                ...gcpConfiguration,\n                                secretmanager: {\n                                  ...gcpConfiguration?.secretmanager,\n                                  credentials: {\n                                    ...gcpConfiguration?.secretmanager\n                                      .credentials,\n                                    client_email: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Client Email\"\n                            tooltip=\"Is the Client email of the GCP service account used to access the SecretManager\"\n                            value={\n                              gcpConfiguration?.secretmanager.credentials\n                                ?.client_email || \"\"\n                            }\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gcp_client_id\"\n                            name=\"gcp_client_id\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setGCPConfiguration({\n                                ...gcpConfiguration,\n                                secretmanager: {\n                                  ...gcpConfiguration?.secretmanager,\n                                  credentials: {\n                                    ...gcpConfiguration?.secretmanager\n                                      .credentials,\n                                    client_id: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Client ID\"\n                            tooltip=\"Is the Client ID of the GCP service account used to access the SecretManager\"\n                            value={\n                              gcpConfiguration?.secretmanager.credentials\n                                ?.client_id || \"\"\n                            }\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gcp_private_key_id\"\n                            name=\"gcp_private_key_id\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setGCPConfiguration({\n                                ...gcpConfiguration,\n                                secretmanager: {\n                                  ...gcpConfiguration?.secretmanager,\n                                  credentials: {\n                                    ...gcpConfiguration?.secretmanager\n                                      .credentials,\n                                    private_key_id: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Private Key ID\"\n                            tooltip=\"Is the private key ID of the GCP service account used to access the SecretManager\"\n                            value={\n                              gcpConfiguration?.secretmanager.credentials\n                                ?.private_key_id || \"\"\n                            }\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gcp_private_key\"\n                            name=\"gcp_private_key\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setGCPConfiguration({\n                                ...gcpConfiguration,\n                                secretmanager: {\n                                  ...gcpConfiguration?.secretmanager,\n                                  credentials: {\n                                    ...gcpConfiguration?.secretmanager\n                                      .credentials,\n                                    private_key: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Private Key\"\n                            tooltip=\"Is the private key of the GCP service account used to access the SecretManager\"\n                            value={\n                              gcpConfiguration?.secretmanager.credentials\n                                ?.private_key || \"\"\n                            }\n                          />\n                        </Grid>\n                      </fieldset>\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"aws\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_endpoint\"\n                        name=\"aws_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        tooltip=\"Endpoint is the AWS SecretsManager endpoint. AWS SecretsManager endpoints have the following schema: secrestmanager[-fips].<region>.amanzonaws.com\"\n                        value={awsConfiguration?.secretsmanager?.endpoint || \"\"}\n                        required\n                        error={validationErrors[\"aws_endpoint\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_region\"\n                        name=\"aws_region\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              region: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Region\"\n                        tooltip=\"Region is the AWS region the SecretsManager is located\"\n                        value={awsConfiguration?.secretsmanager?.region || \"\"}\n                        error={validationErrors[\"aws_region\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_kmsKey\"\n                        name=\"aws_kmsKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              kmskey: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"KMS Key\"\n                        tooltip=\"KMSKey is the AWS-KMS key ID (CMK-ID) used to en/decrypt secrets managed by the SecretsManager. If empty, the default AWS KMS key is used\"\n                        value={awsConfiguration?.secretsmanager?.kmskey || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Credentials\n                        </legend>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"aws_accessKey\"\n                            name=\"aws_accessKey\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setAWSConfiguration({\n                                ...awsConfiguration,\n                                secretsmanager: {\n                                  ...awsConfiguration?.secretsmanager,\n                                  credentials: {\n                                    ...awsConfiguration?.secretsmanager\n                                      ?.credentials,\n                                    accesskey: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Access Key\"\n                            tooltip=\"AccessKey is the access key for authenticating to AWS\"\n                            value={\n                              awsConfiguration?.secretsmanager?.credentials\n                                ?.accesskey || \"\"\n                            }\n                            error={validationErrors[\"aws_accessKey\"] || \"\"}\n                            required\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"aws_secretKey\"\n                            name=\"aws_secretKey\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setAWSConfiguration({\n                                ...awsConfiguration,\n                                secretsmanager: {\n                                  ...awsConfiguration?.secretsmanager,\n                                  credentials: {\n                                    ...awsConfiguration?.secretsmanager\n                                      ?.credentials,\n                                    secretkey: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Secret Key\"\n                            tooltip=\"SecretKey is the secret key for authenticating to AWS\"\n                            value={\n                              awsConfiguration?.secretsmanager?.credentials\n                                ?.secretkey || \"\"\n                            }\n                            error={validationErrors[\"aws_secretKey\"] || \"\"}\n                            required\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"aws_token\"\n                            name=\"aws_token\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setAWSConfiguration({\n                                ...awsConfiguration,\n                                secretsmanager: {\n                                  ...awsConfiguration?.secretsmanager,\n                                  credentials: {\n                                    ...awsConfiguration?.secretsmanager\n                                      ?.credentials,\n                                    token: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Token\"\n                            tooltip=\"SessionToken is an optional session token for authenticating to AWS when using STS\"\n                            value={\n                              awsConfiguration?.secretsmanager?.credentials\n                                ?.token || \"\"\n                            }\n                          />\n                        </Grid>\n                      </fieldset>\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"gemalto\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_endpoint\"\n                        name=\"gemalto_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        tooltip=\"Endpoint is the endpoint to the KeySecure server\"\n                        value={gemaltoConfiguration?.keysecure?.endpoint || \"\"}\n                        error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      xs={12}\n                      style={{\n                        marginBottom: 15,\n                      }}\n                    >\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Credentials\n                        </legend>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gemalto_token\"\n                            name=\"gemalto_token\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setGemaltoConfiguration({\n                                ...gemaltoConfiguration,\n                                keysecure: {\n                                  ...gemaltoConfiguration?.keysecure,\n                                  credentials: {\n                                    ...gemaltoConfiguration?.keysecure\n                                      ?.credentials,\n                                    token: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Token\"\n                            tooltip=\"Token is the refresh authentication token to access the KeySecure server\"\n                            value={\n                              gemaltoConfiguration?.keysecure?.credentials\n                                ?.token || \"\"\n                            }\n                            error={validationErrors[\"gemalto_token\"] || \"\"}\n                            required\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gemalto_domain\"\n                            name=\"gemalto_domain\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setGemaltoConfiguration({\n                                ...gemaltoConfiguration,\n                                keysecure: {\n                                  ...gemaltoConfiguration?.keysecure,\n                                  credentials: {\n                                    ...gemaltoConfiguration?.keysecure\n                                      ?.credentials,\n                                    domain: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Domain\"\n                            tooltip=\"Domain is the isolated namespace within the KeySecure server. If empty, defaults to the top-level / root domain\"\n                            value={\n                              gemaltoConfiguration?.keysecure?.credentials\n                                ?.domain || \"\"\n                            }\n                            error={validationErrors[\"gemalto_domain\"] || \"\"}\n                            required\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            type=\"number\"\n                            min=\"0\"\n                            id=\"gemalto_retry\"\n                            name=\"gemalto_retry\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) =>\n                              setGemaltoConfiguration({\n                                ...gemaltoConfiguration,\n                                keysecure: {\n                                  ...gemaltoConfiguration?.keysecure,\n                                  credentials: {\n                                    ...gemaltoConfiguration?.keysecure\n                                      ?.credentials,\n                                    retry: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Retry (seconds)\"\n                            value={\n                              gemaltoConfiguration?.keysecure?.credentials\n                                ?.retry || \"\"\n                            }\n                            error={validationErrors[\"gemalto_retry\"] || \"\"}\n                          />\n                        </Grid>\n                      </fieldset>\n                    </Grid>\n                  </Fragment>\n                )}\n              </Fragment>\n            )}\n\n            <Grid item xs={12}>\n              <SectionTitle>Additional Configuration for KES</SectionTitle>\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableCustomCertsForKES\"\n                id=\"enableCustomCertsForKES\"\n                name=\"enableCustomCertsForKES\"\n                checked={enabledCustomCertificates}\n                onChange={() =>\n                  setEnabledCustomCertificates(!enabledCustomCertificates)\n                }\n                label={\"Custom Certificates\"}\n              />\n            </Grid>\n            {enabledCustomCertificates && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Encryption server certificates\n                    </legend>\n                    {kesServerTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={kesServerTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(kesServerTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setKESServerCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: kesServerCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: kesServerCertificate?.cert || \"\",\n                              encoded_cert:\n                                kesServerCertificate?.encoded_cert || \"\",\n                            });\n                            cleanValidation(\"serverKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"serverKey\"\n                          name=\"serverKey\"\n                          label=\"Key\"\n                          value={kesServerCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setKESServerCertificate({\n                              encoded_key:\n                                kesServerCertificate?.encoded_key || \"\",\n                              id: kesServerCertificate?.id || \"\",\n                              key: kesServerCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            });\n                            cleanValidation(\"serverCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"serverCert\"\n                          name=\"serverCert\"\n                          label=\"Cert\"\n                          value={kesServerCertificate?.cert}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      MinIO mTLS certificates (connection between MinIO and the\n                      Encryption server)\n                    </legend>\n                    {minioMTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={minioMTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(minioMTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setMinioMTLSCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: minioMTLSCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: minioMTLSCertificate?.cert || \"\",\n                              encoded_cert:\n                                minioMTLSCertificate?.encoded_cert || \"\",\n                            });\n                            cleanValidation(\"clientKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"clientKey\"\n                          name=\"clientKey\"\n                          label=\"Key\"\n                          value={minioMTLSCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setMinioMTLSCertificate({\n                              encoded_key:\n                                minioMTLSCertificate?.encoded_key || \"\",\n                              id: minioMTLSCertificate?.id || \"\",\n                              key: minioMTLSCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            });\n                            cleanValidation(\"clientCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"clientCert\"\n                          name=\"clientCert\"\n                          label=\"Cert\"\n                          value={minioMTLSCertificate?.cert}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      KMS mTLS certificates (connection between the Encryption\n                      server and the KMS)\n                    </legend>\n                    {kmsMTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={kmsMTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(kmsMTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setKmsMTLSCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: kmsMTLSCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: kmsMTLSCertificate?.cert || \"\",\n                              encoded_cert:\n                                kmsMTLSCertificate?.encoded_cert || \"\",\n                            });\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"kms_mtls_key\"\n                          name=\"kms_mtls_key\"\n                          label=\"Key\"\n                          value={kmsMTLSCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) =>\n                            setKmsMTLSCertificate({\n                              encoded_key:\n                                kmsMTLSCertificate?.encoded_key || \"\",\n                              id: kmsMTLSCertificate?.id || \"\",\n                              key: kmsMTLSCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            })\n                          }\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"kms_mtls_cert\"\n                          name=\"kms_mtls_cert\"\n                          label=\"Cert\"\n                          value={kmsMTLSCertificate?.cert || \"\"}\n                        />\n                      </Fragment>\n                    )}\n                    {kmsCACertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={kmsCACertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(kmsCACertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <FileSelector\n                        onChange={(encodedValue, fileName) =>\n                          setKmsCACertificate({\n                            encoded_key: kmsCACertificate?.encoded_key || \"\",\n                            id: kmsCACertificate?.id || \"\",\n                            key: kmsCACertificate?.key || \"\",\n                            cert: fileName || \"\",\n                            encoded_cert: encodedValue || \"\",\n                          })\n                        }\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"kms_mtls_ca\"\n                        name=\"kms_mtls_ca\"\n                        label=\"CA\"\n                        value={kmsCACertificate?.cert || \"\"}\n                      />\n                    )}\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"text\"\n                id=\"image\"\n                name=\"image\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setImage(e.target.value)\n                }\n                label=\"Image\"\n                tooltip=\"KES container image\"\n                placeholder=\"minio/kes:2023-10-03T00-48-37Z\"\n                value={image}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"number\"\n                min=\"1\"\n                id=\"replicas\"\n                name=\"replicas\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setReplicas(e.target.value)\n                }\n                label=\"Replicas\"\n                tooltip=\"Numer of KES pod replicas\"\n                value={replicas}\n                required\n                error={validationErrors[\"replicas\"] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <SectionTitle>SecurityContext for KES</SectionTitle>\n            </Grid>\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n              >\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsUser\"\n                    name=\"kes_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        runAsUser: e.target.value,\n                      });\n                    }}\n                    label=\"Run As User\"\n                    value={securityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsGroup\"\n                    name=\"kes_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        runAsGroup: e.target.value,\n                      });\n                    }}\n                    label=\"Run As Group\"\n                    value={securityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_fsGroup\"\n                    name=\"kes_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        fsGroup: e.target.value,\n                      });\n                    }}\n                    label=\"FsGroup\"\n                    value={securityContext.fsGroup!}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"kesSecurityContextRunAsNonRoot\"\n                id=\"kes_securityContext_runAsNonRoot\"\n                name=\"kes_securityContext_runAsNonRoot\"\n                checked={securityContext.runAsNonRoot}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  setSecurityContext({\n                    ...securityContext,\n                    runAsNonRoot: checked,\n                  });\n                }}\n                label={\"Do not run as Root\"}\n              />\n            </Grid>\n          </Fragment>\n        )}\n        <Grid item xs={12} sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button\n            id={\"save-encryption\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            disabled={!isFormValid}\n            onClick={() => setConfirmOpen(true)}\n            label={\"Save\"}\n          />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(TenantEncryption);\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n"],"names":["withStyles","theme","createStyles","fieldBasic","_ref","value","label","tooltip","mode","classes","onBeforeChange","readOnly","editorHeight","_jsxs","React","children","_jsx","Grid","item","xs","sx","marginBottom","InputLabel","className","inputLabel","tooltipContainer","Tooltip","title","placement","HelpIcon","style","maxHeight","overflow","border","CodeEditor","language","onChange","evn","target","id","padding","fontSize","backgroundColor","fontFamily","minHeight","color","background","borderTop","Box","display","alignItems","paddingRight","justifyContent","height","width","marginLeft","TooltipWrapper","CopyToClipboard","text","Button","type","icon","CopyIcon","variant","tooltipHelper","valueString","maxWidth","whiteSpace","textOverflow","marginTop","fileInputField","margin","flexFlow","fileInputStyles","fontWeight","textBoxContainer","paddingLeft","name","disabled","required","error","accept","showFileSelector","setShowSelector","useState","concat","fieldBottom","fieldContainer","errorInField","htmlFor","fieldLabelError","e","fileName","get","fileProcess","evt","callback","file","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","length","data","IconButton","component","onClick","disableRipple","disableFocusRipple","size","CancelIcon","ErrorBlock","errorMessage","fileReselect","AttachFileIcon","styled","_templateObject","_taggedTemplateLiteral","certificateIcon","float","paddingTop","certificateInfo","certificateWrapper","userSelect","borderRadius","certificateExpiry","flexWrap","certificateDomains","certificatesList","textTransform","overflowY","certificatesListItem","borderBottom","minWidth","marginRight","opacity","certificateExpiring","certificateExpired","onDelete","certificates","domains","expiry","DateTime","fromISO","now","utc","daysToExpiry","daysToExpiryHuman","certificateExpiration","durationToExpiry","diff","as","minus","Duration","fromObject","days","shiftTo","toHuman","listStyle","maximumFractionDigits","minutes","Chip","Container","CertificateIcon","Typography","gutterBottom","EventBusyIcon","toFormat","AccessTimeIcon","Divider","List","map","dom","index","ListItem","ListItemAvatar","LanguageIcon","ListItemText","primary","PolicyItem","items","Fragment","gap","iTxt","_ref2","policies","fmtPolicies","arguments","undefined","Object","keys","polName","policyConfig","identities","paths","allow","deny","getPolicyData","withBorders","pConf","borderLeft","borderRight","tenantDetailsStyles","spacingUtils","containerForHeader","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","warningBlock","_vaultConfiguration$a9","_vaultConfiguration$a10","_vaultConfiguration$a11","_vaultConfiguration$a12","_vaultConfiguration$s4","_azureConfiguration$k15","_azureConfiguration$k17","_azureConfiguration$k18","_azureConfiguration$k20","_azureConfiguration$k21","_azureConfiguration$k23","_azureConfiguration$k24","_gcpConfiguration$sec11","_gcpConfiguration$sec12","_gcpConfiguration$sec13","_gcpConfiguration$sec14","_awsConfiguration$sec16","_awsConfiguration$sec17","_awsConfiguration$sec18","_awsConfiguration$sec20","_awsConfiguration$sec21","_awsConfiguration$sec23","_awsConfiguration$sec24","_awsConfiguration$sec26","_awsConfiguration$sec27","_gemaltoConfiguration17","_gemaltoConfiguration19","_gemaltoConfiguration20","_gemaltoConfiguration22","_gemaltoConfiguration23","_gemaltoConfiguration25","_gemaltoConfiguration26","dispatch","useAppDispatch","tenant","useSelector","state","tenants","tenantInfo","editRawConfiguration","setEditRawConfiguration","encryptionRawConfiguration","setEncryptionRawConfiguration","encryptionEnabled","setEncryptionEnabled","encryptionType","setEncryptionType","replicas","setReplicas","image","setImage","refreshEncryptionInfo","setRefreshEncryptionInfo","securityContext","setSecurityContext","fsGroup","fsGroupChangePolicy","runAsGroup","runAsNonRoot","runAsUser","setPolicies","vaultConfiguration","setVaultConfiguration","awsConfiguration","setAWSConfiguration","gemaltoConfiguration","setGemaltoConfiguration","azureConfiguration","setAzureConfiguration","gcpConfiguration","setGCPConfiguration","enabledCustomCertificates","setEnabledCustomCertificates","updatingEncryption","setUpdatingEncryption","kesServerTLSCertificateSecret","setKesServerTLSCertificateSecret","minioMTLSCertificateSecret","setMinioMTLSCertificateSecret","minioMTLSCertificate","setMinioMTLSCertificate","certificatesToBeRemoved","setCertificatesToBeRemoved","showVaultAppRoleID","setShowVaultAppRoleID","isFormValid","setIsFormValid","showVaultAppRoleSecret","setShowVaultAppRoleSecret","kmsMTLSCertificateSecret","setKmsMTLSCertificateSecret","kmsCACertificateSecret","setKMSCACertificateSecret","kmsMTLSCertificate","setKmsMTLSCertificate","kesServerCertificate","setKESServerCertificate","kmsCACertificate","setKmsCACertificate","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","confirmOpen","setConfirmOpen","useEffect","encryptionValidation","_vaultConfiguration$a","_vaultConfiguration$a2","_vaultConfiguration$s","_vaultConfiguration$s2","_vaultConfiguration$a3","_vaultConfiguration$a4","_awsConfiguration$sec","_awsConfiguration$sec2","_awsConfiguration$sec3","_awsConfiguration$sec4","_awsConfiguration$sec5","_awsConfiguration$sec6","_gemaltoConfiguration","_gemaltoConfiguration2","_gemaltoConfiguration3","_gemaltoConfiguration4","_gemaltoConfiguration5","_gemaltoConfiguration6","_gemaltoConfiguration7","_gemaltoConfiguration8","_gemaltoConfiguration9","_azureConfiguration$k","_azureConfiguration$k2","_azureConfiguration$k3","_azureConfiguration$k4","_azureConfiguration$k5","_azureConfiguration$k6","_azureConfiguration$k7","fieldKey","customValidation","parseInt","customValidationMessage","encoded_key","encoded_cert","endpoint","approle","secret","status","ping","retry","secretsmanager","region","credentials","accesskey","secretkey","keysecure","token","domain","keyvault","tenant_id","client_id","client_secret","commonVal","commonFormValidation","fetchEncryptionInfo","namespace","api","invoke","then","resp","raw","vault","aws","gemalto","gcp","azure","server_tls","minio_mtls","kms_mtls","crt","ca","catch","err","console","removeCertificate","ConfirmDialog","isOpen","confirmText","cancelText","onClose","onConfirm","updateEncryptionConfiguration","_gemaltoConfiguration10","_gemaltoConfiguration11","_gemaltoConfiguration12","_gemaltoConfiguration13","_gemaltoConfiguration14","_gemaltoConfiguration15","_gemaltoConfiguration16","_awsConfiguration$sec7","_awsConfiguration$sec8","_awsConfiguration$sec9","_awsConfiguration$sec10","_awsConfiguration$sec11","_awsConfiguration$sec12","_awsConfiguration$sec13","_awsConfiguration$sec14","_awsConfiguration$sec15","_azureConfiguration$k8","_azureConfiguration$k9","_azureConfiguration$k10","_azureConfiguration$k11","_azureConfiguration$k12","_azureConfiguration$k13","_azureConfiguration$k14","_gcpConfiguration$sec","_gcpConfiguration$sec2","_gcpConfiguration$sec3","_gcpConfiguration$sec4","_gcpConfiguration$sec5","_gcpConfiguration$sec6","_gcpConfiguration$sec7","_gcpConfiguration$sec8","_gcpConfiguration$sec9","_gcpConfiguration$sec10","_vaultConfiguration$a5","_vaultConfiguration$a6","_vaultConfiguration$a7","_vaultConfiguration$a8","_vaultConfiguration$s3","insertEncrypt","kmskey","secretmanager","project_id","client_email","private_key_id","private_key","engine","prefix","encryptionServerKeyPair","encryptionClientKeyPair","encryptionKMSCertificates","key","kmsMTLSKeyPair","kmsCAInsert","dataSend","secretsToBeDeleted","setErrorSnackMessage","confirmationContent","DialogContentText","WarnIcon","container","spacing","SectionTitle","textAlign","FormSwitchWrapper","indicatorLabels","checked","description","FormHr","Tabs","newValue","indicatorColor","textColor","scrollButtons","Tab","CodeMirrorWrapper","editor","KMSPolicyInfo","encryptionTypeOptions","RadioGroupSelector","currentSelection","selectorOptions","InputBoxWrapper","fieldGroup","descriptionText","formFieldRow","overlayIcon","VisibilityOffIcon","RemoveRedEyeIcon","overlayAction","min","_azureConfiguration$k16","_azureConfiguration$k19","_azureConfiguration$k22","_awsConfiguration$sec19","_awsConfiguration$sec22","_awsConfiguration$sec25","_gemaltoConfiguration18","_gemaltoConfiguration21","_gemaltoConfiguration24","TLSCertificate","FileSelector","encodedValue","cert","placeholder","multiContainer","responsiveContainer","rightSpacer","_theme$palette","errorBlock","palette","main","withBreak"],"sourceRoot":""}