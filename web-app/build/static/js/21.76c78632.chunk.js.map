{"version":3,"file":"static/js/21.76c78632.chunk.js","mappings":"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","sources":["screens/Console/Tenants/LogoComponents.tsx","screens/Console/Tenants/TenantDetails/TenantIdentityProvider.tsx","../node_modules/@mui/icons-material/Add.js","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Grid } from \"@mui/material\";\nimport { LDAPIcon, OIDCIcon, UsersIcon } from \"mds\";\n\nexport const OIDCLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <OIDCIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>Open ID</Grid>\n    </Grid>\n  );\n};\n\nexport const LDAPLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <LDAPIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>LDAP / Active Directory</Grid>\n    </Grid>\n  );\n};\n\nexport const BuiltInLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <UsersIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>Built-in</Grid>\n    </Grid>\n  );\n};\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport {\n  DialogContentText,\n  IconButton,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button, ConfirmModalIcon, Loader } from \"mds\";\nimport Grid from \"@mui/material/Grid\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport {\n  ITenantIdentityProviderResponse,\n  ITenantSetAdministratorsRequest,\n} from \"../types\";\nimport {\n  BuiltInLogoElement,\n  LDAPLogoElement,\n  OIDCLogoElement,\n} from \"../LogoComponents\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport {\n  setErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport api from \"../../../../common/api\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport SectionTitle from \"../../Common/SectionTitle\";\n\ninterface ITenantIdentityProvider {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    adUserDnRows: {\n      display: \"flex\",\n      marginBottom: 10,\n    },\n    buttonTray: {\n      marginLeft: 10,\n      display: \"flex\",\n      height: 38,\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    ...containerForHeader,\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nfunction FormHr() {\n  return null;\n}\n\nconst TenantIdentityProvider = ({ classes }: ITenantIdentityProvider) => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant,\n  );\n\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [idpSelection, setIdpSelection] = useState<string>(\"Built-in\");\n  const [openIDConfigurationURL, setOpenIDConfigurationURL] =\n    useState<string>(\"\");\n  const [openIDClientID, setOpenIDClientID] = useState<string>(\"\");\n  const [openIDSecretID, setOpenIDSecretID] = useState<string>(\"\");\n  const [showOIDCSecretID, setShowOIDCSecretID] = useState<boolean>(false);\n  const [openIDCallbackURL, setOpenIDCallbackURL] = useState<string>(\"\");\n  const [openIDClaimName, setOpenIDClaimName] = useState<string>(\"\");\n  const [openIDScopes, setOpenIDScopes] = useState<string>(\"\");\n  const [ADURL, setADURL] = useState<string>(\"\");\n  const [ADLookupBindDN, setADLookupBindDN] = useState<string>(\"\");\n  const [ADLookupBindPassword, setADLookupBindPassword] = useState<string>(\"\");\n  const [showADLookupBindPassword, setShowADLookupBindPassword] =\n    useState<boolean>(false);\n  const [ADUserDNSearchBaseDN, setADUserDNSearchBaseDN] = useState<string>(\"\");\n  const [ADUserDNSearchFilter, setADUserDNSearchFilter] = useState<string>(\"\");\n  const [ADGroupSearchBaseDN, setADGroupSearchBaseDN] = useState<string>(\"\");\n  const [ADGroupSearchFilter, setADGroupSearchFilter] = useState<string>(\"\");\n  const [ADSkipTLS, setADSkipTLS] = useState<boolean>(false);\n  const [ADServerInsecure, setADServerInsecure] = useState<boolean>(false);\n  const [ADServerStartTLS, setADServerStartTLS] = useState<boolean>(false);\n  const [ADUserDNs, setADUserDNs] = useState<string[]>([\"\"]);\n  const [ADGroupDNs, setADGroupDNs] = useState<string[]>([\"\"]);\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let identityProviderValidation: IValidation[] = [];\n\n    if (idpSelection === \"OpenID\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: false,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(identityProviderValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    idpSelection,\n    openIDConfigurationURL,\n    openIDClientID,\n    openIDSecretID,\n    openIDClaimName,\n    ADURL,\n    ADLookupBindDN,\n  ]);\n\n  const getTenantIdentityProviderInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`,\n      )\n      .then((res: ITenantIdentityProviderResponse) => {\n        if (res) {\n          if (res.oidc) {\n            setIdpSelection(\"OpenID\");\n            setOpenIDConfigurationURL(res.oidc.configuration_url);\n            setOpenIDClientID(res.oidc.client_id);\n            setOpenIDSecretID(res.oidc.secret_id);\n            setOpenIDCallbackURL(res.oidc.callback_url);\n            setOpenIDClaimName(res.oidc.claim_name);\n            setOpenIDScopes(res.oidc.scopes);\n          } else if (res.active_directory) {\n            setIdpSelection(\"AD\");\n            setADURL(res.active_directory.url);\n            setADLookupBindDN(res.active_directory.lookup_bind_dn);\n            setADLookupBindPassword(res.active_directory.lookup_bind_password);\n            setADUserDNSearchBaseDN(\n              res.active_directory.user_dn_search_base_dn,\n            );\n            setADUserDNSearchFilter(res.active_directory.user_dn_search_filter);\n            setADGroupSearchBaseDN(res.active_directory.group_search_base_dn);\n            setADGroupSearchFilter(res.active_directory.group_search_filter);\n            setADSkipTLS(res.active_directory.skip_tls_verification);\n            setADServerInsecure(res.active_directory.server_insecure);\n            setADServerStartTLS(res.active_directory.server_start_tls);\n          }\n        }\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n      });\n  }, [tenant, dispatch]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantIdentityProviderInfo();\n    }\n  }, [tenant, getTenantIdentityProviderInfo]);\n\n  const updateTenantIdentityProvider = () => {\n    setIsSending(true);\n    let payload: ITenantIdentityProviderResponse = {};\n    switch (idpSelection) {\n      case \"AD\":\n        payload.active_directory = {\n          url: ADURL,\n          lookup_bind_dn: ADLookupBindDN,\n          lookup_bind_password: ADLookupBindPassword,\n          user_dn_search_base_dn: ADUserDNSearchBaseDN,\n          user_dn_search_filter: ADUserDNSearchFilter,\n          group_search_base_dn: ADGroupSearchBaseDN,\n          group_search_filter: ADGroupSearchFilter,\n          skip_tls_verification: ADSkipTLS,\n          server_insecure: ADServerInsecure,\n          server_start_tls: ADServerStartTLS,\n        };\n        break;\n      case \"OpenID\":\n        payload.oidc = {\n          configuration_url: openIDConfigurationURL,\n          client_id: openIDClientID,\n          secret_id: openIDSecretID,\n          callback_url: openIDCallbackURL,\n          claim_name: openIDClaimName,\n          scopes: openIDScopes,\n        };\n        break;\n      default:\n      // Built-in IDP will be used by default\n    }\n\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`,\n        payload,\n      )\n      .then(() => {\n        setIsSending(false);\n        // Close confirmation modal\n        setDialogOpen(false);\n        getTenantIdentityProviderInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  const setAdministrators = () => {\n    setIsSending(true);\n    let payload: ITenantSetAdministratorsRequest = {};\n    switch (idpSelection) {\n      case \"AD\":\n        payload = {\n          user_dns: ADUserDNs.filter((user) => user.trim() !== \"\"),\n          group_dns: ADGroupDNs.filter((group) => group.trim() !== \"\"),\n        };\n        break;\n      default:\n      // Built-in IDP will be used by default\n    }\n\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/set-administrators`,\n        payload,\n      )\n      .then(() => {\n        setIsSending(false);\n        setADGroupDNs([\"\"]);\n        setADUserDNs([\"\"]);\n        getTenantIdentityProviderInfo();\n        dispatch(setSnackBarMessage(`Administrators added successfully`));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <ConfirmDialog\n        title={\"Save and Restart\"}\n        confirmText={\"Restart\"}\n        cancelText=\"Cancel\"\n        titleIcon={<ConfirmModalIcon />}\n        isLoading={isSending}\n        onClose={() => setDialogOpen(false)}\n        isOpen={dialogOpen}\n        onConfirm={updateTenantIdentityProvider}\n        confirmationContent={\n          <DialogContentText>\n            Are you sure you want to save the changes and restart the service?\n          </DialogContentText>\n        }\n      />\n      {loadingTenant ? (\n        <div className={classes.loaderAlign}>\n          <Loader />\n        </div>\n      ) : (\n        <Fragment>\n          <Grid item xs={12}>\n            <h1 className={classes.sectionTitle}>Identity Provider</h1>\n            <FormHr />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            className={classes.protocolRadioOptions}\n            paddingBottom={1}\n          >\n            <RadioGroupSelector\n              currentSelection={idpSelection}\n              id=\"idp-options\"\n              name=\"idp-options\"\n              label=\"Protocol\"\n              onChange={(e) => {\n                setIdpSelection(e.target.value);\n              }}\n              selectorOptions={[\n                { label: <BuiltInLogoElement />, value: \"Built-in\" },\n                { label: <OIDCLogoElement />, value: \"OpenID\" },\n                { label: <LDAPLogoElement />, value: \"AD\" },\n              ]}\n            />\n          </Grid>\n\n          {idpSelection === \"OpenID\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_CONFIGURATION_URL\"\n                  name=\"openID_CONFIGURATION_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDConfigurationURL(e.target.value);\n                    cleanValidation(\"openID_CONFIGURATION_URL\");\n                  }}\n                  label=\"Configuration URL\"\n                  value={openIDConfigurationURL}\n                  placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n                  error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_clientID\"\n                  name=\"openID_clientID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClientID(e.target.value);\n                    cleanValidation(\"openID_clientID\");\n                  }}\n                  label=\"Client ID\"\n                  value={openIDClientID}\n                  error={validationErrors[\"openID_clientID\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type={showOIDCSecretID ? \"text\" : \"password\"}\n                  id=\"openID_secretID\"\n                  name=\"openID_secretID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDSecretID(e.target.value);\n                    cleanValidation(\"openID_secretID\");\n                  }}\n                  label=\"Secret ID\"\n                  value={openIDSecretID}\n                  error={validationErrors[\"openID_secretID\"] || \"\"}\n                  required\n                  overlayIcon={\n                    showOIDCSecretID ? (\n                      <VisibilityOffIcon />\n                    ) : (\n                      <RemoveRedEyeIcon />\n                    )\n                  }\n                  overlayAction={() => setShowOIDCSecretID(!showOIDCSecretID)}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_claimName\"\n                  name=\"openID_claimName\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClaimName(e.target.value);\n                    cleanValidation(\"openID_claimName\");\n                  }}\n                  label=\"Claim Name\"\n                  value={openIDClaimName}\n                  placeholder=\"policy\"\n                  error={validationErrors[\"openID_claimName\"] || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_scopes\"\n                  name=\"openID_scopes\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDScopes(e.target.value);\n                    cleanValidation(\"openID_scopes\");\n                  }}\n                  label=\"Scopes\"\n                  value={openIDScopes}\n                />\n              </Grid>\n            </Fragment>\n          )}\n\n          {idpSelection === \"AD\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"AD_URL\"\n                  name=\"AD_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADURL(e.target.value);\n                    cleanValidation(\"AD_URL\");\n                  }}\n                  label=\"LDAP Server Address\"\n                  value={ADURL}\n                  placeholder=\"ldap-server:636\"\n                  error={validationErrors[\"AD_URL\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_skipTLS\"\n                  id=\"ad_skipTLS\"\n                  name=\"ad_skipTLS\"\n                  checked={ADSkipTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADSkipTLS(checked);\n                  }}\n                  label={\"Skip TLS Verification\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_serverInsecure\"\n                  id=\"ad_serverInsecure\"\n                  name=\"ad_serverInsecure\"\n                  checked={ADServerInsecure}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerInsecure(checked);\n                  }}\n                  label={\"Server Insecure\"}\n                />\n              </Grid>\n              {ADServerInsecure ? (\n                <Grid item xs={12}>\n                  <Typography\n                    className={classes.error}\n                    variant=\"caption\"\n                    display=\"block\"\n                    gutterBottom\n                  >\n                    Warning: All traffic with Active Directory will be\n                    unencrypted\n                  </Typography>\n                  <br />\n                </Grid>\n              ) : null}\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_serverStartTLS\"\n                  id=\"ad_serverStartTLS\"\n                  name=\"ad_serverStartTLS\"\n                  checked={ADServerStartTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerStartTLS(checked);\n                  }}\n                  label={\"Start TLS connection to AD/LDAP server\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_lookupBindDN\"\n                  name=\"ad_lookupBindDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindDN(e.target.value);\n                    cleanValidation(\"ad_lookupBindDN\");\n                  }}\n                  label=\"Lookup Bind DN\"\n                  value={ADLookupBindDN}\n                  placeholder=\"cn=admin,dc=min,dc=io\"\n                  error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type={showADLookupBindPassword ? \"text\" : \"password\"}\n                  id=\"ad_lookupBindPassword\"\n                  name=\"ad_lookupBindPassword\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindPassword(e.target.value);\n                  }}\n                  label=\"Lookup Bind Password\"\n                  value={ADLookupBindPassword}\n                  placeholder=\"admin\"\n                  overlayIcon={\n                    showADLookupBindPassword ? (\n                      <VisibilityOffIcon />\n                    ) : (\n                      <RemoveRedEyeIcon />\n                    )\n                  }\n                  overlayAction={() =>\n                    setShowADLookupBindPassword(!showADLookupBindPassword)\n                  }\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_userDNSearchBaseDN\"\n                  name=\"ad_userDNSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchBaseDN(e.target.value);\n                  }}\n                  label=\"User DN Search Base DN\"\n                  value={ADUserDNSearchBaseDN}\n                  placeholder=\"dc=min,dc=io\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_userDNSearchFilter\"\n                  name=\"ad_userDNSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchFilter(e.target.value);\n                  }}\n                  label=\"User DN Search Filter\"\n                  value={ADUserDNSearchFilter}\n                  placeholder=\"(sAMAcountName=%s)\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_groupSearchBaseDN\"\n                  name=\"ad_groupSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchBaseDN(e.target.value);\n                  }}\n                  label=\"Group Search Base DN\"\n                  value={ADGroupSearchBaseDN}\n                  placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_groupSearchFilter\"\n                  name=\"ad_groupSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchFilter(e.target.value);\n                  }}\n                  label=\"Group Search Filter\"\n                  value={ADGroupSearchFilter}\n                  placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n                />\n              </Grid>\n            </Fragment>\n          )}\n\n          <Grid item xs={12} className={classes.buttonContainer}>\n            <Button\n              id={\"save-idp\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              color=\"primary\"\n              disabled={!isFormValid || isSending}\n              onClick={() => setDialogOpen(true)}\n              label={\"Save\"}\n            />\n          </Grid>\n\n          {idpSelection === \"AD\" && (\n            <Fragment>\n              <SectionTitle>User & Group management</SectionTitle>\n              <br />\n              <fieldset className={classes.fieldGroup}>\n                <legend className={classes.descriptionText}>\n                  List of user DNs (Distinguished Names) to be added as Tenant\n                  Administrators\n                </legend>\n                <Grid item xs={12}>\n                  {ADUserDNs.map((_, index) => {\n                    return (\n                      <Fragment key={`identityField-${index.toString()}`}>\n                        <div className={classes.adUserDnRows}>\n                          <InputBoxWrapper\n                            id={`ad-userdn-${index.toString()}`}\n                            label={\"\"}\n                            placeholder=\"\"\n                            name={`ad-userdn-${index.toString()}`}\n                            value={ADUserDNs[index]}\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) => {\n                              setADUserDNs(\n                                ADUserDNs.map((group, i) =>\n                                  i === index ? e.target.value : group,\n                                ),\n                              );\n                            }}\n                            index={index}\n                            key={`csv-ad-userdn-${index.toString()}`}\n                            error={\n                              validationErrors[\n                                `ad-userdn-${index.toString()}`\n                              ] || \"\"\n                            }\n                          />\n                          <div className={classes.buttonTray}>\n                            <Tooltip title=\"Add User\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  setADUserDNs([...ADUserDNs, \"\"]);\n                                }}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Remove\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                style={{ marginLeft: 16 }}\n                                onClick={() => {\n                                  if (ADUserDNs.length > 1) {\n                                    setADUserDNs(\n                                      ADUserDNs.filter((_, i) => i !== index),\n                                    );\n                                  }\n                                }}\n                              >\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </div>\n                        </div>\n                      </Fragment>\n                    );\n                  })}\n                </Grid>\n              </fieldset>\n              <fieldset className={classes.fieldGroup}>\n                <legend className={classes.descriptionText}>\n                  List of group DNs (Distinguished Names) to be added as Tenant\n                  Administrators\n                </legend>\n                <Grid item xs={12}>\n                  {ADGroupDNs.map((_, index) => {\n                    return (\n                      <Fragment key={`identityField-${index.toString()}`}>\n                        <div className={classes.adUserDnRows}>\n                          <InputBoxWrapper\n                            id={`ad-groupdn-${index.toString()}`}\n                            label={\"\"}\n                            placeholder=\"\"\n                            name={`ad-groupdn-${index.toString()}`}\n                            value={ADGroupDNs[index]}\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) => {\n                              setADGroupDNs(\n                                ADGroupDNs.map((group, i) =>\n                                  i === index ? e.target.value : group,\n                                ),\n                              );\n                            }}\n                            index={index}\n                            key={`csv-ad-groupdn-${index.toString()}`}\n                            error={\n                              validationErrors[\n                                `ad-groupdn-${index.toString()}`\n                              ] || \"\"\n                            }\n                          />\n                          <div className={classes.buttonTray}>\n                            <Tooltip title=\"Add Group\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  setADGroupDNs([...ADGroupDNs, \"\"]);\n                                }}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Remove\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                style={{ marginLeft: 16 }}\n                                onClick={() => {\n                                  if (ADGroupDNs.length > 1) {\n                                    setADGroupDNs(\n                                      ADGroupDNs.filter((_, i) => i !== index),\n                                    );\n                                  }\n                                }}\n                              >\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </div>\n                        </div>\n                      </Fragment>\n                    );\n                  })}\n                </Grid>\n              </fieldset>\n              <br />\n              <Grid item xs={12} className={classes.buttonContainer}>\n                <Button\n                  id={\"add-additional-dns\"}\n                  type=\"submit\"\n                  variant=\"callAction\"\n                  disabled={!isFormValid || isSending}\n                  onClick={() => setAdministrators()}\n                  label={\"Add additional DNs\"}\n                />\n              </Grid>\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.loadingTenant,\n  selectedTenant: state.tenants.currentTenant,\n  tenant: state.tenants.tenantInfo,\n});\n\nconst connector = connect(mapState, null);\n\nexport default withStyles(styles)(connector(TenantIdentityProvider));\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;"],"names":["OIDCLogoElement","_jsxs","Grid","container","columnGap","children","_jsx","OIDCIcon","width","height","item","LDAPLogoElement","LDAPIcon","BuiltInLogoElement","UsersIcon","FormHr","connector","connect","state","loadingTenant","tenants","selectedTenant","currentTenant","tenant","tenantInfo","withStyles","theme","createStyles","adUserDnRows","display","marginBottom","buttonTray","marginLeft","background","tenantDetailsStyles","spacingUtils","loaderAlign","textAlign","containerForHeader","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","_ref","classes","dispatch","useAppDispatch","useSelector","isSending","setIsSending","useState","dialogOpen","setDialogOpen","idpSelection","setIdpSelection","openIDConfigurationURL","setOpenIDConfigurationURL","openIDClientID","setOpenIDClientID","openIDSecretID","setOpenIDSecretID","showOIDCSecretID","setShowOIDCSecretID","openIDCallbackURL","setOpenIDCallbackURL","openIDClaimName","setOpenIDClaimName","openIDScopes","setOpenIDScopes","ADURL","setADURL","ADLookupBindDN","setADLookupBindDN","ADLookupBindPassword","setADLookupBindPassword","showADLookupBindPassword","setShowADLookupBindPassword","ADUserDNSearchBaseDN","setADUserDNSearchBaseDN","ADUserDNSearchFilter","setADUserDNSearchFilter","ADGroupSearchBaseDN","setADGroupSearchBaseDN","ADGroupSearchFilter","setADGroupSearchFilter","ADSkipTLS","setADSkipTLS","ADServerInsecure","setADServerInsecure","ADServerStartTLS","setADServerStartTLS","ADUserDNs","setADUserDNs","ADGroupDNs","setADGroupDNs","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","isFormValid","setIsFormValid","useEffect","identityProviderValidation","fieldKey","required","value","commonVal","commonFormValidation","Object","keys","length","getTenantIdentityProviderInfo","useCallback","api","invoke","concat","namespace","name","then","res","oidc","configuration_url","client_id","secret_id","callback_url","claim_name","scopes","active_directory","url","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter","skip_tls_verification","server_insecure","server_start_tls","catch","err","setErrorSnackMessage","React","ConfirmDialog","title","confirmText","cancelText","titleIcon","ConfirmModalIcon","isLoading","onClose","isOpen","onConfirm","updateTenantIdentityProvider","payload","confirmationContent","DialogContentText","className","Loader","Fragment","xs","sectionTitle","protocolRadioOptions","paddingBottom","RadioGroupSelector","currentSelection","id","label","onChange","e","target","selectorOptions","formFieldRow","InputBoxWrapper","placeholder","error","type","overlayIcon","VisibilityOffIcon","RemoveRedEyeIcon","overlayAction","FormSwitchWrapper","checked","Typography","variant","gutterBottom","buttonContainer","Button","color","disabled","onClick","SectionTitle","fieldGroup","descriptionText","map","_","index","toString","group","i","Tooltip","IconButton","size","AddIcon","style","filter","DeleteIcon","setAdministrators","user_dns","user","trim","group_dns","setSnackBarMessage","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}