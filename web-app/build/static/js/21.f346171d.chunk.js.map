{"version":3,"file":"static/js/21.f346171d.chunk.js","mappings":"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","sources":["screens/Console/Tenants/LogoComponents.tsx","screens/Console/Tenants/TenantDetails/TenantIdentityProvider.tsx","../node_modules/@mui/icons-material/Add.js","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Grid } from \"@mui/material\";\nimport { LDAPIcon, OIDCIcon, UsersIcon } from \"mds\";\n\nexport const OIDCLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <OIDCIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>Open ID</Grid>\n    </Grid>\n  );\n};\n\nexport const LDAPLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <LDAPIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>LDAP / Active Directory</Grid>\n    </Grid>\n  );\n};\n\nexport const BuiltInLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <UsersIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>Built-in</Grid>\n    </Grid>\n  );\n};\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport {\n  DialogContentText,\n  IconButton,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button, ConfirmModalIcon, Loader } from \"mds\";\nimport Grid from \"@mui/material/Grid\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport {\n  ITenantIdentityProviderResponse,\n  ITenantSetAdministratorsRequest,\n} from \"../types\";\nimport {\n  BuiltInLogoElement,\n  LDAPLogoElement,\n  OIDCLogoElement,\n} from \"../LogoComponents\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport {\n  setErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport api from \"../../../../common/api\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport SectionTitle from \"../../Common/SectionTitle\";\n\ninterface ITenantIdentityProvider {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    adUserDnRows: {\n      display: \"flex\",\n      marginBottom: 10,\n    },\n    buttonTray: {\n      marginLeft: 10,\n      display: \"flex\",\n      height: 38,\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    ...containerForHeader,\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nfunction FormHr() {\n  return null;\n}\n\nconst TenantIdentityProvider = ({ classes }: ITenantIdentityProvider) => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant\n  );\n\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [idpSelection, setIdpSelection] = useState<string>(\"Built-in\");\n  const [openIDConfigurationURL, setOpenIDConfigurationURL] =\n    useState<string>(\"\");\n  const [openIDClientID, setOpenIDClientID] = useState<string>(\"\");\n  const [openIDSecretID, setOpenIDSecretID] = useState<string>(\"\");\n  const [showOIDCSecretID, setShowOIDCSecretID] = useState<boolean>(false);\n  const [openIDCallbackURL, setOpenIDCallbackURL] = useState<string>(\"\");\n  const [openIDClaimName, setOpenIDClaimName] = useState<string>(\"\");\n  const [openIDScopes, setOpenIDScopes] = useState<string>(\"\");\n  const [ADURL, setADURL] = useState<string>(\"\");\n  const [ADLookupBindDN, setADLookupBindDN] = useState<string>(\"\");\n  const [ADLookupBindPassword, setADLookupBindPassword] = useState<string>(\"\");\n  const [showADLookupBindPassword, setShowADLookupBindPassword] =\n    useState<boolean>(false);\n  const [ADUserDNSearchBaseDN, setADUserDNSearchBaseDN] = useState<string>(\"\");\n  const [ADUserDNSearchFilter, setADUserDNSearchFilter] = useState<string>(\"\");\n  const [ADGroupSearchBaseDN, setADGroupSearchBaseDN] = useState<string>(\"\");\n  const [ADGroupSearchFilter, setADGroupSearchFilter] = useState<string>(\"\");\n  const [ADSkipTLS, setADSkipTLS] = useState<boolean>(false);\n  const [ADServerInsecure, setADServerInsecure] = useState<boolean>(false);\n  const [ADServerStartTLS, setADServerStartTLS] = useState<boolean>(false);\n  const [ADUserDNs, setADUserDNs] = useState<string[]>([\"\"]);\n  const [ADGroupDNs, setADGroupDNs] = useState<string[]>([\"\"]);\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let identityProviderValidation: IValidation[] = [];\n\n    if (idpSelection === \"OpenID\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: true,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(identityProviderValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    idpSelection,\n    openIDConfigurationURL,\n    openIDClientID,\n    openIDSecretID,\n    openIDClaimName,\n    ADURL,\n    ADLookupBindDN,\n  ]);\n\n  const getTenantIdentityProviderInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`\n      )\n      .then((res: ITenantIdentityProviderResponse) => {\n        if (res) {\n          if (res.oidc) {\n            setIdpSelection(\"OpenID\");\n            setOpenIDConfigurationURL(res.oidc.configuration_url);\n            setOpenIDClientID(res.oidc.client_id);\n            setOpenIDSecretID(res.oidc.secret_id);\n            setOpenIDCallbackURL(res.oidc.callback_url);\n            setOpenIDClaimName(res.oidc.claim_name);\n            setOpenIDScopes(res.oidc.scopes);\n          } else if (res.active_directory) {\n            setIdpSelection(\"AD\");\n            setADURL(res.active_directory.url);\n            setADLookupBindDN(res.active_directory.lookup_bind_dn);\n            setADLookupBindPassword(res.active_directory.lookup_bind_password);\n            setADUserDNSearchBaseDN(\n              res.active_directory.user_dn_search_base_dn\n            );\n            setADUserDNSearchFilter(res.active_directory.user_dn_search_filter);\n            setADGroupSearchBaseDN(res.active_directory.group_search_base_dn);\n            setADGroupSearchFilter(res.active_directory.group_search_filter);\n            setADSkipTLS(res.active_directory.skip_tls_verification);\n            setADServerInsecure(res.active_directory.server_insecure);\n            setADServerStartTLS(res.active_directory.server_start_tls);\n          }\n        }\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n      });\n  }, [tenant, dispatch]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantIdentityProviderInfo();\n    }\n  }, [tenant, getTenantIdentityProviderInfo]);\n\n  const updateTenantIdentityProvider = () => {\n    setIsSending(true);\n    let payload: ITenantIdentityProviderResponse = {};\n    switch (idpSelection) {\n      case \"AD\":\n        payload.active_directory = {\n          url: ADURL,\n          lookup_bind_dn: ADLookupBindDN,\n          lookup_bind_password: ADLookupBindPassword,\n          user_dn_search_base_dn: ADUserDNSearchBaseDN,\n          user_dn_search_filter: ADUserDNSearchFilter,\n          group_search_base_dn: ADGroupSearchBaseDN,\n          group_search_filter: ADGroupSearchFilter,\n          skip_tls_verification: ADSkipTLS,\n          server_insecure: ADServerInsecure,\n          server_start_tls: ADServerStartTLS,\n        };\n        break;\n      case \"OpenID\":\n        payload.oidc = {\n          configuration_url: openIDConfigurationURL,\n          client_id: openIDClientID,\n          secret_id: openIDSecretID,\n          callback_url: openIDCallbackURL,\n          claim_name: openIDClaimName,\n          scopes: openIDScopes,\n        };\n        break;\n      default:\n      // Built-in IDP will be used by default\n    }\n\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`,\n        payload\n      )\n      .then(() => {\n        setIsSending(false);\n        // Close confirmation modal\n        setDialogOpen(false);\n        getTenantIdentityProviderInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  const setAdministrators = () => {\n    setIsSending(true);\n    let payload: ITenantSetAdministratorsRequest = {};\n    switch (idpSelection) {\n      case \"AD\":\n        payload = {\n          user_dns: ADUserDNs.filter((user) => user.trim() !== \"\"),\n          group_dns: ADGroupDNs.filter((group) => group.trim() !== \"\"),\n        };\n        break;\n      default:\n      // Built-in IDP will be used by default\n    }\n\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/set-administrators`,\n        payload\n      )\n      .then(() => {\n        setIsSending(false);\n        setADGroupDNs([\"\"]);\n        setADUserDNs([\"\"]);\n        getTenantIdentityProviderInfo();\n        dispatch(setSnackBarMessage(`Administrators added successfully`));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <ConfirmDialog\n        title={\"Save and Restart\"}\n        confirmText={\"Restart\"}\n        cancelText=\"Cancel\"\n        titleIcon={<ConfirmModalIcon />}\n        isLoading={isSending}\n        onClose={() => setDialogOpen(false)}\n        isOpen={dialogOpen}\n        onConfirm={updateTenantIdentityProvider}\n        confirmationContent={\n          <DialogContentText>\n            Are you sure you want to save the changes and restart the service?\n          </DialogContentText>\n        }\n      />\n      {loadingTenant ? (\n        <div className={classes.loaderAlign}>\n          <Loader />\n        </div>\n      ) : (\n        <Fragment>\n          <Grid item xs={12}>\n            <h1 className={classes.sectionTitle}>Identity Provider</h1>\n            <FormHr />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            className={classes.protocolRadioOptions}\n            paddingBottom={1}\n          >\n            <RadioGroupSelector\n              currentSelection={idpSelection}\n              id=\"idp-options\"\n              name=\"idp-options\"\n              label=\"Protocol\"\n              onChange={(e) => {\n                setIdpSelection(e.target.value);\n              }}\n              selectorOptions={[\n                { label: <BuiltInLogoElement />, value: \"Built-in\" },\n                { label: <OIDCLogoElement />, value: \"OpenID\" },\n                { label: <LDAPLogoElement />, value: \"AD\" },\n              ]}\n            />\n          </Grid>\n\n          {idpSelection === \"OpenID\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_CONFIGURATION_URL\"\n                  name=\"openID_CONFIGURATION_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDConfigurationURL(e.target.value);\n                    cleanValidation(\"openID_CONFIGURATION_URL\");\n                  }}\n                  label=\"Configuration URL\"\n                  value={openIDConfigurationURL}\n                  placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n                  error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_clientID\"\n                  name=\"openID_clientID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClientID(e.target.value);\n                    cleanValidation(\"openID_clientID\");\n                  }}\n                  label=\"Client ID\"\n                  value={openIDClientID}\n                  error={validationErrors[\"openID_clientID\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type={showOIDCSecretID ? \"text\" : \"password\"}\n                  id=\"openID_secretID\"\n                  name=\"openID_secretID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDSecretID(e.target.value);\n                    cleanValidation(\"openID_secretID\");\n                  }}\n                  label=\"Secret ID\"\n                  value={openIDSecretID}\n                  error={validationErrors[\"openID_secretID\"] || \"\"}\n                  required\n                  overlayIcon={\n                    showOIDCSecretID ? (\n                      <VisibilityOffIcon />\n                    ) : (\n                      <RemoveRedEyeIcon />\n                    )\n                  }\n                  overlayAction={() => setShowOIDCSecretID(!showOIDCSecretID)}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_callbackURL\"\n                  name=\"openID_callbackURL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDCallbackURL(e.target.value);\n                    cleanValidation(\"openID_callbackURL\");\n                  }}\n                  label=\"Callback URL\"\n                  value={openIDCallbackURL}\n                  placeholder=\"https://your-console-endpoint:9443/oauth_callback\"\n                  error={validationErrors[\"openID_callbackURL\"] || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_claimName\"\n                  name=\"openID_claimName\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClaimName(e.target.value);\n                    cleanValidation(\"openID_claimName\");\n                  }}\n                  label=\"Claim Name\"\n                  value={openIDClaimName}\n                  error={validationErrors[\"openID_claimName\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_scopes\"\n                  name=\"openID_scopes\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDScopes(e.target.value);\n                    cleanValidation(\"openID_scopes\");\n                  }}\n                  label=\"Scopes\"\n                  value={openIDScopes}\n                />\n              </Grid>\n            </Fragment>\n          )}\n\n          {idpSelection === \"AD\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"AD_URL\"\n                  name=\"AD_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADURL(e.target.value);\n                    cleanValidation(\"AD_URL\");\n                  }}\n                  label=\"LDAP Server Address\"\n                  value={ADURL}\n                  placeholder=\"ldap-server:636\"\n                  error={validationErrors[\"AD_URL\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_skipTLS\"\n                  id=\"ad_skipTLS\"\n                  name=\"ad_skipTLS\"\n                  checked={ADSkipTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADSkipTLS(checked);\n                  }}\n                  label={\"Skip TLS Verification\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_serverInsecure\"\n                  id=\"ad_serverInsecure\"\n                  name=\"ad_serverInsecure\"\n                  checked={ADServerInsecure}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerInsecure(checked);\n                  }}\n                  label={\"Server Insecure\"}\n                />\n              </Grid>\n              {ADServerInsecure ? (\n                <Grid item xs={12}>\n                  <Typography\n                    className={classes.error}\n                    variant=\"caption\"\n                    display=\"block\"\n                    gutterBottom\n                  >\n                    Warning: All traffic with Active Directory will be\n                    unencrypted\n                  </Typography>\n                  <br />\n                </Grid>\n              ) : null}\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_serverStartTLS\"\n                  id=\"ad_serverStartTLS\"\n                  name=\"ad_serverStartTLS\"\n                  checked={ADServerStartTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerStartTLS(checked);\n                  }}\n                  label={\"Start TLS connection to AD/LDAP server\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_lookupBindDN\"\n                  name=\"ad_lookupBindDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindDN(e.target.value);\n                    cleanValidation(\"ad_lookupBindDN\");\n                  }}\n                  label=\"Lookup Bind DN\"\n                  value={ADLookupBindDN}\n                  placeholder=\"cn=admin,dc=min,dc=io\"\n                  error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type={showADLookupBindPassword ? \"text\" : \"password\"}\n                  id=\"ad_lookupBindPassword\"\n                  name=\"ad_lookupBindPassword\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindPassword(e.target.value);\n                  }}\n                  label=\"Lookup Bind Password\"\n                  value={ADLookupBindPassword}\n                  placeholder=\"admin\"\n                  overlayIcon={\n                    showADLookupBindPassword ? (\n                      <VisibilityOffIcon />\n                    ) : (\n                      <RemoveRedEyeIcon />\n                    )\n                  }\n                  overlayAction={() =>\n                    setShowADLookupBindPassword(!showADLookupBindPassword)\n                  }\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_userDNSearchBaseDN\"\n                  name=\"ad_userDNSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchBaseDN(e.target.value);\n                  }}\n                  label=\"User DN Search Base DN\"\n                  value={ADUserDNSearchBaseDN}\n                  placeholder=\"dc=min,dc=io\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_userDNSearchFilter\"\n                  name=\"ad_userDNSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchFilter(e.target.value);\n                  }}\n                  label=\"User DN Search Filter\"\n                  value={ADUserDNSearchFilter}\n                  placeholder=\"(sAMAcountName=%s)\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_groupSearchBaseDN\"\n                  name=\"ad_groupSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchBaseDN(e.target.value);\n                  }}\n                  label=\"Group Search Base DN\"\n                  value={ADGroupSearchBaseDN}\n                  placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_groupSearchFilter\"\n                  name=\"ad_groupSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchFilter(e.target.value);\n                  }}\n                  label=\"Group Search Filter\"\n                  value={ADGroupSearchFilter}\n                  placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n                />\n              </Grid>\n            </Fragment>\n          )}\n\n          <Grid item xs={12} className={classes.buttonContainer}>\n            <Button\n              id={\"save-idp\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              color=\"primary\"\n              disabled={!isFormValid || isSending}\n              onClick={() => setDialogOpen(true)}\n              label={\"Save\"}\n            />\n          </Grid>\n\n          {idpSelection === \"AD\" && (\n            <Fragment>\n              <SectionTitle>User & Group management</SectionTitle>\n              <br />\n              <fieldset className={classes.fieldGroup}>\n                <legend className={classes.descriptionText}>\n                  List of user DNs (Distinguished Names) to be added as Tenant\n                  Administrators\n                </legend>\n                <Grid item xs={12}>\n                  {ADUserDNs.map((_, index) => {\n                    return (\n                      <Fragment key={`identityField-${index.toString()}`}>\n                        <div className={classes.adUserDnRows}>\n                          <InputBoxWrapper\n                            id={`ad-userdn-${index.toString()}`}\n                            label={\"\"}\n                            placeholder=\"\"\n                            name={`ad-userdn-${index.toString()}`}\n                            value={ADUserDNs[index]}\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) => {\n                              setADUserDNs(\n                                ADUserDNs.map((group, i) =>\n                                  i === index ? e.target.value : group\n                                )\n                              );\n                            }}\n                            index={index}\n                            key={`csv-ad-userdn-${index.toString()}`}\n                            error={\n                              validationErrors[\n                                `ad-userdn-${index.toString()}`\n                              ] || \"\"\n                            }\n                          />\n                          <div className={classes.buttonTray}>\n                            <Tooltip title=\"Add User\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  setADUserDNs([...ADUserDNs, \"\"]);\n                                }}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Remove\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                style={{ marginLeft: 16 }}\n                                onClick={() => {\n                                  if (ADUserDNs.length > 1) {\n                                    setADUserDNs(\n                                      ADUserDNs.filter((_, i) => i !== index)\n                                    );\n                                  }\n                                }}\n                              >\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </div>\n                        </div>\n                      </Fragment>\n                    );\n                  })}\n                </Grid>\n              </fieldset>\n              <fieldset className={classes.fieldGroup}>\n                <legend className={classes.descriptionText}>\n                  List of group DNs (Distinguished Names) to be added as Tenant\n                  Administrators\n                </legend>\n                <Grid item xs={12}>\n                  {ADGroupDNs.map((_, index) => {\n                    return (\n                      <Fragment key={`identityField-${index.toString()}`}>\n                        <div className={classes.adUserDnRows}>\n                          <InputBoxWrapper\n                            id={`ad-groupdn-${index.toString()}`}\n                            label={\"\"}\n                            placeholder=\"\"\n                            name={`ad-groupdn-${index.toString()}`}\n                            value={ADGroupDNs[index]}\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) => {\n                              setADGroupDNs(\n                                ADGroupDNs.map((group, i) =>\n                                  i === index ? e.target.value : group\n                                )\n                              );\n                            }}\n                            index={index}\n                            key={`csv-ad-groupdn-${index.toString()}`}\n                            error={\n                              validationErrors[\n                                `ad-groupdn-${index.toString()}`\n                              ] || \"\"\n                            }\n                          />\n                          <div className={classes.buttonTray}>\n                            <Tooltip title=\"Add Group\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  setADGroupDNs([...ADGroupDNs, \"\"]);\n                                }}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Remove\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                style={{ marginLeft: 16 }}\n                                onClick={() => {\n                                  if (ADGroupDNs.length > 1) {\n                                    setADGroupDNs(\n                                      ADGroupDNs.filter((_, i) => i !== index)\n                                    );\n                                  }\n                                }}\n                              >\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </div>\n                        </div>\n                      </Fragment>\n                    );\n                  })}\n                </Grid>\n              </fieldset>\n              <br />\n              <Grid item xs={12} className={classes.buttonContainer}>\n                <Button\n                  id={\"add-additional-dns\"}\n                  type=\"submit\"\n                  variant=\"callAction\"\n                  disabled={!isFormValid || isSending}\n                  onClick={() => setAdministrators()}\n                  label={\"Add additional DNs\"}\n                />\n              </Grid>\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.loadingTenant,\n  selectedTenant: state.tenants.currentTenant,\n  tenant: state.tenants.tenantInfo,\n});\n\nconst connector = connect(mapState, null);\n\nexport default withStyles(styles)(connector(TenantIdentityProvider));\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;"],"names":["OIDCLogoElement","_jsxs","Grid","container","columnGap","children","_jsx","OIDCIcon","width","height","item","LDAPLogoElement","LDAPIcon","BuiltInLogoElement","UsersIcon","FormHr","connector","connect","state","loadingTenant","tenants","selectedTenant","currentTenant","tenant","tenantInfo","withStyles","theme","createStyles","_objectSpread","adUserDnRows","display","marginBottom","buttonTray","marginLeft","background","tenantDetailsStyles","spacingUtils","loaderAlign","textAlign","containerForHeader","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","_ref","classes","dispatch","useAppDispatch","useSelector","_useState","useState","_useState2","_slicedToArray","isSending","setIsSending","_useState3","_useState4","dialogOpen","setDialogOpen","_useState5","_useState6","idpSelection","setIdpSelection","_useState7","_useState8","openIDConfigurationURL","setOpenIDConfigurationURL","_useState9","_useState10","openIDClientID","setOpenIDClientID","_useState11","_useState12","openIDSecretID","setOpenIDSecretID","_useState13","_useState14","showOIDCSecretID","setShowOIDCSecretID","_useState15","_useState16","openIDCallbackURL","setOpenIDCallbackURL","_useState17","_useState18","openIDClaimName","setOpenIDClaimName","_useState19","_useState20","openIDScopes","setOpenIDScopes","_useState21","_useState22","ADURL","setADURL","_useState23","_useState24","ADLookupBindDN","setADLookupBindDN","_useState25","_useState26","ADLookupBindPassword","setADLookupBindPassword","_useState27","_useState28","showADLookupBindPassword","setShowADLookupBindPassword","_useState29","_useState30","ADUserDNSearchBaseDN","setADUserDNSearchBaseDN","_useState31","_useState32","ADUserDNSearchFilter","setADUserDNSearchFilter","_useState33","_useState34","ADGroupSearchBaseDN","setADGroupSearchBaseDN","_useState35","_useState36","ADGroupSearchFilter","setADGroupSearchFilter","_useState37","_useState38","ADSkipTLS","setADSkipTLS","_useState39","_useState40","ADServerInsecure","setADServerInsecure","_useState41","_useState42","ADServerStartTLS","setADServerStartTLS","_useState43","_useState44","ADUserDNs","setADUserDNs","_useState45","_useState46","ADGroupDNs","setADGroupDNs","_useState47","_useState48","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","_useState49","_useState50","isFormValid","setIsFormValid","useEffect","identityProviderValidation","concat","_toConsumableArray","fieldKey","required","value","commonVal","commonFormValidation","Object","keys","length","getTenantIdentityProviderInfo","useCallback","api","invoke","namespace","name","then","res","oidc","configuration_url","client_id","secret_id","callback_url","claim_name","scopes","active_directory","url","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter","skip_tls_verification","server_insecure","server_start_tls","catch","err","setErrorSnackMessage","React","ConfirmDialog","title","confirmText","cancelText","titleIcon","ConfirmModalIcon","isLoading","onClose","isOpen","onConfirm","payload","confirmationContent","DialogContentText","className","Loader","Fragment","xs","sectionTitle","protocolRadioOptions","paddingBottom","RadioGroupSelector","currentSelection","id","label","onChange","e","target","selectorOptions","formFieldRow","InputBoxWrapper","placeholder","error","type","overlayIcon","VisibilityOffIcon","RemoveRedEyeIcon","overlayAction","FormSwitchWrapper","checked","Typography","variant","gutterBottom","buttonContainer","Button","color","disabled","onClick","SectionTitle","fieldGroup","descriptionText","map","_","index","toString","group","i","Tooltip","IconButton","size","AddIcon","style","filter","DeleteIcon","user_dns","user","trim","group_dns","setSnackBarMessage","setAdministrators","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}