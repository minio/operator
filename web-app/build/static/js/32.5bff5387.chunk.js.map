{"version":3,"file":"static/js/32.5bff5387.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/common/styleLibrary.ts","screens/Console/Common/TLSCertificate/TLSCertificate.tsx","screens/Console/Tenants/TenantDetails/KMSPolicyInfo.tsx","screens/Console/Tenants/TenantDetails/TenantEncryption.tsx"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// This object contains variables that will be used across form components.\n\nexport const actionsTray = {\n  label: {\n    color: \"#07193E\",\n    fontSize: 13,\n    alignSelf: \"center\" as const,\n    whiteSpace: \"nowrap\" as const,\n    \"&:not(:first-of-type)\": {\n      marginLeft: 10,\n    },\n  },\n  actionsTray: {\n    display: \"flex\" as const,\n    justifyContent: \"space-between\" as const,\n    marginBottom: \"1rem\",\n    alignItems: \"center\",\n    \"& button\": {\n      flexGrow: 0,\n      marginLeft: 8,\n    },\n  },\n};\n\nexport const modalStyleUtils: any = {\n  modalButtonBar: {\n    marginTop: 15,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n\n    \"& button\": {\n      marginRight: 10,\n    },\n    \"& button:last-child\": {\n      marginRight: 0,\n    },\n  },\n  modalFormScrollable: {\n    maxHeight: \"calc(100vh - 300px)\",\n    overflowY: \"auto\",\n    paddingTop: 10,\n  },\n};\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport {\n  AlertCloseIcon,\n  Box,\n  CertificateIcon,\n  IconButton,\n  TimeIcon,\n  LanguageIcon,\n  EventBusyIcon,\n} from \"mds\";\nimport { DateTime, Duration } from \"luxon\";\nimport styled from \"styled-components\";\nimport get from \"lodash/get\";\nimport { ICertificateInfo } from \"../../Tenants/types\";\n\nconst CertificateContainer = styled.div(({ theme }) => ({\n  position: \"relative\",\n  margin: 0,\n  userSelect: \"none\",\n  appearance: \"none\",\n  maxWidth: \"100%\",\n  fontFamily: \"'Inter', sans-serif\",\n  fontSize: 13,\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  gap: 6,\n  border: `1px solid ${get(theme, \"borderColor\", \"#E2E2E2\")}`,\n  borderRadius: 3,\n  padding: \"5px 10px\",\n  \"& .certificateName\": {\n    display: \"flex\",\n    alignItems: \"center\",\n    gap: 5,\n    fontWeight: \"bold\",\n    color: get(theme, \"signalColors.main\", \"#07193E\"),\n  },\n  \"& .deleteTagButton\": {\n    backgroundColor: \"transparent\",\n    border: 0,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 0,\n    cursor: \"pointer\",\n    opacity: 0.6,\n    \"&:hover\": {\n      opacity: 1,\n    },\n    \"& svg\": {\n      fill: get(theme, `tag.grey.background`, \"#07193E\"),\n      width: 10,\n      height: 10,\n      minWidth: 10,\n      minHeight: 10,\n    },\n  },\n  \"& .certificateContainer\": {\n    margin: \"5px 10px\",\n  },\n  \"& .certificateExpiry\": {\n    color: get(theme, \"secondaryText\", \"#5B5C5C\"),\n    display: \"flex\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n    marginBottom: 5,\n    \"& .label\": {\n      fontWeight: \"bold\",\n    },\n  },\n  \"& .certificateDomains\": {\n    color: get(theme, \"secondaryText\", \"#5B5C5C\"),\n    \"& .label\": {\n      fontWeight: \"bold\",\n    },\n  },\n  \"& .certificatesList\": {\n    border: `1px solid ${get(theme, \"borderColor\", \"#E2E2E2\")}`,\n    borderRadius: 4,\n    color: get(theme, \"secondaryText\", \"#5B5C5C\"),\n    textTransform: \"lowercase\",\n    overflowY: \"scroll\",\n    maxHeight: 145,\n    marginTop: 3,\n    marginBottom: 5,\n    padding: 0,\n    \"& li\": {\n      listStyle: \"none\",\n      padding: \"5px 10px\",\n      margin: 0,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"&:before\": {\n        content: \"' '\",\n      },\n    },\n  },\n  \"& .certificatesListItem\": {\n    padding: \"0px 16px\",\n    borderBottom: `1px solid ${get(theme, \"borderColor\", \"#E2E2E2\")}`,\n    \"& div\": {\n      minWidth: 0,\n    },\n    \"& svg\": {\n      fontSize: 12,\n      marginRight: 10,\n      opacity: 0.5,\n    },\n    \"& span\": {\n      fontSize: 12,\n    },\n  },\n  \"& .certificateExpiring\": {\n    color: get(theme, \"signalColors.warning\", \"#FFBD62\"),\n    \"& .label\": {\n      fontWeight: \"bold\",\n    },\n  },\n  \"& .certificateExpired\": {\n    color: get(theme, \"signalColors.danger\", \"#C51B3F\"),\n    \"& .label\": {\n      fontWeight: \"bold\",\n    },\n  },\n  \"& .closeIcon\": {\n    transform: \"scale(0.8)\",\n  },\n}));\n\ninterface ITLSCertificate {\n  certificateInfo: ICertificateInfo;\n  onDelete: any;\n}\n\nconst TLSCertificate = ({\n  certificateInfo,\n  onDelete = () => {},\n}: ITLSCertificate) => {\n  const certificates = certificateInfo.domains || [];\n\n  const expiry = DateTime.fromISO(certificateInfo.expiry);\n  const now = DateTime.utc();\n  // Expose error on Tenant if certificate is near expiration or expired\n  let daysToExpiry: number = 0;\n  let daysToExpiryHuman: string = \"\";\n  let certificateExpiration: string = \"\";\n  if (expiry) {\n    let durationToExpiry = expiry.diff(now);\n    daysToExpiry = durationToExpiry.as(\"days\");\n    daysToExpiryHuman = durationToExpiry\n      .minus(Duration.fromObject({ days: 1 }))\n      .shiftTo(\"days\")\n      .toHuman({ listStyle: \"long\", maximumFractionDigits: 0 });\n    if (daysToExpiry >= 10 && daysToExpiry < 30) {\n      certificateExpiration = \"certificateExpiring\";\n    }\n    if (daysToExpiry < 10) {\n      certificateExpiration = \"certificateExpired\";\n      if (daysToExpiry < 2) {\n        daysToExpiryHuman = durationToExpiry\n          .minus(Duration.fromObject({ minutes: 1 }))\n          .shiftTo(\"hours\", \"minutes\")\n          .toHuman({ listStyle: \"long\", maximumFractionDigits: 0 });\n        if (durationToExpiry.as(\"minutes\") <= 1) {\n          daysToExpiryHuman = \"EXPIRED\";\n        }\n      }\n    }\n  }\n\n  return (\n    <CertificateContainer>\n      <Box>\n        <Box className={\"certificateName\"}>\n          <CertificateIcon />\n          <span>{certificateInfo.name}</span>\n        </Box>\n        <Box className={\"certificateContainer\"}>\n          <Box className={\"certificateExpiry\"}>\n            <EventBusyIcon color=\"inherit\" fontSize=\"small\" />\n            &nbsp;\n            <span className={\"label\"}>Expiry:&nbsp;</span>\n            <span>{expiry.toFormat(\"yyyy/MM/dd\")}</span>\n          </Box>\n          <Box className={\"certificateExpiry\"}>\n            <TimeIcon />\n            &nbsp;\n            <span className={\"label\"}>Expires in:&nbsp;</span>\n            <span className={certificateExpiration}>{daysToExpiryHuman}</span>\n          </Box>\n          <hr style={{ marginBottom: 12 }} />\n          <Box className={\"certificateDomains\"}>\n            <span className=\"label\">{`${certificates.length} Domain (s):`}</span>\n          </Box>\n          <ul className={\"certificatesList\"}>\n            {certificates.map((dom, index) => (\n              <li key={`${dom}-${index}`} className={\"certificatesListItem\"}>\n                <LanguageIcon />\n                <span>{dom}</span>\n              </li>\n            ))}\n          </ul>\n        </Box>\n      </Box>\n      <IconButton size={\"small\"} onClick={onDelete} className={\"closeIcon\"}>\n        <AlertCloseIcon />\n      </IconButton>\n    </CertificateContainer>\n  );\n};\n\nexport default TLSCertificate;\n","// This file is part of MinIO Operator\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { Box, Grid } from \"mds\";\n\nconst getPolicyData = (policies: Record<string, any> = {}) => {\n  const policyNames = Object.keys(policies);\n  return policyNames.map((polName: string) => {\n    const policyConfig = policies[polName] || {};\n    return {\n      name: polName || \"\",\n      identities: policyConfig.identities || [],\n      // v1 specific\n      paths: policyConfig.paths || [],\n      // v2 specific\n      allow: policyConfig.allow || [],\n      deny: policyConfig.deny || [],\n    };\n  });\n};\n\nconst PolicyItem = ({\n  items = [],\n  title = \"\",\n}: {\n  items: string[];\n  title: string;\n}) => {\n  return items?.length ? (\n    <Fragment>\n      <div\n        style={{\n          fontSize: \"0.83em\",\n          fontWeight: \"bold\",\n        }}\n      >\n        {title}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          gap: \"2px\",\n          flexFlow: \"column\",\n          marginLeft: \"8px\",\n        }}\n      >\n        {items.map((iTxt: string) => {\n          return <span style={{ fontSize: \"12px\" }}>- {iTxt}</span>;\n        })}\n      </div>\n    </Fragment>\n  ) : null;\n};\n\nconst KMSPolicyInfo = ({\n  policies = {},\n}: {\n  policies: Record<string, any>;\n}) => {\n  const fmtPolicies = getPolicyData(policies);\n  return fmtPolicies.length ? (\n    <Grid xs={12} sx={{ marginBottom: 5 }}>\n      <h4>Policies</h4>\n      <Box\n        withBorders\n        sx={{\n          maxHeight: \"200px\",\n          overflow: \"auto\",\n          padding: 0,\n        }}\n      >\n        {fmtPolicies.map((pConf: Record<string, any>) => {\n          return (\n            <Box\n              withBorders\n              sx={{\n                display: \"flex\",\n                flexFlow: \"column\",\n                gap: \"2px\",\n                borderLeft: 0,\n                borderRight: 0,\n                borderTop: 0,\n              }}\n            >\n              <div>\n                <b\n                  style={{\n                    fontSize: \"0.83em\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Policy Name:\n                </b>{\" \"}\n                {pConf.name}\n              </div>\n              <PolicyItem title={\"Allow\"} items={pConf?.allow} />\n              <PolicyItem title={\"Deny\"} items={pConf?.deny} />\n              <PolicyItem title={\"Paths\"} items={pConf?.paths} />\n              <PolicyItem title={\"Identities\"} items={pConf?.identities} />\n            </Box>\n          );\n        })}\n      </Box>\n    </Grid>\n  ) : null;\n};\n\nexport default KMSPolicyInfo;\n","// This file is part of MinIO Operator\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  CodeEditor,\n  FileSelector,\n  FormLayout,\n  Grid,\n  InformativeMessage,\n  InputBox,\n  RadioGroup,\n  SectionTitle,\n  Switch,\n  Tabs,\n} from \"mds\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { useSelector } from \"react-redux\";\nimport { ICertificateInfo, ITenantEncryptionResponse } from \"../types\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { KeyPair } from \"../ListTenants/utils\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { SecurityContext } from \"../../../../api/operatorApi\";\nimport api from \"../../../../common/api\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport TLSCertificate from \"../../Common/TLSCertificate/TLSCertificate\";\nimport KMSPolicyInfo from \"./KMSPolicyInfo\";\n\nconst TenantEncryption = () => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const [editRawConfiguration, setEditRawConfiguration] =\n    useState<string>(\"options\");\n  const [encryptionRawConfiguration, setEncryptionRawConfiguration] =\n    useState<string>(\"\");\n  const [encryptionEnabled, setEncryptionEnabled] = useState<boolean>(false);\n  const [encryptionType, setEncryptionType] = useState<string>(\"vault\");\n  const [replicas, setReplicas] = useState<string>(\"1\");\n  const [image, setImage] = useState<string>(\"\");\n  const [refreshEncryptionInfo, setRefreshEncryptionInfo] =\n    useState<boolean>(false);\n  const [securityContext, setSecurityContext] = useState<SecurityContext>({\n    fsGroup: \"1000\",\n    fsGroupChangePolicy: \"Always\",\n    runAsGroup: \"1000\",\n    runAsNonRoot: true,\n    runAsUser: \"1000\",\n  });\n  const [policies, setPolicies] = useState<any>([]);\n  const [vaultConfiguration, setVaultConfiguration] = useState<any>(null);\n  const [awsConfiguration, setAWSConfiguration] = useState<any>(null);\n  const [gemaltoConfiguration, setGemaltoConfiguration] = useState<any>(null);\n  const [azureConfiguration, setAzureConfiguration] = useState<any>(null);\n  const [gcpConfiguration, setGCPConfiguration] = useState<any>(null);\n  const [enabledCustomCertificates, setEnabledCustomCertificates] =\n    useState<boolean>(false);\n  const [updatingEncryption, setUpdatingEncryption] = useState<boolean>(false);\n  const [kesServerTLSCertificateSecret, setKesServerTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [minioMTLSCertificateSecret, setMinioMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [minioMTLSCertificate, setMinioMTLSCertificate] =\n    useState<KeyPair | null>(null);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [kmsMTLSCertificateSecret, setKmsMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [kmsCACertificateSecret, setKMSCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [kmsMTLSCertificate, setKmsMTLSCertificate] = useState<KeyPair | null>(\n    null,\n  );\n  const [kesServerCertificate, setKESServerCertificate] =\n    useState<KeyPair | null>(null);\n  const [kmsCACertificate, setKmsCACertificate] = useState<KeyPair | null>(\n    null,\n  );\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [confirmOpen, setConfirmOpen] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (encryptionEnabled) {\n      encryptionValidation = [\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: securityContext.runAsUser,\n          customValidation:\n            securityContext.runAsUser === \"\" ||\n            parseInt(securityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: securityContext.runAsGroup,\n          customValidation:\n            securityContext.runAsGroup === \"\" ||\n            parseInt(securityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: securityContext.fsGroup!,\n          customValidation:\n            securityContext.fsGroup === \"\" ||\n            parseInt(securityContext.fsGroup!) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enabledCustomCertificates) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: false,\n            value: kesServerCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: false,\n            value: kesServerCertificate?.encoded_cert || \"\",\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: false,\n            value: minioMTLSCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: false,\n            value: minioMTLSCertificate?.encoded_cert || \"\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultConfiguration?.endpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultConfiguration?.approle?.id,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultConfiguration?.approle?.secret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultConfiguration?.status?.ping,\n            customValidation: parseInt(vaultConfiguration?.status?.ping) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultConfiguration?.approle?.retry,\n            customValidation: parseInt(vaultConfiguration?.approle?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.endpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.region,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.accesskey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.secretkey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.endpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.token,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.domain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoConfiguration?.keysecure?.credentials?.retry,\n            customValidation:\n              parseInt(gemaltoConfiguration?.keysecure?.credentials?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureConfiguration?.keyvault?.endpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.tenant_id,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_id,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_secret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enabledCustomCertificates,\n    encryptionEnabled,\n    encryptionType,\n    kesServerCertificate?.encoded_key,\n    kesServerCertificate?.encoded_cert,\n    minioMTLSCertificate?.encoded_key,\n    minioMTLSCertificate?.encoded_cert,\n    kmsMTLSCertificate?.encoded_key,\n    kmsMTLSCertificate?.encoded_cert,\n    kmsCACertificate?.encoded_key,\n    kmsCACertificate?.encoded_cert,\n    securityContext,\n    vaultConfiguration,\n    awsConfiguration,\n    gemaltoConfiguration,\n    azureConfiguration,\n    gcpConfiguration,\n    replicas,\n  ]);\n\n  const fetchEncryptionInfo = () => {\n    if (!refreshEncryptionInfo && tenant?.namespace && tenant?.name) {\n      setRefreshEncryptionInfo(true);\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n        )\n        .then((resp: ITenantEncryptionResponse) => {\n          setEncryptionRawConfiguration(resp.raw);\n          if (resp.policies) {\n            setPolicies(resp.policies);\n          }\n          if (resp.vault) {\n            setEncryptionType(\"vault\");\n            setVaultConfiguration(resp.vault);\n          } else if (resp.aws) {\n            setEncryptionType(\"aws\");\n            setAWSConfiguration(resp.aws);\n          } else if (resp.gemalto) {\n            setEncryptionType(\"gemalto\");\n            setGemaltoConfiguration(resp.gemalto);\n          } else if (resp.gcp) {\n            setEncryptionType(\"gcp\");\n            setGCPConfiguration(resp.gcp);\n          } else if (resp.azure) {\n            setEncryptionType(\"azure\");\n            setAzureConfiguration(resp.azure);\n          }\n\n          setEncryptionEnabled(true);\n          setImage(resp.image);\n          setReplicas(resp.replicas);\n          if (resp.securityContext) {\n            setSecurityContext(resp.securityContext);\n          }\n          if (resp.server_tls || resp.minio_mtls || resp.kms_mtls) {\n            setEnabledCustomCertificates(true);\n          }\n          if (resp.server_tls) {\n            setKesServerTLSCertificateSecret(resp.server_tls);\n          }\n          if (resp.minio_mtls) {\n            setMinioMTLSCertificateSecret(resp.minio_mtls);\n          }\n          if (resp.kms_mtls) {\n            setKmsMTLSCertificateSecret(resp.kms_mtls.crt);\n            setKMSCACertificateSecret(resp.kms_mtls.ca);\n          }\n          setRefreshEncryptionInfo(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          console.error(err);\n          setRefreshEncryptionInfo(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    fetchEncryptionInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tenant]);\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n    if (certificateInfo.name === kesServerTLSCertificateSecret?.name) {\n      setKesServerTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === minioMTLSCertificateSecret?.name) {\n      setMinioMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === kmsMTLSCertificateSecret?.name) {\n      setKmsMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === kmsCACertificateSecret?.name) {\n      setKMSCACertificateSecret(null);\n    }\n  };\n\n  const updateEncryptionConfiguration = () => {\n    if (encryptionEnabled) {\n      let insertEncrypt = {};\n      switch (encryptionType) {\n        case \"gemalto\":\n          insertEncrypt = {\n            gemalto: {\n              keysecure: {\n                endpoint: gemaltoConfiguration?.keysecure?.endpoint || \"\",\n                credentials: {\n                  token:\n                    gemaltoConfiguration?.keysecure?.credentials?.token || \"\",\n                  domain:\n                    gemaltoConfiguration?.keysecure?.credentials?.domain || \"\",\n                  retry: parseInt(\n                    gemaltoConfiguration?.keysecure?.credentials?.retry,\n                  ),\n                },\n              },\n            },\n          };\n          break;\n        case \"aws\":\n          insertEncrypt = {\n            aws: {\n              secretsmanager: {\n                endpoint: awsConfiguration?.secretsmanager?.endpoint || \"\",\n                region: awsConfiguration?.secretsmanager?.region || \"\",\n                kmskey: awsConfiguration?.secretsmanager?.kmskey || \"\",\n                credentials: {\n                  accesskey:\n                    awsConfiguration?.secretsmanager?.credentials?.accesskey ||\n                    \"\",\n                  secretkey:\n                    awsConfiguration?.secretsmanager?.credentials?.secretkey ||\n                    \"\",\n                  token:\n                    awsConfiguration?.secretsmanager?.credentials?.token || \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"azure\":\n          insertEncrypt = {\n            azure: {\n              keyvault: {\n                endpoint: azureConfiguration?.keyvault?.endpoint || \"\",\n                credentials: {\n                  tenant_id:\n                    azureConfiguration?.keyvault?.credentials?.tenant_id || \"\",\n                  client_id:\n                    azureConfiguration?.keyvault?.credentials?.client_id || \"\",\n                  client_secret:\n                    azureConfiguration?.keyvault?.credentials?.client_secret ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"gcp\":\n          insertEncrypt = {\n            gcp: {\n              secretmanager: {\n                project_id: gcpConfiguration?.secretmanager?.project_id || \"\",\n                endpoint: gcpConfiguration?.secretmanager?.endpoint || \"\",\n                credentials: {\n                  client_email:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.client_email || \"\",\n                  client_id:\n                    gcpConfiguration?.secretmanager?.credentials?.client_id ||\n                    \"\",\n                  private_key_id:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.private_key_id || \"\",\n                  private_key:\n                    gcpConfiguration?.secretmanager?.credentials?.private_key ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"vault\":\n          insertEncrypt = {\n            vault: {\n              endpoint: vaultConfiguration?.endpoint || \"\",\n              engine: vaultConfiguration?.engine || \"\",\n              namespace: vaultConfiguration?.namespace || \"\",\n              prefix: vaultConfiguration?.prefix || \"\",\n              approle: {\n                engine: vaultConfiguration?.approle?.engine || \"\",\n                id: vaultConfiguration?.approle?.id || \"\",\n                secret: vaultConfiguration?.approle?.secret || \"\",\n                retry: parseInt(vaultConfiguration?.approle?.retry),\n              },\n              status: {\n                ping: parseInt(vaultConfiguration?.status?.ping),\n              },\n            },\n          };\n          break;\n      }\n\n      let encryptionServerKeyPair: any = {};\n      let encryptionClientKeyPair: any = {};\n      let encryptionKMSCertificates: any = {};\n\n      // MinIO -> KES (mTLS certificates)\n      if (\n        minioMTLSCertificate?.encoded_key &&\n        minioMTLSCertificate?.encoded_cert\n      ) {\n        encryptionClientKeyPair = {\n          minio_mtls: {\n            key: minioMTLSCertificate?.encoded_key,\n            crt: minioMTLSCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      // KES server certificates\n      if (\n        kesServerCertificate?.encoded_key &&\n        kesServerCertificate?.encoded_cert\n      ) {\n        encryptionServerKeyPair = {\n          server_tls: {\n            key: kesServerCertificate?.encoded_key,\n            crt: kesServerCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      // KES -> KMS (mTLS certificates)\n      let kmsMTLSKeyPair = null;\n      let kmsCAInsert = null;\n      if (kmsMTLSCertificate?.encoded_key && kmsMTLSCertificate?.encoded_cert) {\n        kmsMTLSKeyPair = {\n          key: kmsMTLSCertificate?.encoded_key,\n          crt: kmsMTLSCertificate?.encoded_cert,\n        };\n      }\n      if (kmsCACertificate?.encoded_cert) {\n        kmsCAInsert = {\n          ca: kmsCACertificate?.encoded_cert,\n        };\n      }\n      if (kmsMTLSKeyPair || kmsCAInsert) {\n        encryptionKMSCertificates = {\n          kms_mtls: {\n            ...kmsMTLSKeyPair,\n            ...kmsCAInsert,\n          },\n        };\n      }\n\n      const dataSend = {\n        raw:\n          editRawConfiguration === \"raw-edit\" ? encryptionRawConfiguration : \"\",\n        secretsToBeDeleted: certificatesToBeRemoved || [],\n        replicas: replicas,\n        securityContext: securityContext,\n        image: image,\n        ...encryptionClientKeyPair,\n        ...encryptionServerKeyPair,\n        ...encryptionKMSCertificates,\n        ...insertEncrypt,\n      };\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"PUT\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            dataSend,\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      }\n    } else {\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"DELETE\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            {},\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {confirmOpen && (\n        <ConfirmDialog\n          isOpen={confirmOpen}\n          title={\n            encryptionEnabled\n              ? \"Enable encryption at rest for tenant?\"\n              : \"Disable encryption at rest for tenant?\"\n          }\n          confirmText={encryptionEnabled ? \"Enable\" : \"Disable\"}\n          cancelText=\"Cancel\"\n          onClose={() => setConfirmOpen(false)}\n          onConfirm={updateEncryptionConfiguration}\n          confirmationContent={\n            <Fragment>\n              {encryptionEnabled\n                ? \"Data will be encrypted using and external KMS\"\n                : \"Current encrypted information will not be accessible\"}\n              {encryptionEnabled && (\n                <InformativeMessage\n                  title={\"Warning\"}\n                  message={\n                    \"The content of the KES config secret will be overwritten.\"\n                  }\n                  variant={\"warning\"}\n                  sx={{ margin: \"15px 0\" }}\n                />\n              )}\n            </Fragment>\n          }\n        />\n      )}\n      <FormLayout containerPadding={false} withBorders={false}>\n        <Grid container>\n          <Grid item xs>\n            <SectionTitle\n              separator\n              actions={\n                <Fragment>\n                  <Switch\n                    label={\"\"}\n                    indicatorLabels={[\"Enabled\", \"Disabled\"]}\n                    checked={encryptionEnabled}\n                    value={\"tenant_encryption\"}\n                    id=\"tenant-encryption\"\n                    name=\"tenant-encryption\"\n                    onChange={() => {\n                      setEncryptionEnabled(!encryptionEnabled);\n                    }}\n                    description=\"\"\n                  />\n                </Fragment>\n              }\n            >\n              Encryption\n            </SectionTitle>\n          </Grid>\n          {encryptionEnabled && (\n            <Fragment>\n              <Grid item xs={12}>\n                <Tabs\n                  options={[\n                    {\n                      tabConfig: { label: \"Options\", id: \"options\" },\n                      content: (\n                        <Fragment>\n                          <KMSPolicyInfo policies={policies} />\n                          <RadioGroup\n                            currentValue={encryptionType}\n                            id=\"encryptionType\"\n                            name=\"encryptionType\"\n                            label=\"KMS\"\n                            onChange={(e) => {\n                              setEncryptionType(e.target.value);\n                            }}\n                            selectorOptions={[\n                              { label: \"Vault\", value: \"vault\" },\n                              { label: \"AWS\", value: \"aws\" },\n                              { label: \"Gemalto\", value: \"gemalto\" },\n                              { label: \"GCP\", value: \"gcp\" },\n                              { label: \"Azure\", value: \"azure\" },\n                            ]}\n                          />\n\n                          {encryptionType === \"vault\" && (\n                            <Fragment>\n                              <InputBox\n                                id=\"vault_endpoint\"\n                                name=\"vault_endpoint\"\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>,\n                                ) =>\n                                  setVaultConfiguration({\n                                    ...vaultConfiguration,\n                                    endpoint: e.target.value,\n                                  })\n                                }\n                                label=\"Endpoint\"\n                                tooltip=\"Endpoint is the Hashicorp Vault endpoint\"\n                                value={vaultConfiguration?.endpoint || \"\"}\n                                error={validationErrors[\"vault_ping\"] || \"\"}\n                                required\n                              />\n                              <InputBox\n                                id=\"vault_engine\"\n                                name=\"vault_engine\"\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>,\n                                ) =>\n                                  setVaultConfiguration({\n                                    ...vaultConfiguration,\n                                    engine: e.target.value,\n                                  })\n                                }\n                                label=\"Engine\"\n                                tooltip=\"Engine is the Hashicorp Vault K/V engine path. If empty, defaults to 'kv'\"\n                                value={vaultConfiguration?.engine || \"\"}\n                              />\n                              <InputBox\n                                id=\"vault_namespace\"\n                                name=\"vault_namespace\"\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>,\n                                ) =>\n                                  setVaultConfiguration({\n                                    ...vaultConfiguration,\n                                    namespace: e.target.value,\n                                  })\n                                }\n                                label=\"Namespace\"\n                                tooltip=\"Namespace is an optional Hashicorp Vault namespace. An empty namespace means no particular namespace is used.\"\n                                value={vaultConfiguration?.namespace || \"\"}\n                              />\n                              <InputBox\n                                id=\"vault_prefix\"\n                                name=\"vault_prefix\"\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>,\n                                ) =>\n                                  setVaultConfiguration({\n                                    ...vaultConfiguration,\n                                    prefix: e.target.value,\n                                  })\n                                }\n                                label=\"Prefix\"\n                                tooltip=\"Prefix is an optional prefix / directory within the K/V engine. If empty, keys will be stored at the K/V engine top level\"\n                                value={vaultConfiguration?.prefix || \"\"}\n                              />\n                              <SectionTitle>App Role</SectionTitle>\n                              <fieldset className={\"inputItem\"}>\n                                <legend>App Role</legend>\n                                <InputBox\n                                  id=\"vault_approle_engine\"\n                                  name=\"vault_approle_engine\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setVaultConfiguration({\n                                      ...vaultConfiguration,\n                                      approle: {\n                                        ...vaultConfiguration?.approle,\n                                        engine: e.target.value,\n                                      },\n                                    })\n                                  }\n                                  label=\"Engine\"\n                                  tooltip=\"AppRoleEngine is the AppRole authentication engine path. If empty, defaults to 'approle'\"\n                                  value={\n                                    vaultConfiguration?.approle?.engine || \"\"\n                                  }\n                                />\n                                <InputBox\n                                  type={\"password\"}\n                                  id=\"vault_id\"\n                                  name=\"vault_id\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setVaultConfiguration({\n                                      ...vaultConfiguration,\n                                      approle: {\n                                        ...vaultConfiguration?.approle,\n                                        id: e.target.value,\n                                      },\n                                    })\n                                  }\n                                  label=\"AppRole ID\"\n                                  tooltip=\"AppRoleSecret is the AppRole access secret for authenticating to Hashicorp Vault via the AppRole method\"\n                                  value={vaultConfiguration?.approle?.id || \"\"}\n                                  required\n                                  error={validationErrors[\"vault_id\"] || \"\"}\n                                />\n                                <InputBox\n                                  type={\"password\"}\n                                  id=\"vault_secret\"\n                                  name=\"vault_secret\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setVaultConfiguration({\n                                      ...vaultConfiguration,\n                                      approle: {\n                                        ...vaultConfiguration?.approle,\n                                        secret: e.target.value,\n                                      },\n                                    })\n                                  }\n                                  label=\"AppRole Secret\"\n                                  tooltip=\"AppRoleSecret is the AppRole access secret for authenticating to Hashicorp Vault via the AppRole method\"\n                                  value={\n                                    vaultConfiguration?.approle?.secret || \"\"\n                                  }\n                                  required\n                                  error={validationErrors[\"vault_secret\"] || \"\"}\n                                />\n                                <InputBox\n                                  type=\"number\"\n                                  min=\"0\"\n                                  id=\"vault_retry\"\n                                  name=\"vault_retry\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setVaultConfiguration({\n                                      ...vaultConfiguration,\n                                      approle: {\n                                        ...vaultConfiguration?.approle,\n                                        retry: e.target.value,\n                                      },\n                                    })\n                                  }\n                                  label=\"Retry (Seconds)\"\n                                  error={validationErrors[\"vault_retry\"] || \"\"}\n                                  value={\n                                    vaultConfiguration?.approle?.retry || \"\"\n                                  }\n                                />\n                              </fieldset>\n                              <fieldset className={\"inputItem\"}>\n                                <legend>Status</legend>\n                                <InputBox\n                                  type=\"number\"\n                                  min=\"0\"\n                                  id=\"vault_ping\"\n                                  name=\"vault_ping\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setVaultConfiguration({\n                                      ...vaultConfiguration,\n                                      status: {\n                                        ...vaultConfiguration?.status,\n                                        ping: e.target.value,\n                                      },\n                                    })\n                                  }\n                                  label=\"Ping (Seconds)\"\n                                  tooltip=\"controls how often to Vault health status is checked. If not set, defaults to 10s\"\n                                  error={validationErrors[\"vault_ping\"] || \"\"}\n                                  value={vaultConfiguration?.status?.ping || \"\"}\n                                />\n                              </fieldset>\n                            </Fragment>\n                          )}\n                          {encryptionType === \"azure\" && (\n                            <Fragment>\n                              <InputBox\n                                id=\"azure_endpoint\"\n                                name=\"azure_endpoint\"\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>,\n                                ) =>\n                                  setAzureConfiguration({\n                                    ...azureConfiguration,\n                                    keyvault: {\n                                      ...azureConfiguration?.keyvault,\n                                      endpoint: e.target.value,\n                                    },\n                                  })\n                                }\n                                label=\"Endpoint\"\n                                tooltip=\"Endpoint is the Azure KeyVault endpoint\"\n                                error={validationErrors[\"azure_endpoint\"] || \"\"}\n                                value={\n                                  azureConfiguration?.keyvault?.endpoint || \"\"\n                                }\n                              />\n                              <fieldset className={\"inputItem\"}>\n                                <legend>Credentials</legend>\n                                <InputBox\n                                  id=\"azure_tenant_id\"\n                                  name=\"azure_tenant_id\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setAzureConfiguration({\n                                      ...azureConfiguration,\n                                      keyvault: {\n                                        ...azureConfiguration?.keyvault,\n                                        credentials: {\n                                          ...azureConfiguration?.keyvault\n                                            ?.credentials,\n                                          tenant_id: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Tenant ID\"\n                                  tooltip=\"TenantID is the ID of the Azure KeyVault tenant\"\n                                  value={\n                                    azureConfiguration?.keyvault?.credentials\n                                      ?.tenant_id || \"\"\n                                  }\n                                  error={\n                                    validationErrors[\"azure_tenant_id\"] || \"\"\n                                  }\n                                />\n                                <InputBox\n                                  id=\"azure_client_id\"\n                                  name=\"azure_client_id\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setAzureConfiguration({\n                                      ...azureConfiguration,\n                                      keyvault: {\n                                        ...azureConfiguration?.keyvault,\n                                        credentials: {\n                                          ...azureConfiguration?.keyvault\n                                            ?.credentials,\n                                          client_id: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Client ID\"\n                                  tooltip=\"ClientID is the ID of the client accessing Azure KeyVault\"\n                                  value={\n                                    azureConfiguration?.keyvault?.credentials\n                                      ?.client_id || \"\"\n                                  }\n                                  error={\n                                    validationErrors[\"azure_client_id\"] || \"\"\n                                  }\n                                />\n                                <InputBox\n                                  id=\"azure_client_secret\"\n                                  name=\"azure_client_secret\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setAzureConfiguration({\n                                      ...azureConfiguration,\n                                      keyvault: {\n                                        ...azureConfiguration?.keyvault,\n                                        credentials: {\n                                          ...azureConfiguration?.keyvault\n                                            ?.credentials,\n                                          client_secret: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Client Secret\"\n                                  tooltip=\"ClientSecret is the client secret accessing the Azure KeyVault\"\n                                  value={\n                                    azureConfiguration?.keyvault?.credentials\n                                      ?.client_secret || \"\"\n                                  }\n                                  error={\n                                    validationErrors[\"azure_client_secret\"] ||\n                                    \"\"\n                                  }\n                                />\n                              </fieldset>\n                            </Fragment>\n                          )}\n                          {encryptionType === \"gcp\" && (\n                            <Fragment>\n                              <InputBox\n                                id=\"gcp_project_id\"\n                                name=\"gcp_project_id\"\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>,\n                                ) =>\n                                  setGCPConfiguration({\n                                    ...gcpConfiguration,\n                                    secretmanager: {\n                                      ...gcpConfiguration?.secretmanager,\n                                      project_id: e.target.value,\n                                    },\n                                  })\n                                }\n                                label=\"Project ID\"\n                                tooltip=\"ProjectID is the GCP project ID\"\n                                value={\n                                  gcpConfiguration?.secretmanager.project_id ||\n                                  \"\"\n                                }\n                              />\n                              <InputBox\n                                id=\"gcp_endpoint\"\n                                name=\"gcp_endpoint\"\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>,\n                                ) =>\n                                  setGCPConfiguration({\n                                    ...gcpConfiguration,\n                                    secretmanager: {\n                                      ...gcpConfiguration?.secretmanager,\n                                      endpoint: e.target.value,\n                                    },\n                                  })\n                                }\n                                label=\"Endpoint\"\n                                tooltip=\"Endpoint is the GCP project ID. If empty defaults to: secretmanager.googleapis.com:443\"\n                                value={\n                                  gcpConfiguration?.secretmanager.endpoint || \"\"\n                                }\n                              />\n                              <fieldset className={\"inputItem\"}>\n                                <legend>Credentials</legend>\n                                <InputBox\n                                  id=\"gcp_client_email\"\n                                  name=\"gcp_client_email\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setGCPConfiguration({\n                                      ...gcpConfiguration,\n                                      secretmanager: {\n                                        ...gcpConfiguration?.secretmanager,\n                                        credentials: {\n                                          ...gcpConfiguration?.secretmanager\n                                            .credentials,\n                                          client_email: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Client Email\"\n                                  tooltip=\"Is the Client email of the GCP service account used to access the SecretManager\"\n                                  value={\n                                    gcpConfiguration?.secretmanager.credentials\n                                      ?.client_email || \"\"\n                                  }\n                                />\n                                <InputBox\n                                  id=\"gcp_client_id\"\n                                  name=\"gcp_client_id\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setGCPConfiguration({\n                                      ...gcpConfiguration,\n                                      secretmanager: {\n                                        ...gcpConfiguration?.secretmanager,\n                                        credentials: {\n                                          ...gcpConfiguration?.secretmanager\n                                            .credentials,\n                                          client_id: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Client ID\"\n                                  tooltip=\"Is the Client ID of the GCP service account used to access the SecretManager\"\n                                  value={\n                                    gcpConfiguration?.secretmanager.credentials\n                                      ?.client_id || \"\"\n                                  }\n                                />\n                                <InputBox\n                                  id=\"gcp_private_key_id\"\n                                  name=\"gcp_private_key_id\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setGCPConfiguration({\n                                      ...gcpConfiguration,\n                                      secretmanager: {\n                                        ...gcpConfiguration?.secretmanager,\n                                        credentials: {\n                                          ...gcpConfiguration?.secretmanager\n                                            .credentials,\n                                          private_key_id: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Private Key ID\"\n                                  tooltip=\"Is the private key ID of the GCP service account used to access the SecretManager\"\n                                  value={\n                                    gcpConfiguration?.secretmanager.credentials\n                                      ?.private_key_id || \"\"\n                                  }\n                                />\n                                <InputBox\n                                  id=\"gcp_private_key\"\n                                  name=\"gcp_private_key\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setGCPConfiguration({\n                                      ...gcpConfiguration,\n                                      secretmanager: {\n                                        ...gcpConfiguration?.secretmanager,\n                                        credentials: {\n                                          ...gcpConfiguration?.secretmanager\n                                            .credentials,\n                                          private_key: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Private Key\"\n                                  tooltip=\"Is the private key of the GCP service account used to access the SecretManager\"\n                                  value={\n                                    gcpConfiguration?.secretmanager.credentials\n                                      ?.private_key || \"\"\n                                  }\n                                />\n                              </fieldset>\n                            </Fragment>\n                          )}\n                          {encryptionType === \"aws\" && (\n                            <Fragment>\n                              <InputBox\n                                id=\"aws_endpoint\"\n                                name=\"aws_endpoint\"\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>,\n                                ) =>\n                                  setAWSConfiguration({\n                                    ...awsConfiguration,\n                                    secretsmanager: {\n                                      ...awsConfiguration?.secretsmanager,\n                                      endpoint: e.target.value,\n                                    },\n                                  })\n                                }\n                                label=\"Endpoint\"\n                                tooltip=\"Endpoint is the AWS SecretsManager endpoint. AWS SecretsManager endpoints have the following schema: secrestmanager[-fips].<region>.amanzonaws.com\"\n                                value={\n                                  awsConfiguration?.secretsmanager?.endpoint ||\n                                  \"\"\n                                }\n                                required\n                                error={validationErrors[\"aws_endpoint\"] || \"\"}\n                              />\n                              <InputBox\n                                id=\"aws_region\"\n                                name=\"aws_region\"\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>,\n                                ) =>\n                                  setAWSConfiguration({\n                                    ...awsConfiguration,\n                                    secretsmanager: {\n                                      ...awsConfiguration?.secretsmanager,\n                                      region: e.target.value,\n                                    },\n                                  })\n                                }\n                                label=\"Region\"\n                                tooltip=\"Region is the AWS region the SecretsManager is located\"\n                                value={\n                                  awsConfiguration?.secretsmanager?.region || \"\"\n                                }\n                                error={validationErrors[\"aws_region\"] || \"\"}\n                                required\n                              />\n                              <InputBox\n                                id=\"aws_kmsKey\"\n                                name=\"aws_kmsKey\"\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>,\n                                ) =>\n                                  setAWSConfiguration({\n                                    ...awsConfiguration,\n                                    secretsmanager: {\n                                      ...awsConfiguration?.secretsmanager,\n                                      kmskey: e.target.value,\n                                    },\n                                  })\n                                }\n                                label=\"KMS Key\"\n                                tooltip=\"KMSKey is the AWS-KMS key ID (CMK-ID) used to en/decrypt secrets managed by the SecretsManager. If empty, the default AWS KMS key is used\"\n                                value={\n                                  awsConfiguration?.secretsmanager?.kmskey || \"\"\n                                }\n                              />\n                              <fieldset className={\"inputItem\"}>\n                                <legend>Credentials</legend>\n                                <InputBox\n                                  id=\"aws_accessKey\"\n                                  name=\"aws_accessKey\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setAWSConfiguration({\n                                      ...awsConfiguration,\n                                      secretsmanager: {\n                                        ...awsConfiguration?.secretsmanager,\n                                        credentials: {\n                                          ...awsConfiguration?.secretsmanager\n                                            ?.credentials,\n                                          accesskey: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Access Key\"\n                                  tooltip=\"AccessKey is the access key for authenticating to AWS\"\n                                  value={\n                                    awsConfiguration?.secretsmanager\n                                      ?.credentials?.accesskey || \"\"\n                                  }\n                                  error={\n                                    validationErrors[\"aws_accessKey\"] || \"\"\n                                  }\n                                  required\n                                />\n                                <InputBox\n                                  id=\"aws_secretKey\"\n                                  name=\"aws_secretKey\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setAWSConfiguration({\n                                      ...awsConfiguration,\n                                      secretsmanager: {\n                                        ...awsConfiguration?.secretsmanager,\n                                        credentials: {\n                                          ...awsConfiguration?.secretsmanager\n                                            ?.credentials,\n                                          secretkey: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Secret Key\"\n                                  tooltip=\"SecretKey is the secret key for authenticating to AWS\"\n                                  value={\n                                    awsConfiguration?.secretsmanager\n                                      ?.credentials?.secretkey || \"\"\n                                  }\n                                  error={\n                                    validationErrors[\"aws_secretKey\"] || \"\"\n                                  }\n                                  required\n                                />\n                                <InputBox\n                                  id=\"aws_token\"\n                                  name=\"aws_token\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setAWSConfiguration({\n                                      ...awsConfiguration,\n                                      secretsmanager: {\n                                        ...awsConfiguration?.secretsmanager,\n                                        credentials: {\n                                          ...awsConfiguration?.secretsmanager\n                                            ?.credentials,\n                                          token: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Token\"\n                                  tooltip=\"SessionToken is an optional session token for authenticating to AWS when using STS\"\n                                  value={\n                                    awsConfiguration?.secretsmanager\n                                      ?.credentials?.token || \"\"\n                                  }\n                                />\n                              </fieldset>\n                            </Fragment>\n                          )}\n                          {encryptionType === \"gemalto\" && (\n                            <Fragment>\n                              <InputBox\n                                id=\"gemalto_endpoint\"\n                                name=\"gemalto_endpoint\"\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>,\n                                ) =>\n                                  setGemaltoConfiguration({\n                                    ...gemaltoConfiguration,\n                                    keysecure: {\n                                      ...gemaltoConfiguration?.keysecure,\n                                      endpoint: e.target.value,\n                                    },\n                                  })\n                                }\n                                label=\"Endpoint\"\n                                tooltip=\"Endpoint is the endpoint to the KeySecure server\"\n                                value={\n                                  gemaltoConfiguration?.keysecure?.endpoint ||\n                                  \"\"\n                                }\n                                error={\n                                  validationErrors[\"gemalto_endpoint\"] || \"\"\n                                }\n                                required\n                              />\n                              <fieldset className={\"inputItem\"}>\n                                <legend>Credentials</legend>\n                                <InputBox\n                                  id=\"gemalto_token\"\n                                  name=\"gemalto_token\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setGemaltoConfiguration({\n                                      ...gemaltoConfiguration,\n                                      keysecure: {\n                                        ...gemaltoConfiguration?.keysecure,\n                                        credentials: {\n                                          ...gemaltoConfiguration?.keysecure\n                                            ?.credentials,\n                                          token: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Token\"\n                                  tooltip=\"Token is the refresh authentication token to access the KeySecure server\"\n                                  value={\n                                    gemaltoConfiguration?.keysecure?.credentials\n                                      ?.token || \"\"\n                                  }\n                                  error={\n                                    validationErrors[\"gemalto_token\"] || \"\"\n                                  }\n                                  required\n                                />\n                                <InputBox\n                                  id=\"gemalto_domain\"\n                                  name=\"gemalto_domain\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setGemaltoConfiguration({\n                                      ...gemaltoConfiguration,\n                                      keysecure: {\n                                        ...gemaltoConfiguration?.keysecure,\n                                        credentials: {\n                                          ...gemaltoConfiguration?.keysecure\n                                            ?.credentials,\n                                          domain: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Domain\"\n                                  tooltip=\"Domain is the isolated namespace within the KeySecure server. If empty, defaults to the top-level / root domain\"\n                                  value={\n                                    gemaltoConfiguration?.keysecure?.credentials\n                                      ?.domain || \"\"\n                                  }\n                                  error={\n                                    validationErrors[\"gemalto_domain\"] || \"\"\n                                  }\n                                  required\n                                />\n                                <InputBox\n                                  type=\"number\"\n                                  min=\"0\"\n                                  id=\"gemalto_retry\"\n                                  name=\"gemalto_retry\"\n                                  onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                  ) =>\n                                    setGemaltoConfiguration({\n                                      ...gemaltoConfiguration,\n                                      keysecure: {\n                                        ...gemaltoConfiguration?.keysecure,\n                                        credentials: {\n                                          ...gemaltoConfiguration?.keysecure\n                                            ?.credentials,\n                                          retry: e.target.value,\n                                        },\n                                      },\n                                    })\n                                  }\n                                  label=\"Retry (seconds)\"\n                                  value={\n                                    gemaltoConfiguration?.keysecure?.credentials\n                                      ?.retry || \"\"\n                                  }\n                                  error={\n                                    validationErrors[\"gemalto_retry\"] || \"\"\n                                  }\n                                />\n                              </fieldset>\n                            </Fragment>\n                          )}\n                        </Fragment>\n                      ),\n                    },\n                    {\n                      tabConfig: { label: \"Raw Edit\", id: \"raw-edit\" },\n                      content: (\n                        <CodeEditor\n                          value={encryptionRawConfiguration}\n                          mode={\"yaml\"}\n                          onChange={(value) => {\n                            setEncryptionRawConfiguration(value);\n                          }}\n                          editorHeight={\"550px\"}\n                        />\n                      ),\n                    },\n                  ]}\n                  onTabClick={(value) => setEditRawConfiguration(value)}\n                  currentTabOrPath={editRawConfiguration}\n                  horizontal\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <SectionTitle>Additional Configuration for KES</SectionTitle>\n                <InputBox\n                  value=\"enableCustomCertsForKES\"\n                  id=\"enableCustomCertsForKES\"\n                  name=\"enableCustomCertsForKES\"\n                  checked={enabledCustomCertificates}\n                  onChange={() =>\n                    setEnabledCustomCertificates(!enabledCustomCertificates)\n                  }\n                  label={\"Custom Certificates\"}\n                />\n                {enabledCustomCertificates && (\n                  <Fragment>\n                    <fieldset className={\"inputItem\"}>\n                      <legend>Encryption server certificates</legend>\n                      {kesServerTLSCertificateSecret ? (\n                        <TLSCertificate\n                          certificateInfo={kesServerTLSCertificateSecret}\n                          onDelete={() =>\n                            removeCertificate(kesServerTLSCertificateSecret)\n                          }\n                        />\n                      ) : (\n                        <Fragment>\n                          <FileSelector\n                            onChange={(event, fileName, encodedValue) => {\n                              if (encodedValue) {\n                                setKESServerCertificate({\n                                  encoded_key: encodedValue,\n                                  id: kesServerCertificate?.id || \"\",\n                                  key: fileName || \"\",\n                                  cert: kesServerCertificate?.cert || \"\",\n                                  encoded_cert:\n                                    kesServerCertificate?.encoded_cert || \"\",\n                                });\n                                cleanValidation(\"serverKey\");\n                              }\n                            }}\n                            accept=\".key,.pem\"\n                            id=\"serverKey\"\n                            name=\"serverKey\"\n                            label=\"Key\"\n                            value={kesServerCertificate?.key || \"\"}\n                            returnEncodedData\n                          />\n                          <FileSelector\n                            onChange={(event, fileName, encodedValue) => {\n                              if (encodedValue) {\n                                setKESServerCertificate({\n                                  encoded_key:\n                                    kesServerCertificate?.encoded_key || \"\",\n                                  id: kesServerCertificate?.id || \"\",\n                                  key: kesServerCertificate?.key || \"\",\n                                  cert: fileName || \"\",\n                                  encoded_cert: encodedValue || \"\",\n                                });\n                                cleanValidation(\"serverCert\");\n                              }\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"serverCert\"\n                            name=\"serverCert\"\n                            label=\"Cert\"\n                            value={kesServerCertificate?.cert || \"\"}\n                            returnEncodedData\n                          />\n                        </Fragment>\n                      )}\n                    </fieldset>\n                    <fieldset className={\"inputItem\"}>\n                      <legend>\n                        MinIO mTLS certificates (connection between MinIO and\n                        the Encryption server)\n                      </legend>\n                      {minioMTLSCertificateSecret ? (\n                        <TLSCertificate\n                          certificateInfo={minioMTLSCertificateSecret}\n                          onDelete={() =>\n                            removeCertificate(minioMTLSCertificateSecret)\n                          }\n                        />\n                      ) : (\n                        <Fragment>\n                          <FileSelector\n                            onChange={(event, fileName, encodedValue) => {\n                              if (encodedValue) {\n                                setMinioMTLSCertificate({\n                                  encoded_key: encodedValue,\n                                  id: minioMTLSCertificate?.id || \"\",\n                                  key: fileName || \"\",\n                                  cert: minioMTLSCertificate?.cert || \"\",\n                                  encoded_cert:\n                                    minioMTLSCertificate?.encoded_cert || \"\",\n                                });\n                                cleanValidation(\"clientKey\");\n                              }\n                            }}\n                            accept=\".key,.pem\"\n                            id=\"clientKey\"\n                            name=\"clientKey\"\n                            label=\"Key\"\n                            value={minioMTLSCertificate?.key || \"\"}\n                            returnEncodedData\n                          />\n                          <FileSelector\n                            onChange={(event, fileName, encodedValue) => {\n                              if (encodedValue) {\n                                setMinioMTLSCertificate({\n                                  encoded_key:\n                                    minioMTLSCertificate?.encoded_key || \"\",\n                                  id: minioMTLSCertificate?.id || \"\",\n                                  key: minioMTLSCertificate?.key || \"\",\n                                  cert: fileName || \"\",\n                                  encoded_cert: encodedValue || \"\",\n                                });\n                                cleanValidation(\"clientCert\");\n                              }\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"clientCert\"\n                            name=\"clientCert\"\n                            label=\"Cert\"\n                            value={minioMTLSCertificate?.cert || \"\"}\n                            returnEncodedData\n                          />\n                        </Fragment>\n                      )}\n                    </fieldset>\n                    <fieldset className={\"inputItem\"}>\n                      <legend>\n                        KMS mTLS certificates (connection between the Encryption\n                        server and the KMS)\n                      </legend>\n                      {kmsMTLSCertificateSecret ? (\n                        <TLSCertificate\n                          certificateInfo={kmsMTLSCertificateSecret}\n                          onDelete={() =>\n                            removeCertificate(kmsMTLSCertificateSecret)\n                          }\n                        />\n                      ) : (\n                        <Fragment>\n                          <FileSelector\n                            onChange={(event, fileName, encodedValue) => {\n                              if (encodedValue) {\n                                setKmsMTLSCertificate({\n                                  encoded_key: encodedValue || \"\",\n                                  id: kmsMTLSCertificate?.id || \"\",\n                                  key: fileName || \"\",\n                                  cert: kmsMTLSCertificate?.cert || \"\",\n                                  encoded_cert:\n                                    kmsMTLSCertificate?.encoded_cert || \"\",\n                                });\n                              }\n                            }}\n                            accept=\".key,.pem\"\n                            id=\"kms_mtls_key\"\n                            name=\"kms_mtls_key\"\n                            label=\"Key\"\n                            value={kmsMTLSCertificate?.key || \"\"}\n                            returnEncodedData\n                          />\n                          <FileSelector\n                            onChange={(event, fileName, encodedValue) => {\n                              if (encodedValue) {\n                                setKmsMTLSCertificate({\n                                  encoded_key:\n                                    kmsMTLSCertificate?.encoded_key || \"\",\n                                  id: kmsMTLSCertificate?.id || \"\",\n                                  key: kmsMTLSCertificate?.key || \"\",\n                                  cert: fileName || \"\",\n                                  encoded_cert: encodedValue || \"\",\n                                });\n                              }\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"kms_mtls_cert\"\n                            name=\"kms_mtls_cert\"\n                            label=\"Cert\"\n                            value={kmsMTLSCertificate?.cert || \"\"}\n                            returnEncodedData\n                          />\n                        </Fragment>\n                      )}\n                      {kmsCACertificateSecret ? (\n                        <TLSCertificate\n                          certificateInfo={kmsCACertificateSecret}\n                          onDelete={() =>\n                            removeCertificate(kmsCACertificateSecret)\n                          }\n                        />\n                      ) : (\n                        <FileSelector\n                          onChange={(event, fileName, encodedValue) => {\n                            if (encodedValue) {\n                              setKmsCACertificate({\n                                encoded_key:\n                                  kmsCACertificate?.encoded_key || \"\",\n                                id: kmsCACertificate?.id || \"\",\n                                key: kmsCACertificate?.key || \"\",\n                                cert: fileName || \"\",\n                                encoded_cert: encodedValue || \"\",\n                              });\n                            }\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"kms_mtls_ca\"\n                          name=\"kms_mtls_ca\"\n                          label=\"CA\"\n                          value={kmsCACertificate?.cert || \"\"}\n                          returnEncodedData\n                        />\n                      )}\n                    </fieldset>\n                  </Fragment>\n                )}\n                <InputBox\n                  type=\"text\"\n                  id=\"image\"\n                  name=\"image\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setImage(e.target.value)\n                  }\n                  label=\"Image\"\n                  tooltip=\"KES container image\"\n                  placeholder=\"minio/kes:2023-11-10T10-44-28Z\"\n                  value={image}\n                />\n                <InputBox\n                  type=\"number\"\n                  min=\"1\"\n                  id=\"replicas\"\n                  name=\"replicas\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setReplicas(e.target.value)\n                  }\n                  label=\"Replicas\"\n                  tooltip=\"Numer of KES pod replicas\"\n                  value={replicas}\n                  required\n                  error={validationErrors[\"replicas\"] || \"\"}\n                />\n                <SectionTitle>SecurityContext for KES</SectionTitle>\n                <Box\n                  sx={{\n                    display: \"flex\" as const,\n                    alignItems: \"center\" as const,\n                    justifyContent: \"flex-start\" as const,\n                    gap: 15,\n                    \"@media (max-width: 900px)\": {\n                      display: \"flex\",\n                      flexFlow: \"column\",\n                    },\n                  }}\n                >\n                  <Box className={`inputItem`}>\n                    <InputBox\n                      type=\"number\"\n                      id=\"kes_securityContext_runAsUser\"\n                      name=\"kes_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        setSecurityContext({\n                          ...securityContext,\n                          runAsUser: e.target.value,\n                        });\n                      }}\n                      label=\"Run As User\"\n                      value={securityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </Box>\n                  <Box className={`inputItem`}>\n                    <InputBox\n                      type=\"number\"\n                      id=\"kes_securityContext_runAsGroup\"\n                      name=\"kes_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        setSecurityContext({\n                          ...securityContext,\n                          runAsGroup: e.target.value,\n                        });\n                      }}\n                      label=\"Run As Group\"\n                      value={securityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </Box>\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\" as const,\n                    alignItems: \"center\" as const,\n                    justifyContent: \"flex-start\" as const,\n                    gap: 15,\n                    \"@media (max-width: 900px)\": {\n                      display: \"flex\",\n                      flexFlow: \"column\",\n                    },\n                  }}\n                >\n                  <Box className={`inputItem`}>\n                    <InputBox\n                      type=\"number\"\n                      id=\"kes_securityContext_fsGroup\"\n                      name=\"kes_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        setSecurityContext({\n                          ...securityContext,\n                          fsGroup: e.target.value,\n                        });\n                      }}\n                      label=\"FsGroup\"\n                      value={securityContext.fsGroup!}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                      }\n                      min=\"0\"\n                      sx={{\n                        marginBottom: 12,\n                      }}\n                    />\n                  </Box>\n                </Box>\n                <InputBox\n                  value=\"kesSecurityContextRunAsNonRoot\"\n                  id=\"kes_securityContext_runAsNonRoot\"\n                  name=\"kes_securityContext_runAsNonRoot\"\n                  checked={securityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setSecurityContext({\n                      ...securityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </Grid>\n            </Fragment>\n          )}\n          <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n            <Button\n              id={\"save-encryption\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={!isFormValid}\n              onClick={() => setConfirmOpen(true)}\n              label={\"Save\"}\n            />\n          </Grid>\n        </Grid>\n      </FormLayout>\n    </React.Fragment>\n  );\n};\n\nexport default TenantEncryption;\n"],"names":["actionsTray","label","color","fontSize","alignSelf","whiteSpace","marginLeft","display","justifyContent","marginBottom","alignItems","flexGrow","modalStyleUtils","modalButtonBar","marginTop","marginRight","modalFormScrollable","maxHeight","overflowY","paddingTop","CertificateContainer","styled","div","_ref","theme","position","margin","userSelect","appearance","maxWidth","fontFamily","gap","border","concat","get","borderRadius","padding","fontWeight","backgroundColor","cursor","opacity","fill","width","height","minWidth","minHeight","flexWrap","textTransform","listStyle","content","borderBottom","transform","_ref2","certificateInfo","onDelete","certificates","domains","expiry","DateTime","fromISO","now","utc","daysToExpiry","daysToExpiryHuman","certificateExpiration","durationToExpiry","diff","as","minus","Duration","fromObject","days","shiftTo","toHuman","maximumFractionDigits","minutes","_jsxs","children","Box","className","_jsx","CertificateIcon","name","EventBusyIcon","toFormat","TimeIcon","style","length","map","dom","index","LanguageIcon","IconButton","size","onClick","AlertCloseIcon","PolicyItem","items","title","Fragment","flexFlow","iTxt","policies","fmtPolicies","arguments","undefined","Object","keys","polName","policyConfig","identities","paths","allow","deny","getPolicyData","Grid","xs","sx","withBorders","overflow","pConf","borderLeft","borderRight","borderTop","TenantEncryption","_vaultConfiguration$a9","_vaultConfiguration$a10","_vaultConfiguration$a11","_vaultConfiguration$a12","_vaultConfiguration$s4","_azureConfiguration$k15","_azureConfiguration$k17","_azureConfiguration$k18","_azureConfiguration$k20","_azureConfiguration$k21","_azureConfiguration$k23","_azureConfiguration$k24","_gcpConfiguration$sec11","_gcpConfiguration$sec12","_gcpConfiguration$sec13","_gcpConfiguration$sec14","_awsConfiguration$sec16","_awsConfiguration$sec17","_awsConfiguration$sec18","_awsConfiguration$sec20","_awsConfiguration$sec21","_awsConfiguration$sec23","_awsConfiguration$sec24","_awsConfiguration$sec26","_awsConfiguration$sec27","_gemaltoConfiguration17","_gemaltoConfiguration19","_gemaltoConfiguration20","_gemaltoConfiguration22","_gemaltoConfiguration23","_gemaltoConfiguration25","_gemaltoConfiguration26","dispatch","useAppDispatch","tenant","useSelector","state","tenants","tenantInfo","editRawConfiguration","setEditRawConfiguration","useState","encryptionRawConfiguration","setEncryptionRawConfiguration","encryptionEnabled","setEncryptionEnabled","encryptionType","setEncryptionType","replicas","setReplicas","image","setImage","refreshEncryptionInfo","setRefreshEncryptionInfo","securityContext","setSecurityContext","fsGroup","fsGroupChangePolicy","runAsGroup","runAsNonRoot","runAsUser","setPolicies","vaultConfiguration","setVaultConfiguration","awsConfiguration","setAWSConfiguration","gemaltoConfiguration","setGemaltoConfiguration","azureConfiguration","setAzureConfiguration","gcpConfiguration","setGCPConfiguration","enabledCustomCertificates","setEnabledCustomCertificates","updatingEncryption","setUpdatingEncryption","kesServerTLSCertificateSecret","setKesServerTLSCertificateSecret","minioMTLSCertificateSecret","setMinioMTLSCertificateSecret","minioMTLSCertificate","setMinioMTLSCertificate","certificatesToBeRemoved","setCertificatesToBeRemoved","isFormValid","setIsFormValid","kmsMTLSCertificateSecret","setKmsMTLSCertificateSecret","kmsCACertificateSecret","setKMSCACertificateSecret","kmsMTLSCertificate","setKmsMTLSCertificate","kesServerCertificate","setKESServerCertificate","kmsCACertificate","setKmsCACertificate","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","confirmOpen","setConfirmOpen","useEffect","encryptionValidation","_vaultConfiguration$a","_vaultConfiguration$a2","_vaultConfiguration$s","_vaultConfiguration$s2","_vaultConfiguration$a3","_vaultConfiguration$a4","_awsConfiguration$sec","_awsConfiguration$sec2","_awsConfiguration$sec3","_awsConfiguration$sec4","_awsConfiguration$sec5","_awsConfiguration$sec6","_gemaltoConfiguration","_gemaltoConfiguration2","_gemaltoConfiguration3","_gemaltoConfiguration4","_gemaltoConfiguration5","_gemaltoConfiguration6","_gemaltoConfiguration7","_gemaltoConfiguration8","_gemaltoConfiguration9","_azureConfiguration$k","_azureConfiguration$k2","_azureConfiguration$k3","_azureConfiguration$k4","_azureConfiguration$k5","_azureConfiguration$k6","_azureConfiguration$k7","fieldKey","required","value","customValidation","parseInt","customValidationMessage","encoded_key","encoded_cert","endpoint","approle","id","secret","status","ping","retry","secretsmanager","region","credentials","accesskey","secretkey","keysecure","token","domain","keyvault","tenant_id","client_id","client_secret","commonVal","commonFormValidation","fetchEncryptionInfo","namespace","api","invoke","then","resp","raw","vault","aws","gemalto","gcp","azure","server_tls","minio_mtls","kms_mtls","crt","ca","catch","err","console","error","removeCertificate","React","ConfirmDialog","isOpen","confirmText","cancelText","onClose","onConfirm","updateEncryptionConfiguration","_gemaltoConfiguration10","_gemaltoConfiguration11","_gemaltoConfiguration12","_gemaltoConfiguration13","_gemaltoConfiguration14","_gemaltoConfiguration15","_gemaltoConfiguration16","_awsConfiguration$sec7","_awsConfiguration$sec8","_awsConfiguration$sec9","_awsConfiguration$sec10","_awsConfiguration$sec11","_awsConfiguration$sec12","_awsConfiguration$sec13","_awsConfiguration$sec14","_awsConfiguration$sec15","_azureConfiguration$k8","_azureConfiguration$k9","_azureConfiguration$k10","_azureConfiguration$k11","_azureConfiguration$k12","_azureConfiguration$k13","_azureConfiguration$k14","_gcpConfiguration$sec","_gcpConfiguration$sec2","_gcpConfiguration$sec3","_gcpConfiguration$sec4","_gcpConfiguration$sec5","_gcpConfiguration$sec6","_gcpConfiguration$sec7","_gcpConfiguration$sec8","_gcpConfiguration$sec9","_gcpConfiguration$sec10","_vaultConfiguration$a5","_vaultConfiguration$a6","_vaultConfiguration$a7","_vaultConfiguration$a8","_vaultConfiguration$s3","insertEncrypt","kmskey","secretmanager","project_id","client_email","private_key_id","private_key","engine","prefix","encryptionServerKeyPair","encryptionClientKeyPair","encryptionKMSCertificates","key","kmsMTLSKeyPair","kmsCAInsert","dataSend","secretsToBeDeleted","setErrorSnackMessage","confirmationContent","InformativeMessage","message","variant","FormLayout","containerPadding","container","item","SectionTitle","separator","actions","Switch","indicatorLabels","checked","onChange","description","Tabs","options","tabConfig","KMSPolicyInfo","RadioGroup","currentValue","e","target","selectorOptions","InputBox","tooltip","type","min","_azureConfiguration$k16","_azureConfiguration$k19","_azureConfiguration$k22","_awsConfiguration$sec19","_awsConfiguration$sec22","_awsConfiguration$sec25","_gemaltoConfiguration18","_gemaltoConfiguration21","_gemaltoConfiguration24","CodeEditor","mode","editorHeight","onTabClick","currentTabOrPath","horizontal","TLSCertificate","FileSelector","event","fileName","encodedValue","cert","accept","returnEncodedData","placeholder","Button","disabled"],"sourceRoot":""}