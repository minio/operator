{"version":3,"file":"static/js/692.5190c7fd.chunk.js","mappings":"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","sources":["screens/Console/Tenants/TenantDetails/Pools/AddPool/PoolResources.tsx","screens/Console/Tenants/TenantDetails/Pools/AddPool/PoolConfiguration.tsx","screens/Console/Tenants/TenantDetails/Pools/AddPool/PoolPodPlacement.tsx","screens/Console/Tenants/TenantDetails/Pools/AddPool/AddPoolCreateButton.tsx","screens/Console/Tenants/TenantDetails/Pools/AddPool/AddPool.tsx"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport { niceBytes } from \"../../../../../../common/utils\";\nimport { Paper, SelectChangeEvent } from \"@mui/material\";\nimport api from \"../../../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { IQuotaElement, IQuotas } from \"../../../ListTenants/utils\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { useSelector } from \"react-redux\";\n\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport InputUnitMenu from \"../../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\nimport {\n  isPoolPageValid,\n  setPoolField,\n  setPoolStorageClasses,\n} from \"./addPoolSlice\";\nimport H3Section from \"../../../../Common/H3Section\";\n\ninterface IPoolResourcesProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    bottomContainer: {\n      display: \"flex\",\n      flexGrow: 1,\n      alignItems: \"center\",\n      margin: \"auto\",\n      justifyContent: \"center\",\n      \"& div\": {\n        width: 150,\n        \"@media (max-width: 900px)\": {\n          flexFlow: \"column\",\n        },\n      },\n    },\n    factorElements: {\n      display: \"flex\",\n      justifyContent: \"flex-start\",\n      marginLeft: 30,\n    },\n    sizeNumber: {\n      fontSize: 35,\n      fontWeight: 700,\n      textAlign: \"center\",\n    },\n    sizeDescription: {\n      fontSize: 14,\n      color: \"#777\",\n      textAlign: \"center\",\n    },\n    ...formFieldStyles,\n    ...wizardCommon,\n  });\n\nconst PoolResources = ({ classes }: IPoolResourcesProps) => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const storageClasses = useSelector(\n    (state: AppState) => state.addPool.storageClasses\n  );\n  const numberOfNodes = useSelector((state: AppState) =>\n    state.addPool.setup.numberOfNodes.toString()\n  );\n  const storageClass = useSelector(\n    (state: AppState) => state.addPool.setup.storageClass\n  );\n  const volumeSize = useSelector((state: AppState) =>\n    state.addPool.setup.volumeSize.toString()\n  );\n  const volumesPerServer = useSelector((state: AppState) =>\n    state.addPool.setup.volumesPerServer.toString()\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const instanceCapacity: number =\n    parseInt(volumeSize) * 1073741824 * parseInt(volumesPerServer);\n  const totalCapacity: number = instanceCapacity * parseInt(numberOfNodes);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [\n      {\n        fieldKey: \"number_of_nodes\",\n        required: true,\n        value: numberOfNodes.toString(),\n        customValidation:\n          parseInt(numberOfNodes) < 1 || isNaN(parseInt(numberOfNodes)),\n        customValidationMessage: \"Number of servers must be at least 1\",\n      },\n      {\n        fieldKey: \"pool_size\",\n        required: true,\n        value: volumeSize.toString(),\n        customValidation:\n          parseInt(volumeSize) < 1 || isNaN(parseInt(volumeSize)),\n        customValidationMessage: \"Pool Size cannot be 0\",\n      },\n      {\n        fieldKey: \"volumes_per_server\",\n        required: true,\n        value: volumesPerServer.toString(),\n        customValidation:\n          parseInt(volumesPerServer) < 1 || isNaN(parseInt(volumesPerServer)),\n        customValidationMessage: \"1 volume or more are required\",\n      },\n    ];\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPoolPageValid({\n        page: \"setup\",\n        status: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [dispatch, numberOfNodes, volumeSize, volumesPerServer, storageClass]);\n\n  useEffect(() => {\n    if (storageClasses.length === 0 && tenant) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenant.namespace}/resourcequotas/${tenant.namespace}-storagequota`\n        )\n        .then((res: IQuotas) => {\n          const elements: IQuotaElement[] = get(res, \"elements\", []);\n\n          const newStorage = elements.map((storageClass: any) => {\n            const name = get(storageClass, \"name\", \"\").split(\n              \".storageclass.storage.k8s.io/requests.storage\"\n            )[0];\n\n            return { label: name, value: name };\n          });\n\n          dispatch(\n            setPoolField({\n              page: \"setup\",\n              field: \"storageClass\",\n              value: newStorage[0].value,\n            })\n          );\n\n          dispatch(setPoolStorageClasses(newStorage));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          console.error(err);\n        });\n    }\n  }, [tenant, storageClasses, dispatch]);\n\n  const setFieldInfo = (fieldName: string, value: any) => {\n    dispatch(\n      setPoolField({\n        page: \"setup\",\n        field: fieldName,\n        value: value,\n      })\n    );\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <H3Section>New Pool Configuration</H3Section>\n        <span className={classes.descriptionText}>\n          Configure a new Pool to expand MinIO storage\n        </span>\n      </div>\n\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"number_of_nodes\"\n          name=\"number_of_nodes\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            const intValue = parseInt(e.target.value);\n\n            if (e.target.validity.valid && !isNaN(intValue)) {\n              setFieldInfo(\"numberOfNodes\", intValue);\n            } else if (isNaN(intValue)) {\n              setFieldInfo(\"numberOfNodes\", 0);\n            }\n          }}\n          label=\"Number of Servers\"\n          value={numberOfNodes}\n          error={validationErrors[\"number_of_nodes\"] || \"\"}\n          pattern={\"[0-9]*\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"pool_size\"\n          name=\"pool_size\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            const intValue = parseInt(e.target.value);\n\n            if (e.target.validity.valid && !isNaN(intValue)) {\n              setFieldInfo(\"volumeSize\", intValue);\n            } else if (isNaN(intValue)) {\n              setFieldInfo(\"volumeSize\", 0);\n            }\n          }}\n          label=\"Volume Size\"\n          value={volumeSize}\n          error={validationErrors[\"pool_size\"] || \"\"}\n          pattern={\"[0-9]*\"}\n          overlayObject={\n            <InputUnitMenu\n              id={\"quota_unit\"}\n              onUnitChange={() => {}}\n              unitSelected={\"Gi\"}\n              unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n              disabled={true}\n            />\n          }\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"volumes_per_sever\"\n          name=\"volumes_per_sever\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            const intValue = parseInt(e.target.value);\n\n            if (e.target.validity.valid && !isNaN(intValue)) {\n              setFieldInfo(\"volumesPerServer\", intValue);\n            } else if (isNaN(intValue)) {\n              setFieldInfo(\"volumesPerServer\", 0);\n            }\n          }}\n          label=\"Volumes per Server\"\n          value={volumesPerServer}\n          error={validationErrors[\"volumes_per_server\"] || \"\"}\n          pattern={\"[0-9]*\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <SelectWrapper\n          id=\"storage_class\"\n          name=\"storage_class\"\n          onChange={(e: SelectChangeEvent<string>) => {\n            setFieldInfo(\"storageClass\", e.target.value as string);\n          }}\n          label=\"Storage Class\"\n          value={storageClass}\n          options={storageClasses}\n          disabled={storageClasses.length < 1}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.bottomContainer}>\n        <div className={classes.factorElements}>\n          <div>\n            <div className={classes.sizeNumber}>\n              {niceBytes(instanceCapacity.toString(10))}\n            </div>\n            <div className={classes.sizeDescription}>Instance Capacity</div>\n          </div>\n          <div>\n            <div className={classes.sizeNumber}>\n              {niceBytes(totalCapacity.toString(10))}\n            </div>\n            <div className={classes.sizeDescription}>Total Capacity</div>\n          </div>\n        </div>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(PoolResources);\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { clearValidationError } from \"../../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { isPoolPageValid, setPoolField } from \"./addPoolSlice\";\nimport H3Section from \"../../../../Common/H3Section\";\n\ninterface IConfigureProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    tenantCustomizationFields: {\n      marginLeft: 30, // 2nd Level(15+15)\n      width: \"88%\",\n      margin: \"auto\",\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst PoolConfiguration = ({ classes }: IConfigureProps) => {\n  const dispatch = useAppDispatch();\n\n  const securityContextEnabled = useSelector(\n    (state: AppState) => state.addPool.configuration.securityContextEnabled\n  );\n  const securityContext = useSelector(\n    (state: AppState) => state.addPool.configuration.securityContext\n  );\n  const customRuntime = useSelector(\n    (state: AppState) => state.addPool.configuration.customRuntime\n  );\n  const runtimeClassName = useSelector(\n    (state: AppState) => state.addPool.configuration.runtimeClassName\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        setPoolField({\n          page: \"configuration\",\n          field: field,\n          value: value,\n        })\n      );\n    },\n    [dispatch]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n    if (securityContextEnabled) {\n      customAccountValidation = [\n        {\n          fieldKey: \"pool_securityContext_runAsUser\",\n          required: true,\n          value: securityContext.runAsUser,\n          customValidation:\n            securityContext.runAsUser === \"\" ||\n            parseInt(securityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"pool_securityContext_runAsGroup\",\n          required: true,\n          value: securityContext.runAsGroup,\n          customValidation:\n            securityContext.runAsGroup === \"\" ||\n            parseInt(securityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"pool_securityContext_fsGroup\",\n          required: true,\n          value: securityContext.fsGroup!,\n          customValidation:\n            securityContext.fsGroup === \"\" ||\n            parseInt(securityContext.fsGroup!) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPoolPageValid({\n        page: \"configure\",\n        status: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [dispatch, securityContextEnabled, securityContext]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <H3Section>Configure</H3Section>\n        <span className={classes.descriptionText}>\n          Aditional Configurations for the new Pool\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"tenantConfig\"\n          id=\"pool_configuration\"\n          name=\"pool_configuration\"\n          checked={securityContextEnabled}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"securityContextEnabled\", checked);\n          }}\n          label={\"Security Context\"}\n        />\n      </Grid>\n      {securityContextEnabled && (\n        <Grid item xs={12} className={classes.tenantCustomizationFields}>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              Pool's Security Context\n            </legend>\n            <Grid item xs={12} className={`${classes.configSectionItem}`}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"pool_securityContext_runAsUser\"\n                    name=\"pool_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"securityContext\", {\n                        ...securityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"pool_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={securityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"pool_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"pool_securityContext_runAsGroup\"\n                    name=\"pool_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"securityContext\", {\n                        ...securityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"pool_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={securityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"pool_securityContext_runAsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"pool_securityContext_fsGroup\"\n                    name=\"pool_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"securityContext\", {\n                        ...securityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"pool_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={securityContext.fsGroup!}\n                    required\n                    error={\n                      validationErrors[\"pool_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"securityContextRunAsNonRoot\"\n                  id=\"pool_securityContext_runAsNonRoot\"\n                  name=\"pool_securityContext_runAsNonRoot\"\n                  checked={securityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"securityContext\", {\n                      ...securityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n      <Grid\n        item\n        xs={12}\n        className={classes.configSectionItem}\n        sx={{ marginTop: \"10px\" }}\n      >\n        <FormSwitchWrapper\n          value=\"customRuntime\"\n          id=\"tenant_custom_runtime\"\n          name=\"tenant_custom_runtime\"\n          checked={customRuntime}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"customRuntime\", checked);\n          }}\n          label={\"Custom Runtime Configurations\"}\n        />\n      </Grid>\n      {customRuntime && (\n        <Grid item xs={12} className={classes.tenantCustomizationFields}>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              Custom Runtime Configurations\n            </legend>\n            <Grid item xs={12} className={`${classes.configSectionItem}`}>\n              <div className={classes.containerItem}>\n                <InputBoxWrapper\n                  id=\"tenant_runtime_runtimeClassName\"\n                  name=\"tenant_runtime_runtimeClassName\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"runtimeClassName\", e.target.value);\n                    cleanValidation(\"tenant_runtime_runtimeClassName\");\n                  }}\n                  label=\"Runtime Class Name\"\n                  value={runtimeClassName}\n                  error={\n                    validationErrors[\"tenant_runtime_runtimeClassName\"] || \"\"\n                  }\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(PoolConfiguration);\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, SelectChangeEvent } from \"@mui/material\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\n\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport { LabelKeyPair } from \"../../../types\";\nimport RadioGroupSelector from \"../../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport FormSwitchWrapper from \"../../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport api from \"../../../../../../common/api\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { AddIcon, RemoveIcon } from \"mds\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport TolerationSelector from \"../../../../Common/TolerationSelector/TolerationSelector\";\nimport { setModalErrorSnackMessage } from \"../../../../../../systemSlice\";\nimport {\n  addNewPoolToleration,\n  isPoolPageValid,\n  removePoolToleration,\n  setPoolField,\n  setPoolKeyValuePairs,\n  setPoolTolerationInfo,\n} from \"./addPoolSlice\";\nimport H3Section from \"../../../../Common/H3Section\";\n\ninterface IAffinityProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    overlayAction: {\n      marginLeft: 10,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    affinityConfigField: {\n      display: \"flex\",\n    },\n    affinityFieldLabel: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      flex: 1,\n    },\n    radioField: {\n      display: \"flex\",\n      alignItems: \"flex-start\",\n      marginTop: 10,\n      \"& div:first-child\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n        textAlign: \"left !important\",\n      },\n    },\n    affinityLabelKey: {\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    affinityLabelValue: {\n      marginLeft: 10,\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    affinityRow: {\n      marginBottom: 10,\n      display: \"flex\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface OptionPair {\n  label: string;\n  value: string;\n}\n\nconst Affinity = ({ classes }: IAffinityProps) => {\n  const dispatch = useAppDispatch();\n\n  const podAffinity = useSelector(\n    (state: AppState) => state.addPool.affinity.podAffinity\n  );\n  const nodeSelectorLabels = useSelector(\n    (state: AppState) => state.addPool.affinity.nodeSelectorLabels\n  );\n  const withPodAntiAffinity = useSelector(\n    (state: AppState) => state.addPool.affinity.withPodAntiAffinity\n  );\n  const keyValuePairs = useSelector(\n    (state: AppState) => state.addPool.nodeSelectorPairs\n  );\n  const tolerations = useSelector(\n    (state: AppState) => state.addPool.tolerations\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [keyValueMap, setKeyValueMap] = useState<{ [key: string]: string[] }>(\n    {}\n  );\n  const [keyOptions, setKeyOptions] = useState<OptionPair[]>([]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        setPoolField({\n          page: \"affinity\",\n          field: field,\n          value: value,\n        })\n      );\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/nodes/labels`)\n        .then((res: { [key: string]: string[] }) => {\n          setLoading(false);\n          setKeyValueMap(res);\n          let keys: OptionPair[] = [];\n          for (let k in res) {\n            keys.push({\n              label: k,\n              value: k,\n            });\n          }\n          setKeyOptions(keys);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n          setKeyValueMap({});\n        });\n    }\n  }, [dispatch, loading]);\n\n  useEffect(() => {\n    if (keyValuePairs) {\n      const vlr = keyValuePairs\n        .filter((kvp) => kvp.key !== \"\")\n        .map((kvp) => `${kvp.key}=${kvp.value}`)\n        .filter((kvs, i, a) => a.indexOf(kvs) === i);\n      const vl = vlr.join(\"&\");\n      updateField(\"nodeSelectorLabels\", vl);\n    }\n  }, [keyValuePairs, updateField]);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (podAffinity === \"nodeSelector\") {\n      let valid = true;\n\n      const splittedLabels = nodeSelectorLabels.split(\"&\");\n\n      if (splittedLabels.length === 1 && splittedLabels[0] === \"\") {\n        valid = false;\n      }\n\n      splittedLabels.forEach((item: string, index: number) => {\n        const splitItem = item.split(\"=\");\n\n        if (splitItem.length !== 2) {\n          valid = false;\n        }\n\n        if (index + 1 !== splittedLabels.length) {\n          if (splitItem[0] === \"\" || splitItem[1] === \"\") {\n            valid = false;\n          }\n        }\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"labels\",\n          required: true,\n          value: nodeSelectorLabels,\n          customValidation: !valid,\n          customValidationMessage:\n            \"You need to add at least one label key-pair\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPoolPageValid({\n        page: \"affinity\",\n        status: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [dispatch, podAffinity, nodeSelectorLabels]);\n\n  const updateToleration = (index: number, field: string, value: any) => {\n    const alterToleration = { ...tolerations[index], [field]: value };\n\n    dispatch(\n      setPoolTolerationInfo({\n        index: index,\n        tolerationValue: alterToleration,\n      })\n    );\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <H3Section>Pod Placement</H3Section>\n        <span className={classes.descriptionText}>\n          Configure how pods will be assigned to nodes\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <div className={classes.label}>Type</div>\n          <div\n            className={`${classes.descriptionText} ${classes.affinityHelpText}`}\n          >\n            MinIO supports multiple configurations for Pod Affinity\n          </div>\n          <Grid item className={classes.radioField}>\n            <RadioGroupSelector\n              currentSelection={podAffinity}\n              id=\"affinity-options\"\n              name=\"affinity-options\"\n              label={\" \"}\n              onChange={(e) => {\n                updateField(\"podAffinity\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"None\", value: \"none\" },\n                { label: \"Default (Pod Anti-Affinity)\", value: \"default\" },\n                { label: \"Node Selector\", value: \"nodeSelector\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      {podAffinity === \"nodeSelector\" && (\n        <Fragment>\n          <br />\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"with_pod_anti_affinity\"\n              id=\"with_pod_anti_affinity\"\n              name=\"with_pod_anti_affinity\"\n              checked={withPodAntiAffinity}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"withPodAntiAffinity\", checked);\n              }}\n              label={\"With Pod Anti-Affinity\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <h3>Labels</h3>\n            <span className={classes.error}>{validationErrors[\"labels\"]}</span>\n            <Grid container>\n              {keyValuePairs &&\n                keyValuePairs.map((kvp, i) => {\n                  return (\n                    <Grid\n                      item\n                      xs={12}\n                      className={classes.affinityRow}\n                      key={`affinity-keyVal-${i.toString()}`}\n                    >\n                      <Grid item xs={5} className={classes.affinityLabelKey}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const newKey = e.target.value as string;\n                              const newLKP: LabelKeyPair = {\n                                key: newKey,\n                                value: keyValueMap[newKey][0],\n                              };\n                              const arrCp: LabelKeyPair[] = [...keyValuePairs];\n                              arrCp[i] = newLKP;\n                              dispatch(setPoolKeyValuePairs(arrCp));\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.key}\n                            options={keyOptions}\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-key-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.key}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = [...keyValuePairs];\n                              arrCp[i] = {\n                                key: arrCp[i].key,\n                                value: e.target.value as string,\n                              };\n                              dispatch(setPoolKeyValuePairs(arrCp));\n                            }}\n                            index={i}\n                            placeholder={\"Key\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={5} className={classes.affinityLabelValue}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const arrCp: LabelKeyPair[] = [...keyValuePairs];\n                              arrCp[i] = {\n                                key: arrCp[i].key,\n                                value: e.target.value as string,\n                              };\n                              dispatch(setPoolKeyValuePairs(arrCp));\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.value}\n                            options={\n                              keyValueMap[kvp.key]\n                                ? keyValueMap[kvp.key].map((v) => {\n                                    return { label: v, value: v };\n                                  })\n                                : []\n                            }\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-value-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.value}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = [...keyValuePairs];\n                              arrCp[i] = {\n                                key: arrCp[i].key,\n                                value: e.target.value as string,\n                              };\n                              dispatch(setPoolKeyValuePairs(arrCp));\n                            }}\n                            index={i}\n                            placeholder={\"value\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={2} className={classes.rowActions}>\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => {\n                              const arrCp = [...keyValuePairs];\n                              if (keyOptions.length > 0) {\n                                arrCp.push({\n                                  key: keyOptions[0].value,\n                                  value: keyValueMap[keyOptions[0].value][0],\n                                });\n                              } else {\n                                arrCp.push({ key: \"\", value: \"\" });\n                              }\n\n                              dispatch(setPoolKeyValuePairs(arrCp));\n                            }}\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n                        {keyValuePairs.length > 1 && (\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                const arrCp = keyValuePairs.filter(\n                                  (item, index) => index !== i\n                                );\n                                dispatch(setPoolKeyValuePairs(arrCp));\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        )}\n                      </Grid>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Grid>\n        </Fragment>\n      )}\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <h3>Tolerations</h3>\n          <span className={classes.error}>\n            {validationErrors[\"tolerations\"]}\n          </span>\n          <Grid container>\n            {tolerations &&\n              tolerations.map((tol, i) => {\n                return (\n                  <Grid\n                    item\n                    xs={12}\n                    className={classes.affinityRow}\n                    key={`affinity-keyVal-${i.toString()}`}\n                  >\n                    <TolerationSelector\n                      effect={tol.effect}\n                      onEffectChange={(value) => {\n                        updateToleration(i, \"effect\", value);\n                      }}\n                      tolerationKey={tol.key}\n                      onTolerationKeyChange={(value) => {\n                        updateToleration(i, \"key\", value);\n                      }}\n                      operator={tol.operator}\n                      onOperatorChange={(value) => {\n                        updateToleration(i, \"operator\", value);\n                      }}\n                      value={tol.value}\n                      onValueChange={(value) => {\n                        updateToleration(i, \"value\", value);\n                      }}\n                      tolerationSeconds={tol.tolerationSeconds?.seconds || 0}\n                      onSecondsChange={(value) => {\n                        updateToleration(i, \"tolerationSeconds\", {\n                          seconds: value,\n                        });\n                      }}\n                      index={i}\n                    />\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => {\n                          dispatch(addNewPoolToleration());\n                        }}\n                        disabled={i !== tolerations.length - 1}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </div>\n\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => dispatch(removePoolToleration(i))}\n                        disabled={tolerations.length <= 1}\n                      >\n                        <RemoveIcon />\n                      </IconButton>\n                    </div>\n                  </Grid>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(Affinity);\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Button } from \"mds\";\nimport React from \"react\";\nimport { addPoolAsync } from \"./addPoolThunks\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\n\nconst AddPoolCreateButton = () => {\n  const dispatch = useAppDispatch();\n\n  const selectedStorageClass = useSelector(\n    (state: AppState) => state.addPool.setup.storageClass\n  );\n  const validPages = useSelector((state: AppState) => state.addPool.validPages);\n\n  const sending = useSelector((state: AppState) => state.addPool.sending);\n  const requiredPages = [\"setup\", \"affinity\", \"configure\"];\n  const enabled =\n    !sending &&\n    selectedStorageClass !== \"\" &&\n    requiredPages.every((v) => validPages.includes(v));\n  return (\n    <Button\n      id={\"wizard-button-Create\"}\n      variant=\"callAction\"\n      onClick={() => {\n        dispatch(addPoolAsync());\n      }}\n      disabled={!enabled}\n      key={`button-AddTenant-Create`}\n      label={\"Create\"}\n    />\n  );\n};\n\nexport default AddPoolCreateButton;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport { useNavigate } from \"react-router-dom\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport { niceBytes } from \"../../../../../../common/utils\";\nimport { LinearProgress } from \"@mui/material\";\nimport PageLayout from \"../../../../Common/Layout/PageLayout\";\nimport GenericWizard from \"../../../../Common/GenericWizard/GenericWizard\";\nimport { IWizardElement } from \"../../../../Common/GenericWizard/types\";\nimport PoolResources from \"./PoolResources\";\nimport ScreenTitle from \"../../../../Common/ScreenTitle/ScreenTitle\";\nimport { BackLink, TenantsIcon } from \"mds\";\n\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { useSelector } from \"react-redux\";\nimport PoolConfiguration from \"./PoolConfiguration\";\nimport PoolPodPlacement from \"./PoolPodPlacement\";\n\nimport { resetPoolForm } from \"./addPoolSlice\";\nimport AddPoolCreateButton from \"./AddPoolCreateButton\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport PageHeaderWrapper from \"../../../../Common/PageHeaderWrapper/PageHeaderWrapper\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    bottomContainer: {\n      display: \"flex\",\n      flexGrow: 1,\n      alignItems: \"center\",\n      margin: \"auto\",\n      justifyContent: \"center\",\n      \"& div\": {\n        width: 150,\n        \"@media (max-width: 900px)\": {\n          flexFlow: \"column\",\n        },\n      },\n    },\n    pageBox: {\n      border: \"1px solid #EAEAEA\",\n      borderTop: 0,\n    },\n    addPoolTitle: {\n      border: \"1px solid #EAEAEA\",\n      borderBottom: 0,\n    },\n    ...formFieldStyles,\n    ...modalStyleUtils,\n  })\n);\n\nconst AddPool = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const classes = useStyles();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const sending = useSelector((state: AppState) => state.addPool.sending);\n  const navigateTo = useSelector((state: AppState) => state.addPool.navigateTo);\n\n  const poolsURL = `/namespaces/${tenant?.namespace || \"\"}/tenants/${\n    tenant?.name || \"\"\n  }/pools`;\n\n  useEffect(() => {\n    if (navigateTo !== \"\") {\n      const goTo = `${navigateTo}`;\n      dispatch(resetPoolForm());\n      navigate(goTo);\n    }\n  }, [navigateTo, navigate, dispatch]);\n\n  const cancelButton = {\n    label: \"Cancel\",\n    type: \"other\",\n    enabled: true,\n    action: () => {\n      dispatch(resetPoolForm());\n      navigate(poolsURL);\n    },\n  };\n\n  const createButton = {\n    componentRender: <AddPoolCreateButton key={\"add-pool-crate\"} />,\n  };\n\n  const wizardSteps: IWizardElement[] = [\n    {\n      label: \"Setup\",\n      componentRender: <PoolResources />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Configuration\",\n      advancedOnly: true,\n      componentRender: <PoolConfiguration />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Pod Placement\",\n      advancedOnly: true,\n      componentRender: <PoolPodPlacement />,\n      buttons: [cancelButton, createButton],\n    },\n  ];\n\n  return (\n    <Fragment>\n      <Grid item xs={12}>\n        <PageHeaderWrapper\n          label={\n            <Fragment>\n              <BackLink\n                label={`Tenant Pools`}\n                onClick={() => navigate(poolsURL)}\n              />\n            </Fragment>\n          }\n        />\n        <PageLayout>\n          <Grid item xs={12} className={classes.addPoolTitle}>\n            <ScreenTitle\n              icon={<TenantsIcon />}\n              title={`Add New Pool to ${tenant?.name || \"\"}`}\n              subTitle={\n                <Fragment>\n                  Namespace: {tenant?.namespace || \"\"} / Current Capacity:{\" \"}\n                  {niceBytes((tenant?.total_size || 0).toString(10))}\n                </Fragment>\n              }\n            />\n          </Grid>\n          {sending && (\n            <Grid item xs={12}>\n              <LinearProgress />\n            </Grid>\n          )}\n          <Grid item xs={12} className={classes.pageBox}>\n            <GenericWizard wizardSteps={wizardSteps} />\n          </Grid>\n        </PageLayout>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default AddPool;\n"],"names":["withStyles","theme","createStyles","bottomContainer","display","flexGrow","alignItems","margin","justifyContent","width","flexFlow","factorElements","marginLeft","sizeNumber","fontSize","fontWeight","textAlign","sizeDescription","color","formFieldStyles","wizardCommon","classes","dispatch","useAppDispatch","tenant","useSelector","state","tenants","tenantInfo","storageClasses","addPool","numberOfNodes","setup","toString","storageClass","volumeSize","volumesPerServer","useState","validationErrors","setValidationErrors","instanceCapacity","parseInt","totalCapacity","useEffect","customAccountValidation","fieldKey","required","value","customValidation","isNaN","customValidationMessage","commonVal","commonFormValidation","isPoolPageValid","page","status","Object","keys","length","api","namespace","then","res","newStorage","get","map","name","split","label","setPoolField","field","setPoolStorageClasses","catch","err","console","error","setFieldInfo","fieldName","Paper","className","paperWrapper","headerElement","H3Section","descriptionText","Grid","item","xs","formFieldRow","InputBoxWrapper","id","onChange","e","intValue","target","validity","valid","pattern","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","disabled","SelectWrapper","options","niceBytes","configSectionItem","marginRight","border","tenantCustomizationFields","containerItem","fieldGroup","createTenantCommon","paddingTop","marginBottom","responsiveSectionItem","modalBasic","securityContextEnabled","configuration","securityContext","customRuntime","runtimeClassName","updateField","useCallback","runAsUser","runAsGroup","fsGroup","cleanValidation","clearValidationError","FormSwitchWrapper","checked","multiContainer","type","min","runAsNonRoot","sx","marginTop","overlayAction","maxWidth","maxHeight","background","affinityConfigField","affinityFieldLabel","flex","radioField","affinityLabelKey","affinityLabelValue","rowActions","affinityRow","podAffinity","affinity","nodeSelectorLabels","withPodAntiAffinity","keyValuePairs","nodeSelectorPairs","tolerations","loading","setLoading","keyValueMap","setKeyValueMap","keyOptions","setKeyOptions","k","push","setModalErrorSnackMessage","vl","filter","kvp","key","kvs","i","a","indexOf","join","splittedLabels","forEach","index","splitItem","updateToleration","alterToleration","setPoolTolerationInfo","tolerationValue","affinityHelpText","RadioGroupSelector","currentSelection","selectorOptions","Fragment","container","newKey","newLKP","arrCp","setPoolKeyValuePairs","placeholder","v","IconButton","size","onClick","tol","TolerationSelector","effect","onEffectChange","tolerationKey","onTolerationKeyChange","operator","onOperatorChange","onValueChange","tolerationSeconds","seconds","onSecondsChange","addNewPoolToleration","removePoolToleration","selectedStorageClass","validPages","enabled","sending","every","includes","variant","addPoolAsync","useStyles","makeStyles","pageBox","borderTop","addPoolTitle","borderBottom","modalStyleUtils","navigate","useNavigate","navigateTo","poolsURL","goTo","resetPoolForm","cancelButton","action","createButton","componentRender","wizardSteps","buttons","advancedOnly","PoolPodPlacement","PageHeaderWrapper","PageLayout","ScreenTitle","icon","title","subTitle","total_size","LinearProgress","GenericWizard"],"sourceRoot":""}