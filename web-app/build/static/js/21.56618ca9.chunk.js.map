{"version":3,"file":"static/js/21.56618ca9.chunk.js","mappings":"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","sources":["screens/Console/Tenants/LogoComponents.tsx","screens/Console/Tenants/TenantDetails/TenantIdentityProvider.tsx","../node_modules/@mui/icons-material/Add.js","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Grid } from \"@mui/material\";\nimport { LDAPIcon, OIDCIcon, UsersIcon } from \"mds\";\n\nexport const OIDCLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <OIDCIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>Open ID</Grid>\n    </Grid>\n  );\n};\n\nexport const LDAPLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <LDAPIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>LDAP / Active Directory</Grid>\n    </Grid>\n  );\n};\n\nexport const BuiltInLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <UsersIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>Built-in</Grid>\n    </Grid>\n  );\n};\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport {\n  DialogContentText,\n  IconButton,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button, ConfirmModalIcon, Loader } from \"mds\";\nimport Grid from \"@mui/material/Grid\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport {\n  ITenantIdentityProviderResponse,\n  ITenantSetAdministratorsRequest,\n} from \"../types\";\nimport {\n  BuiltInLogoElement,\n  LDAPLogoElement,\n  OIDCLogoElement,\n} from \"../LogoComponents\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport {\n  setErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport api from \"../../../../common/api\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport SectionTitle from \"../../Common/SectionTitle\";\n\ninterface ITenantIdentityProvider {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    adUserDnRows: {\n      display: \"flex\",\n      marginBottom: 10,\n    },\n    buttonTray: {\n      marginLeft: 10,\n      display: \"flex\",\n      height: 38,\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    ...containerForHeader,\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nfunction FormHr() {\n  return null;\n}\n\nconst TenantIdentityProvider = ({ classes }: ITenantIdentityProvider) => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant\n  );\n\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [idpSelection, setIdpSelection] = useState<string>(\"Built-in\");\n  const [openIDConfigurationURL, setOpenIDConfigurationURL] =\n    useState<string>(\"\");\n  const [openIDClientID, setOpenIDClientID] = useState<string>(\"\");\n  const [openIDSecretID, setOpenIDSecretID] = useState<string>(\"\");\n  const [showOIDCSecretID, setShowOIDCSecretID] = useState<boolean>(false);\n  const [openIDCallbackURL, setOpenIDCallbackURL] = useState<string>(\"\");\n  const [openIDClaimName, setOpenIDClaimName] = useState<string>(\"\");\n  const [openIDScopes, setOpenIDScopes] = useState<string>(\"\");\n  const [ADURL, setADURL] = useState<string>(\"\");\n  const [ADLookupBindDN, setADLookupBindDN] = useState<string>(\"\");\n  const [ADLookupBindPassword, setADLookupBindPassword] = useState<string>(\"\");\n  const [showADLookupBindPassword, setShowADLookupBindPassword] =\n    useState<boolean>(false);\n  const [ADUserDNSearchBaseDN, setADUserDNSearchBaseDN] = useState<string>(\"\");\n  const [ADUserDNSearchFilter, setADUserDNSearchFilter] = useState<string>(\"\");\n  const [ADGroupSearchBaseDN, setADGroupSearchBaseDN] = useState<string>(\"\");\n  const [ADGroupSearchFilter, setADGroupSearchFilter] = useState<string>(\"\");\n  const [ADSkipTLS, setADSkipTLS] = useState<boolean>(false);\n  const [ADServerInsecure, setADServerInsecure] = useState<boolean>(false);\n  const [ADServerStartTLS, setADServerStartTLS] = useState<boolean>(false);\n  const [ADUserDNs, setADUserDNs] = useState<string[]>([\"\"]);\n  const [ADGroupDNs, setADGroupDNs] = useState<string[]>([\"\"]);\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let identityProviderValidation: IValidation[] = [];\n\n    if (idpSelection === \"OpenID\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: true,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(identityProviderValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    idpSelection,\n    openIDConfigurationURL,\n    openIDClientID,\n    openIDSecretID,\n    openIDClaimName,\n    ADURL,\n    ADLookupBindDN,\n  ]);\n\n  const getTenantIdentityProviderInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`\n      )\n      .then((res: ITenantIdentityProviderResponse) => {\n        if (res) {\n          if (res.oidc) {\n            setIdpSelection(\"OpenID\");\n            setOpenIDConfigurationURL(res.oidc.configuration_url);\n            setOpenIDClientID(res.oidc.client_id);\n            setOpenIDSecretID(res.oidc.secret_id);\n            setOpenIDCallbackURL(res.oidc.callback_url);\n            setOpenIDClaimName(res.oidc.claim_name);\n            setOpenIDScopes(res.oidc.scopes);\n          } else if (res.active_directory) {\n            setIdpSelection(\"AD\");\n            setADURL(res.active_directory.url);\n            setADLookupBindDN(res.active_directory.lookup_bind_dn);\n            setADLookupBindPassword(res.active_directory.lookup_bind_password);\n            setADUserDNSearchBaseDN(\n              res.active_directory.user_dn_search_base_dn\n            );\n            setADUserDNSearchFilter(res.active_directory.user_dn_search_filter);\n            setADGroupSearchBaseDN(res.active_directory.group_search_base_dn);\n            setADGroupSearchFilter(res.active_directory.group_search_filter);\n            setADSkipTLS(res.active_directory.skip_tls_verification);\n            setADServerInsecure(res.active_directory.server_insecure);\n            setADServerStartTLS(res.active_directory.server_start_tls);\n          }\n        }\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n      });\n  }, [tenant, dispatch]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantIdentityProviderInfo();\n    }\n  }, [tenant, getTenantIdentityProviderInfo]);\n\n  const updateTenantIdentityProvider = () => {\n    setIsSending(true);\n    let payload: ITenantIdentityProviderResponse = {};\n    switch (idpSelection) {\n      case \"AD\":\n        payload.active_directory = {\n          url: ADURL,\n          lookup_bind_dn: ADLookupBindDN,\n          lookup_bind_password: ADLookupBindPassword,\n          user_dn_search_base_dn: ADUserDNSearchBaseDN,\n          user_dn_search_filter: ADUserDNSearchFilter,\n          group_search_base_dn: ADGroupSearchBaseDN,\n          group_search_filter: ADGroupSearchFilter,\n          skip_tls_verification: ADSkipTLS,\n          server_insecure: ADServerInsecure,\n          server_start_tls: ADServerStartTLS,\n        };\n        break;\n      case \"OpenID\":\n        payload.oidc = {\n          configuration_url: openIDConfigurationURL,\n          client_id: openIDClientID,\n          secret_id: openIDSecretID,\n          callback_url: openIDCallbackURL,\n          claim_name: openIDClaimName,\n          scopes: openIDScopes,\n        };\n        break;\n      default:\n      // Built-in IDP will be used by default\n    }\n\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`,\n        payload\n      )\n      .then(() => {\n        setIsSending(false);\n        // Close confirmation modal\n        setDialogOpen(false);\n        getTenantIdentityProviderInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  const setAdministrators = () => {\n    setIsSending(true);\n    let payload: ITenantSetAdministratorsRequest = {};\n    switch (idpSelection) {\n      case \"AD\":\n        payload = {\n          user_dns: ADUserDNs.filter((user) => user.trim() !== \"\"),\n          group_dns: ADGroupDNs.filter((group) => group.trim() !== \"\"),\n        };\n        break;\n      default:\n      // Built-in IDP will be used by default\n    }\n\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/set-administrators`,\n        payload\n      )\n      .then(() => {\n        setIsSending(false);\n        setADGroupDNs([\"\"]);\n        setADUserDNs([\"\"]);\n        getTenantIdentityProviderInfo();\n        dispatch(setSnackBarMessage(`Administrators added successfully`));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <ConfirmDialog\n        title={\"Save and Restart\"}\n        confirmText={\"Restart\"}\n        cancelText=\"Cancel\"\n        titleIcon={<ConfirmModalIcon />}\n        isLoading={isSending}\n        onClose={() => setDialogOpen(false)}\n        isOpen={dialogOpen}\n        onConfirm={updateTenantIdentityProvider}\n        confirmationContent={\n          <DialogContentText>\n            Are you sure you want to save the changes and restart the service?\n          </DialogContentText>\n        }\n      />\n      {loadingTenant ? (\n        <div className={classes.loaderAlign}>\n          <Loader />\n        </div>\n      ) : (\n        <Fragment>\n          <Grid item xs={12}>\n            <h1 className={classes.sectionTitle}>Identity Provider</h1>\n            <FormHr />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            className={classes.protocolRadioOptions}\n            paddingBottom={1}\n          >\n            <RadioGroupSelector\n              currentSelection={idpSelection}\n              id=\"idp-options\"\n              name=\"idp-options\"\n              label=\"Protocol\"\n              onChange={(e) => {\n                setIdpSelection(e.target.value);\n              }}\n              selectorOptions={[\n                { label: <BuiltInLogoElement />, value: \"Built-in\" },\n                { label: <OIDCLogoElement />, value: \"OpenID\" },\n                { label: <LDAPLogoElement />, value: \"AD\" },\n              ]}\n            />\n          </Grid>\n\n          {idpSelection === \"OpenID\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_CONFIGURATION_URL\"\n                  name=\"openID_CONFIGURATION_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDConfigurationURL(e.target.value);\n                    cleanValidation(\"openID_CONFIGURATION_URL\");\n                  }}\n                  label=\"Configuration URL\"\n                  value={openIDConfigurationURL}\n                  placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n                  error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_clientID\"\n                  name=\"openID_clientID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClientID(e.target.value);\n                    cleanValidation(\"openID_clientID\");\n                  }}\n                  label=\"Client ID\"\n                  value={openIDClientID}\n                  error={validationErrors[\"openID_clientID\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type={showOIDCSecretID ? \"text\" : \"password\"}\n                  id=\"openID_secretID\"\n                  name=\"openID_secretID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDSecretID(e.target.value);\n                    cleanValidation(\"openID_secretID\");\n                  }}\n                  label=\"Secret ID\"\n                  value={openIDSecretID}\n                  error={validationErrors[\"openID_secretID\"] || \"\"}\n                  required\n                  overlayIcon={\n                    showOIDCSecretID ? (\n                      <VisibilityOffIcon />\n                    ) : (\n                      <RemoveRedEyeIcon />\n                    )\n                  }\n                  overlayAction={() => setShowOIDCSecretID(!showOIDCSecretID)}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_callbackURL\"\n                  name=\"openID_callbackURL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDCallbackURL(e.target.value);\n                    cleanValidation(\"openID_callbackURL\");\n                  }}\n                  label=\"Callback URL\"\n                  value={openIDCallbackURL}\n                  placeholder=\"https://your-console-endpoint:9443/oauth_callback\"\n                  error={validationErrors[\"openID_callbackURL\"] || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_claimName\"\n                  name=\"openID_claimName\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClaimName(e.target.value);\n                    cleanValidation(\"openID_claimName\");\n                  }}\n                  label=\"Claim Name\"\n                  value={openIDClaimName}\n                  error={validationErrors[\"openID_claimName\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_scopes\"\n                  name=\"openID_scopes\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDScopes(e.target.value);\n                    cleanValidation(\"openID_scopes\");\n                  }}\n                  label=\"Scopes\"\n                  value={openIDScopes}\n                />\n              </Grid>\n            </Fragment>\n          )}\n\n          {idpSelection === \"AD\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"AD_URL\"\n                  name=\"AD_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADURL(e.target.value);\n                    cleanValidation(\"AD_URL\");\n                  }}\n                  label=\"LDAP Server Address\"\n                  value={ADURL}\n                  placeholder=\"ldap-server:636\"\n                  error={validationErrors[\"AD_URL\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_skipTLS\"\n                  id=\"ad_skipTLS\"\n                  name=\"ad_skipTLS\"\n                  checked={ADSkipTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADSkipTLS(checked);\n                  }}\n                  label={\"Skip TLS Verification\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_serverInsecure\"\n                  id=\"ad_serverInsecure\"\n                  name=\"ad_serverInsecure\"\n                  checked={ADServerInsecure}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerInsecure(checked);\n                  }}\n                  label={\"Server Insecure\"}\n                />\n              </Grid>\n              {ADServerInsecure ? (\n                <Grid item xs={12}>\n                  <Typography\n                    className={classes.error}\n                    variant=\"caption\"\n                    display=\"block\"\n                    gutterBottom\n                  >\n                    Warning: All traffic with Active Directory will be\n                    unencrypted\n                  </Typography>\n                  <br />\n                </Grid>\n              ) : null}\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_serverStartTLS\"\n                  id=\"ad_serverStartTLS\"\n                  name=\"ad_serverStartTLS\"\n                  checked={ADServerStartTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerStartTLS(checked);\n                  }}\n                  label={\"Start TLS connection to AD/LDAP server\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_lookupBindDN\"\n                  name=\"ad_lookupBindDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindDN(e.target.value);\n                    cleanValidation(\"ad_lookupBindDN\");\n                  }}\n                  label=\"Lookup Bind DN\"\n                  value={ADLookupBindDN}\n                  placeholder=\"cn=admin,dc=min,dc=io\"\n                  error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type={showADLookupBindPassword ? \"text\" : \"password\"}\n                  id=\"ad_lookupBindPassword\"\n                  name=\"ad_lookupBindPassword\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindPassword(e.target.value);\n                  }}\n                  label=\"Lookup Bind Password\"\n                  value={ADLookupBindPassword}\n                  placeholder=\"admin\"\n                  overlayIcon={\n                    showADLookupBindPassword ? (\n                      <VisibilityOffIcon />\n                    ) : (\n                      <RemoveRedEyeIcon />\n                    )\n                  }\n                  overlayAction={() =>\n                    setShowADLookupBindPassword(!showADLookupBindPassword)\n                  }\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_userDNSearchBaseDN\"\n                  name=\"ad_userDNSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchBaseDN(e.target.value);\n                  }}\n                  label=\"User DN Search Base DN\"\n                  value={ADUserDNSearchBaseDN}\n                  placeholder=\"dc=min,dc=io\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_userDNSearchFilter\"\n                  name=\"ad_userDNSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchFilter(e.target.value);\n                  }}\n                  label=\"User DN Search Filter\"\n                  value={ADUserDNSearchFilter}\n                  placeholder=\"(sAMAcountName=%s)\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_groupSearchBaseDN\"\n                  name=\"ad_groupSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchBaseDN(e.target.value);\n                  }}\n                  label=\"Group Search Base DN\"\n                  value={ADGroupSearchBaseDN}\n                  placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_groupSearchFilter\"\n                  name=\"ad_groupSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchFilter(e.target.value);\n                  }}\n                  label=\"Group Search Filter\"\n                  value={ADGroupSearchFilter}\n                  placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n                />\n              </Grid>\n            </Fragment>\n          )}\n\n          <Grid item xs={12} className={classes.buttonContainer}>\n            <Button\n              id={\"save-idp\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              color=\"primary\"\n              disabled={!isFormValid || isSending}\n              onClick={() => setDialogOpen(true)}\n              label={\"Save\"}\n            />\n          </Grid>\n\n          {idpSelection === \"AD\" && (\n            <Fragment>\n              <SectionTitle>User & Group management</SectionTitle>\n              <br />\n              <fieldset className={classes.fieldGroup}>\n                <legend className={classes.descriptionText}>\n                  List of user DNs (Distinguished Names) to be added as Tenant\n                  Administrators\n                </legend>\n                <Grid item xs={12}>\n                  {ADUserDNs.map((_, index) => {\n                    return (\n                      <Fragment key={`identityField-${index.toString()}`}>\n                        <div className={classes.adUserDnRows}>\n                          <InputBoxWrapper\n                            id={`ad-userdn-${index.toString()}`}\n                            label={\"\"}\n                            placeholder=\"\"\n                            name={`ad-userdn-${index.toString()}`}\n                            value={ADUserDNs[index]}\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) => {\n                              setADUserDNs(\n                                ADUserDNs.map((group, i) =>\n                                  i === index ? e.target.value : group\n                                )\n                              );\n                            }}\n                            index={index}\n                            key={`csv-ad-userdn-${index.toString()}`}\n                            error={\n                              validationErrors[\n                                `ad-userdn-${index.toString()}`\n                              ] || \"\"\n                            }\n                          />\n                          <div className={classes.buttonTray}>\n                            <Tooltip title=\"Add User\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  setADUserDNs([...ADUserDNs, \"\"]);\n                                }}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Remove\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                style={{ marginLeft: 16 }}\n                                onClick={() => {\n                                  if (ADUserDNs.length > 1) {\n                                    setADUserDNs(\n                                      ADUserDNs.filter((_, i) => i !== index)\n                                    );\n                                  }\n                                }}\n                              >\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </div>\n                        </div>\n                      </Fragment>\n                    );\n                  })}\n                </Grid>\n              </fieldset>\n              <fieldset className={classes.fieldGroup}>\n                <legend className={classes.descriptionText}>\n                  List of group DNs (Distinguished Names) to be added as Tenant\n                  Administrators\n                </legend>\n                <Grid item xs={12}>\n                  {ADGroupDNs.map((_, index) => {\n                    return (\n                      <Fragment key={`identityField-${index.toString()}`}>\n                        <div className={classes.adUserDnRows}>\n                          <InputBoxWrapper\n                            id={`ad-groupdn-${index.toString()}`}\n                            label={\"\"}\n                            placeholder=\"\"\n                            name={`ad-groupdn-${index.toString()}`}\n                            value={ADGroupDNs[index]}\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) => {\n                              setADGroupDNs(\n                                ADGroupDNs.map((group, i) =>\n                                  i === index ? e.target.value : group\n                                )\n                              );\n                            }}\n                            index={index}\n                            key={`csv-ad-groupdn-${index.toString()}`}\n                            error={\n                              validationErrors[\n                                `ad-groupdn-${index.toString()}`\n                              ] || \"\"\n                            }\n                          />\n                          <div className={classes.buttonTray}>\n                            <Tooltip title=\"Add Group\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  setADGroupDNs([...ADGroupDNs, \"\"]);\n                                }}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Remove\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                style={{ marginLeft: 16 }}\n                                onClick={() => {\n                                  if (ADGroupDNs.length > 1) {\n                                    setADGroupDNs(\n                                      ADGroupDNs.filter((_, i) => i !== index)\n                                    );\n                                  }\n                                }}\n                              >\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </div>\n                        </div>\n                      </Fragment>\n                    );\n                  })}\n                </Grid>\n              </fieldset>\n              <br />\n              <Grid item xs={12} className={classes.buttonContainer}>\n                <Button\n                  id={\"add-additional-dns\"}\n                  type=\"submit\"\n                  variant=\"callAction\"\n                  disabled={!isFormValid || isSending}\n                  onClick={() => setAdministrators()}\n                  label={\"Add additional DNs\"}\n                />\n              </Grid>\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.loadingTenant,\n  selectedTenant: state.tenants.currentTenant,\n  tenant: state.tenants.tenantInfo,\n});\n\nconst connector = connect(mapState, null);\n\nexport default withStyles(styles)(connector(TenantIdentityProvider));\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;"],"names":["OIDCLogoElement","container","columnGap","width","height","item","LDAPLogoElement","BuiltInLogoElement","FormHr","connector","connect","state","loadingTenant","tenants","selectedTenant","currentTenant","tenant","tenantInfo","withStyles","theme","createStyles","adUserDnRows","display","marginBottom","buttonTray","marginLeft","background","tenantDetailsStyles","spacingUtils","loaderAlign","textAlign","containerForHeader","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","classes","dispatch","useAppDispatch","useSelector","useState","isSending","setIsSending","dialogOpen","setDialogOpen","idpSelection","setIdpSelection","openIDConfigurationURL","setOpenIDConfigurationURL","openIDClientID","setOpenIDClientID","openIDSecretID","setOpenIDSecretID","showOIDCSecretID","setShowOIDCSecretID","openIDCallbackURL","setOpenIDCallbackURL","openIDClaimName","setOpenIDClaimName","openIDScopes","setOpenIDScopes","ADURL","setADURL","ADLookupBindDN","setADLookupBindDN","ADLookupBindPassword","setADLookupBindPassword","showADLookupBindPassword","setShowADLookupBindPassword","ADUserDNSearchBaseDN","setADUserDNSearchBaseDN","ADUserDNSearchFilter","setADUserDNSearchFilter","ADGroupSearchBaseDN","setADGroupSearchBaseDN","ADGroupSearchFilter","setADGroupSearchFilter","ADSkipTLS","setADSkipTLS","ADServerInsecure","setADServerInsecure","ADServerStartTLS","setADServerStartTLS","ADUserDNs","setADUserDNs","ADGroupDNs","setADGroupDNs","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","isFormValid","setIsFormValid","useEffect","identityProviderValidation","fieldKey","required","value","commonVal","commonFormValidation","Object","keys","length","getTenantIdentityProviderInfo","useCallback","api","namespace","name","then","res","oidc","configuration_url","client_id","secret_id","callback_url","claim_name","scopes","active_directory","url","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter","skip_tls_verification","server_insecure","server_start_tls","catch","err","setErrorSnackMessage","title","confirmText","cancelText","titleIcon","isLoading","onClose","isOpen","onConfirm","payload","confirmationContent","className","Fragment","xs","sectionTitle","protocolRadioOptions","paddingBottom","currentSelection","id","label","onChange","e","target","selectorOptions","formFieldRow","placeholder","error","type","overlayIcon","overlayAction","checked","variant","gutterBottom","buttonContainer","color","disabled","onClick","fieldGroup","descriptionText","map","_","index","toString","group","i","size","style","filter","user_dns","user","trim","group_dns","setSnackBarMessage","setAdministrators","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}