{"version":3,"file":"static/js/405.6fef1560.chunk.js","mappings":"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","sources":["screens/Console/Tenants/TenantDetails/TenantConfiguration.tsx"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  AddIcon,\n  Box,\n  Button,\n  ConfirmModalIcon,\n  Grid,\n  IconButton,\n  InputBox,\n  Loader,\n  RemoveIcon,\n  SectionTitle,\n  Switch,\n} from \"mds\";\nimport {\n  ITenantConfigurationRequest,\n  ITenantConfigurationResponse,\n  LabelKeyPair,\n} from \"../types\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { MinIOEnvVarsSettings } from \"../../../../common/utils\";\nimport api from \"../../../../common/api\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\n\nconst TenantConfiguration = () => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant,\n  );\n\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [envVars, setEnvVars] = useState<LabelKeyPair[]>([]);\n  const [envVarsToBeDeleted, setEnvVarsToBeDeleted] = useState<string[]>([]);\n  const [sftpExposed, setSftpEnabled] = useState<boolean>(false);\n\n  const getTenantConfigurationInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/configuration`,\n      )\n      .then((res: ITenantConfigurationResponse) => {\n        if (res.environmentVariables) {\n          setEnvVars(res.environmentVariables);\n          setSftpEnabled(res.sftpExposed);\n        }\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n      });\n  }, [tenant, dispatch]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantConfigurationInfo();\n    }\n  }, [tenant, getTenantConfigurationInfo]);\n\n  const updateTenantConfiguration = () => {\n    setIsSending(true);\n    let payload: ITenantConfigurationRequest = {\n      environmentVariables: envVars.filter((env) => env.key !== \"\"),\n      keysToBeDeleted: envVarsToBeDeleted,\n      sftpExposed: sftpExposed,\n    };\n    api\n      .invoke(\n        \"PATCH\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/configuration`,\n        payload,\n      )\n      .then(() => {\n        setIsSending(false);\n        setDialogOpen(false);\n        getTenantConfigurationInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  return (\n    <Fragment>\n      <ConfirmDialog\n        title={\"Save and Restart\"}\n        confirmText={\"Restart\"}\n        cancelText=\"Cancel\"\n        titleIcon={<ConfirmModalIcon />}\n        isLoading={isSending}\n        onClose={() => setDialogOpen(false)}\n        isOpen={dialogOpen}\n        onConfirm={updateTenantConfiguration}\n        confirmationContent={\n          <Fragment>\n            Are you sure you want to save the changes and restart the service?\n          </Fragment>\n        }\n      />\n      {loadingTenant ? (\n        <Box\n          sx={{\n            textAlign: \"center\",\n          }}\n        >\n          <Loader />\n        </Box>\n      ) : (\n        <Box>\n          <SectionTitle separator sx={{ marginBottom: 15 }}>\n            Configuration\n          </SectionTitle>\n          <Grid\n            container\n            sx={{\n              \"& .envVarRow\": {\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"flex-start\",\n                \"&:last-child\": {\n                  borderBottom: 0,\n                },\n                \"@media (max-width: 900px)\": {\n                  flex: 1,\n\n                  \"& div label\": {\n                    minWidth: 50,\n                  },\n                },\n              },\n              \"& .rowActions\": {\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n                \"@media (max-width: 900px)\": {\n                  flex: 1,\n                },\n              },\n              \"& .overlayAction\": {\n                marginLeft: 10,\n              },\n              \"& .rowItem\": {\n                marginRight: 10,\n                display: \"flex\",\n                \"& div label\": {\n                  minWidth: 50,\n                },\n\n                \"@media (max-width: 900px)\": {\n                  flexFlow: \"column\",\n                },\n              },\n            }}\n          >\n            {envVars.map((envVar, index) => (\n              <Grid\n                item\n                xs={12}\n                className={`envVarRow`}\n                key={`tenant-envVar-${index.toString()}`}\n                sx={{\n                  marginBottom: 15,\n                }}\n              >\n                <Grid item xs={5} className={\"rowItem\"}>\n                  <InputBox\n                    id=\"env_var_key\"\n                    name=\"env_var_key\"\n                    label=\"Key\"\n                    value={envVar.key}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      const existingEnvVars = [...envVars];\n\n                      setEnvVars(\n                        existingEnvVars.map((keyPair, i) =>\n                          i === index\n                            ? { key: e.target.value, value: keyPair.value }\n                            : keyPair,\n                        ),\n                      );\n                    }}\n                    index={index}\n                    key={`env_var_key_${index.toString()}`}\n                  />\n                </Grid>\n                <Grid item xs={5} className={\"rowItem\"}>\n                  <InputBox\n                    id=\"env_var_value\"\n                    name=\"env_var_value\"\n                    label=\"Value\"\n                    value={envVar.value}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      const existingEnvVars = [...envVars];\n                      setEnvVars(\n                        existingEnvVars.map((keyPair, i) =>\n                          i === index\n                            ? { key: keyPair.key, value: e.target.value }\n                            : keyPair,\n                        ),\n                      );\n                    }}\n                    index={index}\n                    key={`env_var_value_${index.toString()}`}\n                    type={\n                      MinIOEnvVarsSettings[envVar.key] &&\n                      MinIOEnvVarsSettings[envVar.key].secret\n                        ? \"password\"\n                        : \"text\"\n                    }\n                  />\n                </Grid>\n                <Grid item xs={2} className={\"rowActions\"}>\n                  <div className={\"overlayAction\"}>\n                    <IconButton\n                      size={\"small\"}\n                      onClick={() => {\n                        const existingEnvVars = [...envVars];\n                        existingEnvVars.push({ key: \"\", value: \"\" });\n\n                        setEnvVars(existingEnvVars);\n                      }}\n                      disabled={index !== envVars.length - 1}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </div>\n                  <div className={\"overlayAction\"}>\n                    <IconButton\n                      size={\"small\"}\n                      onClick={() => {\n                        const existingEnvVars = envVars.filter(\n                          (item, fIndex) => fIndex !== index,\n                        );\n                        setEnvVars(existingEnvVars);\n                        setEnvVarsToBeDeleted([\n                          ...envVarsToBeDeleted,\n                          envVar.key,\n                        ]);\n                      }}\n                      disabled={envVars.length <= 1}\n                    >\n                      <RemoveIcon />\n                    </IconButton>\n                  </div>\n                </Grid>\n              </Grid>\n            ))}\n          </Grid>\n          <Grid container>\n            <Grid\n              item\n              xs={12}\n              sx={{\n                justifyContent: \"end\",\n                textAlign: \"right\",\n                marginBottom: 15,\n              }}\n            >\n              <Switch\n                label={\"SFTP\"}\n                indicatorLabels={[\"Enabled\", \"Disabled\"]}\n                checked={sftpExposed}\n                value={\"expose_sftp\"}\n                id=\"expose-sftp\"\n                name=\"expose-sftp\"\n                onChange={() => {\n                  setSftpEnabled(!sftpExposed);\n                }}\n                description=\"\"\n              />\n            </Grid>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            sx={{ display: \"flex\", justifyContent: \"flex-end\" }}\n          >\n            <Button\n              id={\"save-environment-variables\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={dialogOpen || isSending}\n              onClick={() => setDialogOpen(true)}\n              label={\"Save\"}\n            />\n          </Grid>\n        </Box>\n      )}\n    </Fragment>\n  );\n};\n\nexport default TenantConfiguration;\n"],"names":["TenantConfiguration","dispatch","useAppDispatch","tenant","useSelector","state","tenants","tenantInfo","loadingTenant","isSending","setIsSending","useState","dialogOpen","setDialogOpen","envVars","setEnvVars","envVarsToBeDeleted","setEnvVarsToBeDeleted","sftpExposed","setSftpEnabled","getTenantConfigurationInfo","useCallback","api","invoke","concat","namespace","name","then","res","environmentVariables","catch","err","setErrorSnackMessage","useEffect","_jsxs","Fragment","children","_jsx","ConfirmDialog","title","confirmText","cancelText","titleIcon","ConfirmModalIcon","isLoading","onClose","isOpen","onConfirm","updateTenantConfiguration","payload","filter","env","key","keysToBeDeleted","confirmationContent","Box","sx","textAlign","Loader","SectionTitle","separator","marginBottom","Grid","container","display","alignItems","justifyContent","borderBottom","flex","minWidth","marginLeft","marginRight","flexFlow","map","envVar","index","item","xs","className","InputBox","id","label","value","onChange","e","existingEnvVars","keyPair","i","target","toString","type","MinIOEnvVarsSettings","secret","IconButton","size","onClick","push","disabled","length","AddIcon","fIndex","RemoveIcon","Switch","indicatorLabels","checked","description","Button","variant"],"sourceRoot":""}