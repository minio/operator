{"version":3,"file":"static/js/162.b70180ad.chunk.js","mappings":"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","sources":["screens/Console/Tenants/AddTenant/Steps/Configure.tsx","screens/Console/Tenants/AddTenant/Steps/IdentityProvider/IDPActiveDirectory.tsx","screens/Console/Tenants/AddTenant/Steps/IdentityProvider/IDPOpenID.tsx","screens/Console/Tenants/AddTenant/Steps/IdentityProvider/IDPBuiltIn.tsx","screens/Console/Tenants/AddTenant/Steps/IdentityProvider.tsx","screens/Console/Tenants/AddTenant/Steps/Security.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption/VaultKMSAdd.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption/AzureKMSAdd.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption/GCPKMSAdd.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption/GemaltoKMSAdd.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption/AWSKMSAdd.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption.tsx","screens/Console/Tenants/AddTenant/Steps/Affinity.tsx","screens/Console/Tenants/AddTenant/Steps/Images.tsx","screens/Console/Tenants/AddTenant/Steps/SizePreview.tsx","screens/Console/Tenants/AddTenant/Steps/helpers/AddNamespaceModal.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/NamespaceSelector.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/NameTenantMain.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/TenantResources.tsx","screens/Console/Tenants/AddTenant/common.ts","screens/Console/Tenants/AddTenant/CreateTenantButton.tsx","screens/Console/Tenants/AddTenant/NewTenantCredentials.tsx","screens/Console/Tenants/AddTenant/AddTenant.tsx","screens/Console/Tenants/HelpBox/TLSHelpBox.tsx"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  Box,\n  FormLayout,\n  Grid,\n  IconButton,\n  InputBox,\n  RemoveIcon,\n  Select,\n  Switch,\n  AddIcon,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport {\n  addNewMinIODomain,\n  isPageValid,\n  removeMinIODomain,\n  setEnvVars,\n  updateAddField,\n} from \"../createTenantSlice\";\nimport H3Section from \"../../../Common/H3Section\";\n\nconst ConfigureMain = styled.div(() => ({\n  \"& .configSectionItem\": {\n    marginRight: 15,\n    marginBottom: 15,\n  },\n  \"& .containerItem\": {\n    marginRight: 15,\n  },\n  \"& .responsiveSectionItem\": {\n    \"&.doubleElement\": {\n      display: \"flex\",\n      \"& div\": {\n        flexGrow: 1,\n      },\n    },\n    \"@media (max-width: 900px)\": {\n      flexFlow: \"column\",\n      alignItems: \"flex-start\",\n\n      \"& div > div\": {\n        marginBottom: 5,\n        marginRight: 0,\n      },\n    },\n  },\n  \"& .wrapperContainer\": {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  \"& .envVarRow\": {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    \"&:last-child\": {\n      borderBottom: 0,\n    },\n    \"@media (max-width: 900px)\": {\n      flex: 1,\n\n      \"& div label\": {\n        minWidth: 50,\n      },\n    },\n  },\n  \"& .fileItem\": {\n    marginRight: 10,\n    display: \"flex\",\n    \"& div label\": {\n      minWidth: 50,\n    },\n\n    \"@media (max-width: 900px)\": {\n      flexFlow: \"column\",\n    },\n  },\n  \"& .rowActions\": {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    \"@media (max-width: 900px)\": {\n      flex: 1,\n    },\n  },\n  \"& .overlayAction\": {\n    marginLeft: 10,\n    marginBottom: 15,\n  },\n}));\n\nconst Configure = () => {\n  const dispatch = useAppDispatch();\n\n  const exposeMinIO = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.exposeMinIO,\n  );\n  const exposeConsole = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.exposeConsole,\n  );\n  const exposeSFTP = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.exposeSFTP,\n  );\n  const setDomains = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.setDomains,\n  );\n  const consoleDomain = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.consoleDomain,\n  );\n  const minioDomains = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.minioDomains,\n  );\n  const tenantCustom = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.tenantCustom,\n  );\n  const tenantEnvVars = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.envVars,\n  );\n  const tenantSecurityContext = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.configure.tenantSecurityContext,\n  );\n  const customRuntime = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.customRuntime,\n  );\n  const runtimeClassName = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.runtimeClassName,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"configure\", field: field, value: value }),\n      );\n    },\n    [dispatch],\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n    if (tenantCustom) {\n      customAccountValidation = [\n        {\n          fieldKey: \"tenant_securityContext_runAsUser\",\n          required: true,\n          value: tenantSecurityContext.runAsUser,\n          customValidation:\n            tenantSecurityContext.runAsUser === \"\" ||\n            parseInt(tenantSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_runAsGroup\",\n          required: true,\n          value: tenantSecurityContext.runAsGroup,\n          customValidation:\n            tenantSecurityContext.runAsGroup === \"\" ||\n            parseInt(tenantSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_fsGroup\",\n          required: true,\n          value: tenantSecurityContext.fsGroup!,\n          customValidation:\n            tenantSecurityContext.fsGroup === \"\" ||\n            parseInt(tenantSecurityContext.fsGroup!) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    if (setDomains) {\n      const minioExtraValidations = minioDomains.map((validation, index) => {\n        return {\n          fieldKey: `minio-domain-${index.toString()}`,\n          required: false,\n          value: validation,\n          pattern: /^(https?):\\/\\/([a-zA-Z0-9\\-.]+)(:[0-9]+)?$/,\n          customPatternMessage:\n            \"MinIO domain is not in the form of http|https://subdomain.domain\",\n        };\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        ...minioExtraValidations,\n        {\n          fieldKey: \"console_domain\",\n          required: false,\n          value: consoleDomain,\n          pattern:\n            /^(https?):\\/\\/([a-zA-Z0-9\\-.]+)(:[0-9]+)?(\\/[a-zA-Z0-9\\-./]*)?$/,\n          customPatternMessage:\n            \"Console domain is not in the form of http|https://subdomain.domain:port/subpath1/subpath2\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"configure\",\n        valid: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    dispatch,\n    tenantCustom,\n    tenantSecurityContext,\n    setDomains,\n    consoleDomain,\n    minioDomains,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const updateMinIODomain = (value: string, index: number) => {\n    const copyDomains = [...minioDomains];\n    copyDomains[index] = value;\n\n    updateField(\"minioDomains\", copyDomains);\n  };\n\n  return (\n    <ConfigureMain>\n      <FormLayout withBorders={false} containerPadding={false}>\n        <Box className={\"inputItem\"}>\n          <H3Section>Configure</H3Section>\n          <span className={\"muted\"}>\n            Basic configurations for tenant management\n          </span>\n        </Box>\n        <Box className={\"inputItem\"}>\n          <h4 style={{ margin: \"10px 0px 0px\" }}>Services</h4>\n          <span className={\"muted\"}>\n            Whether the tenant's services should request an external IP via\n            LoadBalancer service type.\n          </span>\n        </Box>\n        <Switch\n          value=\"expose_minio\"\n          id=\"expose_minio\"\n          name=\"expose_minio\"\n          checked={exposeMinIO}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeMinIO\", checked);\n          }}\n          label={\"Expose MinIO Service\"}\n        />\n        <Switch\n          value=\"expose_console\"\n          id=\"expose_console\"\n          name=\"expose_console\"\n          checked={exposeConsole}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeConsole\", checked);\n          }}\n          label={\"Expose Console Service\"}\n        />\n        <Switch\n          value=\"expose_sftp\"\n          id=\"expose_sftp\"\n          name=\"expose_sftp\"\n          checked={exposeSFTP}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeSFTP\", checked);\n          }}\n          label={\"Expose SFTP Service\"}\n        />\n        <Switch\n          value=\"custom_domains\"\n          id=\"custom_domains\"\n          name=\"custom_domains\"\n          checked={setDomains}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"setDomains\", checked);\n          }}\n          label={\"Set Custom Domains\"}\n        />\n        {setDomains && (\n          <Grid item xs={12} className={\"inputItem\"}>\n            <fieldset>\n              <legend>Custom Domains for MinIO</legend>\n              <Grid item xs={12} className={\"configSectionItem\"}>\n                <Box className={\"inputItem\"}>\n                  <InputBox\n                    id=\"console_domain\"\n                    name=\"console_domain\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"consoleDomain\", e.target.value);\n                      cleanValidation(\"tenant_securityContext_runAsUser\");\n                    }}\n                    label=\"Console Domain\"\n                    value={consoleDomain}\n                    placeholder={\n                      \"Eg. http://subdomain.domain:port/subpath1/subpath2\"\n                    }\n                    error={validationErrors[\"console_domain\"] || \"\"}\n                  />\n                </Box>\n                <Box>\n                  <h4>MinIO Domains</h4>\n                  <Box className={\"responsiveSectionItem\"}>\n                    {minioDomains.map((domain, index) => {\n                      return (\n                        <Box\n                          className={`containerItem wrapperContainer`}\n                          key={`minio-domain-key-${index.toString()}`}\n                        >\n                          <InputBox\n                            id={`minio-domain-${index.toString()}`}\n                            name={`minio-domain-${index.toString()}`}\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>,\n                            ) => {\n                              updateMinIODomain(e.target.value, index);\n                            }}\n                            label={`MinIO Domain ${index + 1}`}\n                            value={domain}\n                            placeholder={\"Eg. http://subdomain.domain\"}\n                            error={\n                              validationErrors[\n                                `minio-domain-${index.toString()}`\n                              ] || \"\"\n                            }\n                          />\n                          <Box className={\"overlayAction\"}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => dispatch(addNewMinIODomain())}\n                              disabled={index !== minioDomains.length - 1}\n                            >\n                              <AddIcon />\n                            </IconButton>\n                          </Box>\n\n                          <Box className={\"overlayAction\"}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => dispatch(removeMinIODomain(index))}\n                              disabled={minioDomains.length <= 1}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </Box>\n                        </Box>\n                      );\n                    })}\n                  </Box>\n                </Box>\n              </Grid>\n            </fieldset>\n          </Grid>\n        )}\n\n        <Switch\n          value=\"tenantConfig\"\n          id=\"tenant_configuration\"\n          name=\"tenant_configuration\"\n          checked={tenantCustom}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"tenantCustom\", checked);\n          }}\n          label={\"Security Context\"}\n        />\n        {tenantCustom && (\n          <Grid item xs={12} className={\"inputItem\"}>\n            <fieldset>\n              <legend>Security Context for MinIO</legend>\n              <Grid item xs={12} className={`configSectionItem`}>\n                <Box className={`responsiveSectionItem doubleElement`}>\n                  <Box className={\"containerItem\"}>\n                    <InputBox\n                      type=\"number\"\n                      id=\"tenant_securityContext_runAsUser\"\n                      name=\"tenant_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"tenantSecurityContext\", {\n                          ...tenantSecurityContext,\n                          runAsUser: e.target.value,\n                        });\n                        cleanValidation(\"tenant_securityContext_runAsUser\");\n                      }}\n                      label=\"Run As User\"\n                      value={tenantSecurityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\"tenant_securityContext_runAsUser\"] ||\n                        \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </Box>\n                  <Box className={\"containerItem\"}>\n                    <InputBox\n                      type=\"number\"\n                      id=\"tenant_securityContext_runAsGroup\"\n                      name=\"tenant_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"tenantSecurityContext\", {\n                          ...tenantSecurityContext,\n                          runAsGroup: e.target.value,\n                        });\n                        cleanValidation(\"tenant_securityContext_runAsGroup\");\n                      }}\n                      label=\"Run As Group\"\n                      value={tenantSecurityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\"tenant_securityContext_runAsGroup\"] ||\n                        \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </Box>\n                </Box>\n              </Grid>\n              <br />\n              <Grid item xs={12} className={`configSectionItem`}>\n                <Box className={`responsiveSectionItem doubleElement`}>\n                  <Box className={\"containerItem\"}>\n                    <InputBox\n                      type=\"number\"\n                      id=\"tenant_securityContext_fsGroup\"\n                      name=\"tenant_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"tenantSecurityContext\", {\n                          ...tenantSecurityContext,\n                          fsGroup: e.target.value,\n                        });\n                        cleanValidation(\"tenant_securityContext_fsGroup\");\n                      }}\n                      label=\"FsGroup\"\n                      value={tenantSecurityContext.fsGroup!}\n                      required\n                      error={\n                        validationErrors[\"tenant_securityContext_fsGroup\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </Box>\n                  <Box className={\"containerItem\"}>\n                    <Select\n                      label=\"FsGroupChangePolicy\"\n                      id=\"securityContext_fsGroupChangePolicy\"\n                      name=\"securityContext_fsGroupChangePolicy\"\n                      value={tenantSecurityContext.fsGroupChangePolicy!}\n                      onChange={(value) => {\n                        updateField(\"tenantSecurityContext\", {\n                          ...tenantSecurityContext,\n                          fsGroupChangePolicy: value,\n                        });\n                      }}\n                      options={[\n                        {\n                          label: \"Always\",\n                          value: \"Always\",\n                        },\n                        {\n                          label: \"OnRootMismatch\",\n                          value: \"OnRootMismatch\",\n                        },\n                      ]}\n                    />\n                  </Box>\n                </Box>\n              </Grid>\n              <br />\n              <Grid item xs={12} className={\"configSectionItem\"}>\n                <Switch\n                  value=\"tenantSecurityContextRunAsNonRoot\"\n                  id=\"tenant_securityContext_runAsNonRoot\"\n                  name=\"tenant_securityContext_runAsNonRoot\"\n                  checked={tenantSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"tenantSecurityContext\", {\n                      ...tenantSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </Grid>\n            </fieldset>\n          </Grid>\n        )}\n        <Switch\n          value=\"customRuntime\"\n          id=\"tenant_custom_runtime\"\n          name=\"tenant_custom_runtime\"\n          checked={customRuntime}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"customRuntime\", checked);\n          }}\n          label={\"Custom Runtime Configurations\"}\n        />\n        {customRuntime && (\n          <Grid item xs={12} className={\"inputItem\"}>\n            <fieldset>\n              <legend>Custom Runtime Configurations</legend>\n              <InputBox\n                id=\"tenant_runtime_runtimeClassName\"\n                name=\"tenant_runtime_runtimeClassName\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"runtimeClassName\", e.target.value);\n                  cleanValidation(\"tenant_runtime_runtimeClassName\");\n                }}\n                label=\"Runtime Class Name\"\n                value={runtimeClassName}\n                error={\n                  validationErrors[\"tenant_runtime_runtimeClassName\"] || \"\"\n                }\n              />\n            </fieldset>\n          </Grid>\n        )}\n        <hr />\n\n        <Box className={\"inputItem\"}>\n          <H3Section>Additional Environment Variables</H3Section>\n          <span className={\"muted\"}>\n            Define additional environment variables to be used by your MinIO\n            pods\n          </span>\n        </Box>\n        <Grid container>\n          {tenantEnvVars.map((envVar, index) => (\n            <Grid\n              item\n              xs={12}\n              className={`formFieldRow envVarRow`}\n              key={`tenant-envVar-${index.toString()}`}\n            >\n              <Grid item xs={5} className={\"fileItem\"}>\n                <InputBox\n                  id=\"env_var_key\"\n                  name=\"env_var_key\"\n                  label=\"Key\"\n                  value={envVar.key}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    const existingEnvVars = [...tenantEnvVars];\n                    dispatch(\n                      setEnvVars(\n                        existingEnvVars.map((keyPair, i) =>\n                          i === index\n                            ? { key: e.target.value, value: keyPair.value }\n                            : keyPair,\n                        ),\n                      ),\n                    );\n                  }}\n                  index={index}\n                  key={`env_var_key_${index.toString()}`}\n                />\n              </Grid>\n              <Grid item xs={5} className={\"fileItem\"}>\n                <InputBox\n                  id=\"env_var_value\"\n                  name=\"env_var_value\"\n                  label=\"Value\"\n                  value={envVar.value}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    const existingEnvVars = [...tenantEnvVars];\n                    dispatch(\n                      setEnvVars(\n                        existingEnvVars.map((keyPair, i) =>\n                          i === index\n                            ? { key: keyPair.key, value: e.target.value }\n                            : keyPair,\n                        ),\n                      ),\n                    );\n                  }}\n                  index={index}\n                  key={`env_var_value_${index.toString()}`}\n                />\n              </Grid>\n              <Grid item xs={2} className={\"rowActions\"}>\n                <Box className={\"overlayAction\"}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      const existingEnvVars = [...tenantEnvVars];\n                      existingEnvVars.push({ key: \"\", value: \"\" });\n\n                      dispatch(setEnvVars(existingEnvVars));\n                    }}\n                    disabled={index !== tenantEnvVars.length - 1}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </Box>\n                <Box className={\"overlayAction\"}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      const existingEnvVars = tenantEnvVars.filter(\n                        (item, fIndex) => fIndex !== index,\n                      );\n                      dispatch(setEnvVars(existingEnvVars));\n                    }}\n                    disabled={tenantEnvVars.length <= 1}\n                  >\n                    <RemoveIcon />\n                  </IconButton>\n                </Box>\n              </Grid>\n            </Grid>\n          ))}\n        </Grid>\n      </FormLayout>\n    </ConfigureMain>\n  );\n};\n\nexport default Configure;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport {\n  IconButton,\n  Tooltip,\n  InputBox,\n  Switch,\n  FormLayout,\n  Box,\n  AddIcon,\n  RemoveIcon,\n} from \"mds\";\nimport {\n  addIDPADGroupAtIndex,\n  addIDPADUsrAtIndex,\n  isPageValid,\n  removeIDPADGroupAtIndex,\n  removeIDPADUsrAtIndex,\n  setIDPADGroupAtIndex,\n  setIDPADUsrAtIndex,\n  updateAddField,\n} from \"../../createTenantSlice\";\nimport { useSelector } from \"react-redux\";\nimport { clearValidationError } from \"../../../utils\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\n\nconst IDPActiveDirectory = () => {\n  const dispatch = useAppDispatch();\n\n  const idpSelection = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.idpSelection,\n  );\n  const ADURL = useSelector(\n    (state: AppState) => state.createTenant.fields.identityProvider.ADURL,\n  );\n  const ADSkipTLS = useSelector(\n    (state: AppState) => state.createTenant.fields.identityProvider.ADSkipTLS,\n  );\n  const ADServerInsecure = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.ADServerInsecure,\n  );\n  const ADGroupSearchBaseDN = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.ADGroupSearchBaseDN,\n  );\n  const ADGroupSearchFilter = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.ADGroupSearchFilter,\n  );\n  const ADUserDNs = useSelector(\n    (state: AppState) => state.createTenant.fields.identityProvider.ADUserDNs,\n  );\n  const ADGroupDNs = useSelector(\n    (state: AppState) => state.createTenant.fields.identityProvider.ADGroupDNs,\n  );\n  const ADLookupBindDN = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.ADLookupBindDN,\n  );\n  const ADLookupBindPassword = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.ADLookupBindPassword,\n  );\n  const ADUserDNSearchBaseDN = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.ADUserDNSearchBaseDN,\n  );\n  const ADUserDNSearchFilter = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.ADUserDNSearchFilter,\n  );\n  const ADServerStartTLS = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.ADServerStartTLS,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({\n          pageName: \"identityProvider\",\n          field: field,\n          value: value,\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n  useEffect(() => {\n    let customIDPValidation: IValidation[] = [];\n\n    if (idpSelection === \"AD\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customIDPValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"identityProvider\",\n        valid: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    ADLookupBindDN,\n    idpSelection,\n    ADURL,\n    ADGroupSearchBaseDN,\n    ADGroupSearchFilter,\n    ADUserDNs,\n    ADGroupDNs,\n    dispatch,\n  ]);\n\n  return (\n    <FormLayout\n      withBorders={false}\n      containerPadding={false}\n      sx={{\n        \"& .adUserDnRows\": {\n          display: \"flex\",\n        },\n        \"& .buttonTray\": {\n          display: \"flex\",\n          gap: 10,\n          alignItems: \"center\",\n          marginLeft: 10,\n          marginBottom: 10,\n        },\n      }}\n    >\n      <InputBox\n        id=\"AD_URL\"\n        name=\"AD_URL\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"ADURL\", e.target.value);\n          cleanValidation(\"AD_URL\");\n        }}\n        label=\"LDAP Server Address\"\n        value={ADURL}\n        placeholder=\"ldap-server:636\"\n        error={validationErrors[\"AD_URL\"] || \"\"}\n        required\n      />\n      <Switch\n        value=\"ad_skipTLS\"\n        id=\"ad_skipTLS\"\n        name=\"ad_skipTLS\"\n        checked={ADSkipTLS}\n        onChange={(e) => {\n          const targetD = e.target;\n          const checked = targetD.checked;\n          updateField(\"ADSkipTLS\", checked);\n        }}\n        label={\"Skip TLS Verification\"}\n      />\n      <Switch\n        value=\"ad_serverInsecure\"\n        id=\"ad_serverInsecure\"\n        name=\"ad_serverInsecure\"\n        checked={ADServerInsecure}\n        onChange={(e) => {\n          const targetD = e.target;\n          const checked = targetD.checked;\n          updateField(\"ADServerInsecure\", checked);\n        }}\n        label={\"Server Insecure\"}\n      />\n      {ADServerInsecure ? (\n        <Box className={\"inputItem\"}>\n          <span className={\"error\"}>\n            Warning: All traffic with Active Directory will be unencrypted\n          </span>\n          <br />\n        </Box>\n      ) : null}\n      <Switch\n        value=\"ad_serverStartTLS\"\n        id=\"ad_serverStartTLS\"\n        name=\"ad_serverStartTLS\"\n        checked={ADServerStartTLS}\n        onChange={(e) => {\n          const targetD = e.target;\n          const checked = targetD.checked;\n          updateField(\"ADServerStartTLS\", checked);\n        }}\n        label={\"Start TLS connection to AD/LDAP server\"}\n      />\n      <InputBox\n        id=\"ad_lookupBindDN\"\n        name=\"ad_lookupBindDN\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"ADLookupBindDN\", e.target.value);\n          cleanValidation(\"ad_lookupBindDN\");\n        }}\n        label=\"Lookup Bind DN\"\n        value={ADLookupBindDN}\n        placeholder=\"cn=admin,dc=min,dc=io\"\n        error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n        required\n      />\n      <InputBox\n        id=\"ad_lookupBindPassword\"\n        name=\"ad_lookupBindPassword\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"ADLookupBindPassword\", e.target.value);\n        }}\n        label=\"Lookup Bind Password\"\n        value={ADLookupBindPassword}\n        placeholder=\"admin\"\n      />\n      <InputBox\n        id=\"ad_userDNSearchBaseDN\"\n        name=\"ad_userDNSearchBaseDN\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"ADUserDNSearchBaseDN\", e.target.value);\n        }}\n        label=\"User DN Search Base DN\"\n        value={ADUserDNSearchBaseDN}\n        placeholder=\"dc=min,dc=io\"\n      />\n      <InputBox\n        id=\"ad_userDNSearchFilter\"\n        name=\"ad_userDNSearchFilter\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"ADUserDNSearchFilter\", e.target.value);\n        }}\n        label=\"User DN Search Filter\"\n        value={ADUserDNSearchFilter}\n        placeholder=\"(sAMAcountName=%s)\"\n      />\n      <InputBox\n        id=\"ad_groupSearchBaseDN\"\n        name=\"ad_groupSearchBaseDN\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"ADGroupSearchBaseDN\", e.target.value);\n        }}\n        label=\"Group Search Base DN\"\n        value={ADGroupSearchBaseDN}\n        placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n      />\n      <InputBox\n        id=\"ad_groupSearchFilter\"\n        name=\"ad_groupSearchFilter\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"ADGroupSearchFilter\", e.target.value);\n        }}\n        label=\"Group Search Filter\"\n        value={ADGroupSearchFilter}\n        placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n      />\n      <fieldset className=\"inputItem\" style={{ marginTop: 10 }}>\n        <legend>\n          List of user DNs (Distinguished Names) to be Tenant Administrators\n        </legend>\n        {ADUserDNs.map((_, index) => {\n          return (\n            <Fragment key={`identityField-${index.toString()}`}>\n              <Box className={\"adUserDnRows\"}>\n                <InputBox\n                  id={`ad-userdn-${index.toString()}`}\n                  label={\"\"}\n                  placeholder=\"\"\n                  name={`ad-userdn-${index.toString()}`}\n                  value={ADUserDNs[index]}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    dispatch(\n                      setIDPADUsrAtIndex({\n                        index: index,\n                        userDN: e.target.value,\n                      }),\n                    );\n                    cleanValidation(`ad-userdn-${index.toString()}`);\n                  }}\n                  index={index}\n                  key={`csv-ad-userdn-${index.toString()}`}\n                  error={\n                    validationErrors[`ad-userdn-${index.toString()}`] || \"\"\n                  }\n                />\n                <Box className={\"buttonTray\"}>\n                  <Tooltip tooltip=\"Add User\" aria-label=\"add\">\n                    <IconButton\n                      size={\"small\"}\n                      onClick={() => {\n                        dispatch(addIDPADUsrAtIndex());\n                      }}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip tooltip=\"Remove\" aria-label=\"add\">\n                    <IconButton\n                      size={\"small\"}\n                      onClick={() => {\n                        if (ADUserDNs.length > 1) {\n                          dispatch(removeIDPADUsrAtIndex(index));\n                        }\n                      }}\n                    >\n                      <RemoveIcon />\n                    </IconButton>\n                  </Tooltip>\n                </Box>\n              </Box>\n            </Fragment>\n          );\n        })}\n      </fieldset>\n      <fieldset className=\"inputItem\">\n        <legend>\n          List of group DNs (Distinguished Names) to be Tenant Administrators\n        </legend>\n        {ADGroupDNs.map((_, index) => {\n          return (\n            <Fragment key={`identityField-${index.toString()}`}>\n              <Box className={\"adUserDnRows\"}>\n                <InputBox\n                  id={`ad-groupdn-${index.toString()}`}\n                  label={\"\"}\n                  placeholder=\"\"\n                  name={`ad-groupdn-${index.toString()}`}\n                  value={ADGroupDNs[index]}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    dispatch(\n                      setIDPADGroupAtIndex({\n                        index: index,\n                        userDN: e.target.value,\n                      }),\n                    );\n                    cleanValidation(`ad-groupdn-${index.toString()}`);\n                  }}\n                  index={index}\n                  key={`csv-ad-groupdn-${index.toString()}`}\n                  error={\n                    validationErrors[`ad-groupdn-${index.toString()}`] || \"\"\n                  }\n                />\n                <Box className={\"buttonTray\"}>\n                  <Tooltip tooltip=\"Add Group\" aria-label=\"add\">\n                    <IconButton\n                      size={\"small\"}\n                      onClick={() => {\n                        dispatch(addIDPADGroupAtIndex());\n                      }}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip tooltip=\"Remove\" aria-label=\"add\">\n                    <IconButton\n                      size={\"small\"}\n                      onClick={() => {\n                        if (ADGroupDNs.length > 1) {\n                          dispatch(removeIDPADGroupAtIndex(index));\n                        }\n                      }}\n                    >\n                      <RemoveIcon />\n                    </IconButton>\n                  </Tooltip>\n                </Box>\n              </Box>\n            </Fragment>\n          );\n        })}\n      </fieldset>\n    </FormLayout>\n  );\n};\n\nexport default IDPActiveDirectory;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { FormLayout, InputBox } from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { isPageValid, updateAddField } from \"../../createTenantSlice\";\nimport { clearValidationError } from \"../../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\n\nconst IDPOpenID = () => {\n  const dispatch = useAppDispatch();\n\n  const idpSelection = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.idpSelection,\n  );\n  const openIDConfigurationURL = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.openIDConfigurationURL,\n  );\n  const openIDClientID = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.openIDClientID,\n  );\n  const openIDSecretID = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.openIDSecretID,\n  );\n  const openIDClaimName = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.openIDClaimName,\n  );\n  const openIDScopes = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.openIDScopes,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({\n          pageName: \"identityProvider\",\n          field: field,\n          value: value,\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n  useEffect(() => {\n    let customIDPValidation: IValidation[] = [];\n\n    if (idpSelection === \"OpenID\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: false,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customIDPValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"identityProvider\",\n        valid: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    idpSelection,\n    openIDClientID,\n    openIDSecretID,\n    openIDConfigurationURL,\n    openIDClaimName,\n    dispatch,\n  ]);\n\n  return (\n    <FormLayout withBorders={false} containerPadding={false}>\n      <InputBox\n        id=\"openID_CONFIGURATION_URL\"\n        name=\"openID_CONFIGURATION_URL\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"openIDConfigurationURL\", e.target.value);\n          cleanValidation(\"openID_CONFIGURATION_URL\");\n        }}\n        label=\"Configuration URL\"\n        value={openIDConfigurationURL}\n        placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n        error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n        required\n      />\n      <InputBox\n        id=\"openID_clientID\"\n        name=\"openID_clientID\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"openIDClientID\", e.target.value);\n          cleanValidation(\"openID_clientID\");\n        }}\n        label=\"Client ID\"\n        value={openIDClientID}\n        error={validationErrors[\"openID_clientID\"] || \"\"}\n        required\n      />\n      <InputBox\n        id=\"openID_secretID\"\n        name=\"openID_secretID\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"openIDSecretID\", e.target.value);\n          cleanValidation(\"openID_secretID\");\n        }}\n        label=\"Secret ID\"\n        value={openIDSecretID}\n        error={validationErrors[\"openID_secretID\"] || \"\"}\n        required\n      />\n      <InputBox\n        id=\"openID_claimName\"\n        name=\"openID_claimName\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"openIDClaimName\", e.target.value);\n          cleanValidation(\"openID_claimName\");\n        }}\n        label=\"Claim Name\"\n        value={openIDClaimName}\n        placeholder=\"policy\"\n        error={validationErrors[\"openID_claimName\"] || \"\"}\n      />\n      <InputBox\n        id=\"openID_scopes\"\n        name=\"openID_scopes\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"openIDScopes\", e.target.value);\n          cleanValidation(\"openID_scopes\");\n        }}\n        label=\"Scopes\"\n        value={openIDScopes}\n      />\n    </FormLayout>\n  );\n};\n\nexport default IDPOpenID;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  IconButton,\n  Tooltip,\n  InputBox,\n  AddIcon,\n  RemoveIcon,\n  Box,\n  ShuffleIcon,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport {\n  addIDPNewKeyPair,\n  isPageValid,\n  removeIDPKeyPairAtIndex,\n  setIDPPwdAtIndex,\n  setIDPUsrAtIndex,\n} from \"../../createTenantSlice\";\nimport { clearValidationError, getRandomString } from \"../../../utils\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\n\nconst IDPBuiltIn = () => {\n  const dispatch = useAppDispatch();\n\n  const idpSelection = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.idpSelection,\n  );\n  const accessKeys = useSelector(\n    (state: AppState) => state.createTenant.fields.identityProvider.accessKeys,\n  );\n  const secretKeys = useSelector(\n    (state: AppState) => state.createTenant.fields.identityProvider.secretKeys,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n  useEffect(() => {\n    let customIDPValidation: IValidation[] = [];\n\n    if (idpSelection === \"Built-in\") {\n      customIDPValidation = [...customIDPValidation];\n      for (var i = 0; i < accessKeys.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `accesskey-${i.toString()}`,\n          required: true,\n          value: accessKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n        customIDPValidation.push({\n          fieldKey: `secretkey-${i.toString()}`,\n          required: true,\n          value: secretKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n      }\n    }\n\n    const commonVal = commonFormValidation(customIDPValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"identityProvider\",\n        valid: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [idpSelection, accessKeys, secretKeys, dispatch]);\n\n  return (\n    <Fragment>\n      Add additional users\n      {accessKeys.map((_, index) => {\n        return (\n          <Fragment key={`identityField-${index.toString()}`}>\n            <Box\n              sx={{\n                gridTemplateColumns: \"auto auto 50px 50px\",\n                display: \"grid\",\n                gap: 10,\n                marginBottom: 10,\n              }}\n            >\n              <InputBox\n                id={`accesskey-${index.toString()}`}\n                label={\"\"}\n                placeholder={\"Access Key\"}\n                name={`accesskey-${index.toString()}`}\n                value={accessKeys[index]}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch(\n                    setIDPUsrAtIndex({\n                      index,\n                      accessKey: e.target.value,\n                    }),\n                  );\n                  cleanValidation(`accesskey-${index.toString()}`);\n                }}\n                index={index}\n                key={`csv-accesskey-${index.toString()}`}\n                error={validationErrors[`accesskey-${index.toString()}`] || \"\"}\n              />\n              <InputBox\n                id={`secretkey-${index.toString()}`}\n                label={\"\"}\n                placeholder={\"Secret Key\"}\n                name={`secretkey-${index.toString()}`}\n                value={secretKeys[index]}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch(\n                    setIDPPwdAtIndex({\n                      index,\n                      secretKey: e.target.value,\n                    }),\n                  );\n                  cleanValidation(`secretkey-${index.toString()}`);\n                }}\n                index={index}\n                key={`csv-secretkey-${index.toString()}`}\n                error={validationErrors[`secretkey-${index.toString()}`] || \"\"}\n              />\n              <Box\n                sx={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  gap: 10,\n                  height: 38,\n                }}\n              >\n                <IconButton\n                  size={\"small\"}\n                  onClick={() => {\n                    dispatch(addIDPNewKeyPair());\n                  }}\n                  disabled={index !== accessKeys.length - 1}\n                >\n                  <AddIcon />\n                </IconButton>\n                <IconButton\n                  size={\"small\"}\n                  onClick={() => {\n                    dispatch(removeIDPKeyPairAtIndex(index));\n                  }}\n                  disabled={accessKeys.length <= 1}\n                >\n                  <RemoveIcon />\n                </IconButton>\n                <Tooltip tooltip=\"Randomize Credentials\" aria-label=\"add\">\n                  <IconButton\n                    onClick={() => {\n                      dispatch(\n                        setIDPUsrAtIndex({\n                          index,\n                          accessKey: getRandomString(16),\n                        }),\n                      );\n                      dispatch(\n                        setIDPPwdAtIndex({\n                          index,\n                          secretKey: getRandomString(16),\n                        }),\n                      );\n                    }}\n                    size={\"small\"}\n                  >\n                    <ShuffleIcon />\n                  </IconButton>\n                </Tooltip>\n              </Box>\n            </Box>\n          </Fragment>\n        );\n      })}\n    </Fragment>\n  );\n};\n\nexport default IDPBuiltIn;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport {\n  Box,\n  FormLayout,\n  Grid,\n  LDAPIcon,\n  OIDCIcon,\n  RadioGroup,\n  UsersIcon,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../../store\";\nimport { setIDP } from \"../createTenantSlice\";\nimport IDPActiveDirectory from \"./IdentityProvider/IDPActiveDirectory\";\nimport IDPOpenID from \"./IdentityProvider/IDPOpenID\";\nimport IDPBuiltIn from \"./IdentityProvider/IDPBuiltIn\";\nimport H3Section from \"../../../Common/H3Section\";\n\nconst IdentityProvider = () => {\n  const dispatch = useAppDispatch();\n\n  const idpSelection = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.identityProvider.idpSelection,\n  );\n\n  return (\n    <FormLayout withBorders={false} containerPadding={false}>\n      <Box className={\"inputItem\"}>\n        <H3Section>Identity Provider</H3Section>\n        <span className={\"muted\"}>\n          Access to the tenant can be controlled via an external Identity\n          Manager.\n        </span>\n      </Box>\n      <Grid item xs={12} sx={{ padding: 10 }}>\n        <RadioGroup\n          currentValue={idpSelection}\n          id=\"idp-options\"\n          name=\"idp-options\"\n          label=\"Protocol\"\n          onChange={(e) => {\n            dispatch(setIDP(e.target.value));\n          }}\n          selectorOptions={[\n            { label: \"Built-in\", value: \"Built-in\", icon: <UsersIcon /> },\n            { label: \"Open ID\", value: \"OpenID\", icon: <OIDCIcon /> },\n            {\n              label: \"LDAP / Active Directory\",\n              value: \"AD\",\n              icon: <LDAPIcon />,\n            },\n          ]}\n        />\n      </Grid>\n      {idpSelection === \"Built-in\" && <IDPBuiltIn />}\n      {idpSelection === \"OpenID\" && <IDPOpenID />}\n      {idpSelection === \"AD\" && <IDPActiveDirectory />}\n    </FormLayout>\n  );\n};\n\nexport default IdentityProvider;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect } from \"react\";\nimport {\n  AddIcon,\n  Box,\n  breakPoints,\n  FileSelector,\n  FormLayout,\n  Grid,\n  IconButton,\n  RemoveIcon,\n  Switch,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport get from \"lodash/get\";\nimport styled from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../../store\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport {\n  addCaCertificate,\n  addClientKeyPair,\n  addFileToCaCertificates,\n  addFileToClientKeyPair,\n  addFileToKeyPair,\n  addKeyPair,\n  deleteCaCertificate,\n  deleteClientKeyPair,\n  deleteKeyPair,\n  isPageValid,\n  updateAddField,\n} from \"../createTenantSlice\";\nimport TLSHelpBox from \"../../HelpBox/TLSHelpBox\";\nimport H3Section from \"../../../Common/H3Section\";\n\nconst CertificateRow = styled.div(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"flex-start\",\n  padding: 8,\n  borderBottom: `1px solid ${get(theme, \"borderColor\", \"#E2E2E2\")}`,\n  \"& .fileItem\": {\n    display: \"flex\",\n    \"& .inputItem:not(:last-of-type)\": {\n      marginBottom: 0,\n    },\n    [`@media (max-width: ${breakPoints.md}px)`]: {\n      flexFlow: \"column\",\n      \"& .inputItem:not(:last-of-type)\": {\n        marginBottom: 10,\n      },\n    },\n  },\n  \"& .rowActions\": {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    gap: 10,\n    \"@media (max-width: 900px)\": {\n      flex: 1,\n    },\n  },\n}));\n\nconst Security = () => {\n  const dispatch = useAppDispatch();\n\n  const enableTLS = useSelector(\n    (state: AppState) => state.createTenant.fields.security.enableTLS,\n  );\n  const enableAutoCert = useSelector(\n    (state: AppState) => state.createTenant.fields.security.enableAutoCert,\n  );\n  const enableCustomCerts = useSelector(\n    (state: AppState) => state.createTenant.fields.security.enableCustomCerts,\n  );\n  const minioCertificates = useSelector(\n    (state: AppState) =>\n      state.createTenant.certificates.minioServerCertificates,\n  );\n  const minioClientCertificates = useSelector(\n    (state: AppState) =>\n      state.createTenant.certificates.minioClientCertificates,\n  );\n  const caCertificates = useSelector(\n    (state: AppState) => state.createTenant.certificates.minioCAsCertificates,\n  );\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"security\", field: field, value: value }),\n      );\n    },\n    [dispatch],\n  );\n\n  // Validation\n\n  useEffect(() => {\n    if (!enableTLS) {\n      dispatch(isPageValid({ pageName: \"security\", valid: true }));\n      return;\n    }\n    if (enableAutoCert) {\n      dispatch(isPageValid({ pageName: \"security\", valid: true }));\n      return;\n    }\n    if (enableCustomCerts) {\n      dispatch(isPageValid({ pageName: \"security\", valid: true }));\n      return;\n    }\n    dispatch(isPageValid({ pageName: \"security\", valid: false }));\n  }, [enableTLS, enableAutoCert, enableCustomCerts, dispatch]);\n\n  return (\n    <FormLayout withBorders={false} containerPadding={false}>\n      <Box className={\"inputItem\"}>\n        <H3Section>Security</H3Section>\n      </Box>\n      <Switch\n        value=\"enableTLS\"\n        id=\"enableTLS\"\n        name=\"enableTLS\"\n        checked={enableTLS}\n        onChange={(e) => {\n          const targetD = e.target;\n          const checked = targetD.checked;\n\n          updateField(\"enableTLS\", checked);\n        }}\n        label={\"TLS\"}\n        description={\n          \"Securing all the traffic using TLS. This is required for Encryption Configuration\"\n        }\n      />\n      {enableTLS && (\n        <Fragment>\n          <Switch\n            value=\"enableAutoCert\"\n            id=\"enableAutoCert\"\n            name=\"enableAutoCert\"\n            checked={enableAutoCert}\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n              updateField(\"enableAutoCert\", checked);\n            }}\n            label={\"AutoCert\"}\n            description={\n              \"The internode certificates will be generated and managed by MinIO Operator\"\n            }\n          />\n          <Switch\n            value=\"enableCustomCerts\"\n            id=\"enableCustomCerts\"\n            name=\"enableCustomCerts\"\n            checked={enableCustomCerts}\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n              updateField(\"enableCustomCerts\", checked);\n            }}\n            label={\"Custom Certificates\"}\n            description={\"Certificates used to terminated TLS at MinIO\"}\n          />\n          {enableCustomCerts && (\n            <Fragment>\n              {!enableAutoCert && <TLSHelpBox />}\n              <fieldset className=\"inputItem\">\n                <legend>MinIO Server Certificates</legend>\n\n                {minioCertificates.map((keyPair: KeyPair, index) => (\n                  <CertificateRow key={`minio-certs-${keyPair.id}`}>\n                    <Grid item xs={10} className={\"fileItem\"}>\n                      <FileSelector\n                        onChange={(e, fileName, encodedValue) => {\n                          if (encodedValue) {\n                            dispatch(\n                              addFileToKeyPair({\n                                id: keyPair.id,\n                                key: \"cert\",\n                                fileName: fileName,\n                                value: encodedValue,\n                              }),\n                            );\n                          }\n                        }}\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"tlsCert\"\n                        name=\"tlsCert\"\n                        label=\"Cert\"\n                        value={keyPair.cert}\n                        returnEncodedData\n                      />\n                      <FileSelector\n                        onChange={(event, fileName, encodedValue) => {\n                          if (encodedValue) {\n                            dispatch(\n                              addFileToKeyPair({\n                                id: keyPair.id,\n                                key: \"key\",\n                                fileName: fileName,\n                                value: encodedValue,\n                              }),\n                            );\n                          }\n                        }}\n                        accept=\".key,.pem\"\n                        id=\"tlsKey\"\n                        name=\"tlsKey\"\n                        label=\"Key\"\n                        value={keyPair.key}\n                        returnEncodedData\n                      />\n                    </Grid>\n\n                    <Grid item xs={2} className={\"rowActions\"}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => {\n                          dispatch(addKeyPair());\n                        }}\n                        disabled={index !== minioCertificates.length - 1}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => {\n                          dispatch(deleteKeyPair(keyPair.id));\n                        }}\n                        disabled={minioCertificates.length <= 1}\n                      >\n                        <RemoveIcon />\n                      </IconButton>\n                    </Grid>\n                  </CertificateRow>\n                ))}\n              </fieldset>\n              <fieldset className=\"inputItem\">\n                <legend>MinIO Client Certificates</legend>\n                {minioClientCertificates.map((keyPair: KeyPair, index) => (\n                  <CertificateRow key={`minio-certs-${keyPair.id}`}>\n                    <Grid item xs={10} className={\"fileItem\"}>\n                      <FileSelector\n                        onChange={(event, fileName, encodedValue) => {\n                          if (encodedValue) {\n                            dispatch(\n                              addFileToClientKeyPair({\n                                id: keyPair.id,\n                                key: \"cert\",\n                                fileName: fileName,\n                                value: encodedValue,\n                              }),\n                            );\n                          }\n                        }}\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"tlsCert\"\n                        name=\"tlsCert\"\n                        label=\"Cert\"\n                        value={keyPair.cert}\n                        returnEncodedData\n                      />\n                      <FileSelector\n                        onChange={(event, fileName, encodedValue) => {\n                          if (encodedValue) {\n                            dispatch(\n                              addFileToClientKeyPair({\n                                id: keyPair.id,\n                                key: \"key\",\n                                fileName: fileName,\n                                value: encodedValue,\n                              }),\n                            );\n                          }\n                        }}\n                        accept=\".key,.pem\"\n                        id=\"tlsKey\"\n                        name=\"tlsKey\"\n                        label=\"Key\"\n                        value={keyPair.key}\n                        returnEncodedData\n                      />\n                    </Grid>\n\n                    <Grid item xs={2} className={\"rowActions\"}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => {\n                          dispatch(addClientKeyPair());\n                        }}\n                        disabled={index !== minioClientCertificates.length - 1}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => {\n                          dispatch(deleteClientKeyPair(keyPair.id));\n                        }}\n                        disabled={minioClientCertificates.length <= 1}\n                      >\n                        <RemoveIcon />\n                      </IconButton>\n                    </Grid>\n                  </CertificateRow>\n                ))}\n              </fieldset>\n              <fieldset className=\"inputItem\">\n                <legend>MinIO CA Certificates</legend>\n                {caCertificates.map((keyPair: KeyPair, index) => (\n                  <CertificateRow key={`minio-CA-certs-${keyPair.id}`}>\n                    <Grid item xs={6} className={\"fileItem\"}>\n                      <FileSelector\n                        onChange={(event, fileName, encodedValue) => {\n                          if (encodedValue) {\n                            dispatch(\n                              addFileToCaCertificates({\n                                id: keyPair.id,\n                                key: \"cert\",\n                                fileName: fileName,\n                                value: encodedValue,\n                              }),\n                            );\n                          }\n                        }}\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"tlsCert\"\n                        name=\"tlsCert\"\n                        label=\"Cert\"\n                        value={keyPair.cert}\n                        returnEncodedData\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <div className={\"rowActions\"}>\n                        <IconButton\n                          size={\"small\"}\n                          onClick={() => {\n                            dispatch(addCaCertificate());\n                          }}\n                          disabled={index !== caCertificates.length - 1}\n                        >\n                          <AddIcon />\n                        </IconButton>\n                        <IconButton\n                          size={\"small\"}\n                          onClick={() => {\n                            dispatch(deleteCaCertificate(keyPair.id));\n                          }}\n                          disabled={caCertificates.length <= 1}\n                        >\n                          <RemoveIcon />\n                        </IconButton>\n                      </div>\n                    </Grid>\n                  </CertificateRow>\n                ))}\n              </fieldset>\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </FormLayout>\n  );\n};\n\nexport default Security;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputBox } from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { isPageValid, updateAddField } from \"../../createTenantSlice\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../../../utils\";\n\nconst VaultKMSAdd = () => {\n  const dispatch = useAppDispatch();\n\n  const encryptionTab = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.encryptionTab,\n  );\n  const vaultEndpoint = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.vaultEndpoint,\n  );\n  const vaultEngine = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.vaultEngine,\n  );\n  const vaultNamespace = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.vaultNamespace,\n  );\n  const vaultPrefix = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.vaultPrefix,\n  );\n  const vaultAppRoleEngine = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.encryption.vaultAppRoleEngine,\n  );\n  const vaultId = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.vaultId,\n  );\n  const vaultSecret = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.vaultSecret,\n  );\n  const vaultRetry = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.vaultRetry,\n  );\n  const vaultPing = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.vaultPing,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (!encryptionTab) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"vault_endpoint\",\n          required: true,\n          value: vaultEndpoint,\n        },\n        {\n          fieldKey: \"vault_id\",\n          required: true,\n          value: vaultId,\n        },\n        {\n          fieldKey: \"vault_secret\",\n          required: true,\n          value: vaultSecret,\n        },\n        {\n          fieldKey: \"vault_ping\",\n          required: false,\n          value: vaultPing,\n          customValidation: parseInt(vaultPing) < 0,\n          customValidationMessage: \"Value needs to be 0 or greater\",\n        },\n        {\n          fieldKey: \"vault_retry\",\n          required: false,\n          value: vaultRetry,\n          customValidation: parseInt(vaultRetry) < 0,\n          customValidationMessage: \"Value needs to be 0 or greater\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"encryption\",\n        valid: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    encryptionTab,\n    vaultEndpoint,\n    vaultEngine,\n    vaultId,\n    vaultSecret,\n    vaultPing,\n    vaultRetry,\n    dispatch,\n  ]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"encryption\", field: field, value: value }),\n      );\n    },\n    [dispatch],\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Fragment>\n      <InputBox\n        id=\"vault_endpoint\"\n        name=\"vault_endpoint\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"vaultEndpoint\", e.target.value);\n          cleanValidation(\"vault_endpoint\");\n        }}\n        label=\"Endpoint\"\n        tooltip=\"Endpoint is the Hashicorp Vault endpoint\"\n        value={vaultEndpoint}\n        error={validationErrors[\"vault_endpoint\"] || \"\"}\n        required\n      />\n      <InputBox\n        id=\"vault_engine\"\n        name=\"vault_engine\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"vaultEngine\", e.target.value);\n          cleanValidation(\"vault_engine\");\n        }}\n        label=\"Engine\"\n        tooltip=\"Engine is the Hashicorp Vault K/V engine path. If empty, defaults to 'kv'\"\n        value={vaultEngine}\n      />\n      <InputBox\n        id=\"vault_namespace\"\n        name=\"vault_namespace\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"vaultNamespace\", e.target.value);\n        }}\n        label=\"Namespace\"\n        tooltip=\"Namespace is an optional Hashicorp Vault namespace. An empty namespace means no particular namespace is used.\"\n        value={vaultNamespace}\n      />\n      <InputBox\n        id=\"vault_prefix\"\n        name=\"vault_prefix\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"vaultPrefix\", e.target.value);\n        }}\n        label=\"Prefix\"\n        tooltip=\"Prefix is an optional prefix / directory within the K/V engine. If empty, keys will be stored at the K/V engine top level\"\n        value={vaultPrefix}\n      />\n      <fieldset className={\"inputItem\"}>\n        <legend>App Role</legend>\n        <InputBox\n          id=\"vault_approle_engine\"\n          name=\"vault_approle_engine\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"vaultAppRoleEngine\", e.target.value);\n          }}\n          label=\"Engine\"\n          tooltip=\"AppRoleEngine is the AppRole authentication engine path. If empty, defaults to 'approle'\"\n          value={vaultAppRoleEngine}\n        />\n        <InputBox\n          id=\"vault_id\"\n          name=\"vault_id\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"vaultId\", e.target.value);\n            cleanValidation(\"vault_id\");\n          }}\n          label=\"AppRole ID\"\n          tooltip=\"AppRoleSecret is the AppRole access secret for authenticating to Hashicorp Vault via the AppRole method\"\n          value={vaultId}\n          error={validationErrors[\"vault_id\"] || \"\"}\n          required\n        />\n        <InputBox\n          id=\"vault_secret\"\n          name=\"vault_secret\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"vaultSecret\", e.target.value);\n            cleanValidation(\"vault_secret\");\n          }}\n          label=\"AppRole Secret\"\n          tooltip=\"AppRoleSecret is the AppRole access secret for authenticating to Hashicorp Vault via the AppRole method\"\n          value={vaultSecret}\n          error={validationErrors[\"vault_secret\"] || \"\"}\n          required\n        />\n        <InputBox\n          type=\"number\"\n          min=\"0\"\n          id=\"vault_retry\"\n          name=\"vault_retry\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"vaultRetry\", e.target.value);\n            cleanValidation(\"vault_retry\");\n          }}\n          label=\"Retry (Seconds)\"\n          value={vaultRetry}\n          error={validationErrors[\"vault_retry\"] || \"\"}\n        />\n      </fieldset>\n      <fieldset className={\"inputItem\"}>\n        <legend>Status</legend>\n        <InputBox\n          type=\"number\"\n          min=\"0\"\n          id=\"vault_ping\"\n          name=\"vault_ping\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"vaultPing\", e.target.value);\n            cleanValidation(\"vault_ping\");\n          }}\n          label=\"Ping (Seconds)\"\n          value={vaultPing}\n          error={validationErrors[\"vault_ping\"] || \"\"}\n        />\n      </fieldset>\n    </Fragment>\n  );\n};\n\nexport default VaultKMSAdd;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputBox } from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport { isPageValid, updateAddField } from \"../../createTenantSlice\";\nimport { clearValidationError } from \"../../../utils\";\n\nconst AzureKMSAdd = () => {\n  const dispatch = useAppDispatch();\n\n  const encryptionTab = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.encryptionTab,\n  );\n  const azureEndpoint = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.azureEndpoint,\n  );\n  const azureTenantID = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.azureTenantID,\n  );\n  const azureClientID = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.azureClientID,\n  );\n  const azureClientSecret = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.azureClientSecret,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (!encryptionTab) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"azure_endpoint\",\n          required: true,\n          value: azureEndpoint,\n        },\n        {\n          fieldKey: \"azure_tenant_id\",\n          required: true,\n          value: azureTenantID,\n        },\n        {\n          fieldKey: \"azure_client_id\",\n          required: true,\n          value: azureClientID,\n        },\n        {\n          fieldKey: \"azure_client_secret\",\n          required: true,\n          value: azureClientSecret,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"encryption\",\n        valid: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    encryptionTab,\n    azureEndpoint,\n    azureTenantID,\n    azureClientID,\n    azureClientSecret,\n    dispatch,\n  ]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"encryption\", field: field, value: value }),\n      );\n    },\n    [dispatch],\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Fragment>\n      <InputBox\n        id=\"azure_endpoint\"\n        name=\"azure_endpoint\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"azureEndpoint\", e.target.value);\n          cleanValidation(\"azure_endpoint\");\n        }}\n        label=\"Endpoint\"\n        tooltip=\"Endpoint is the Azure KeyVault endpoint\"\n        value={azureEndpoint}\n        error={validationErrors[\"azure_endpoint\"] || \"\"}\n      />\n      <fieldset className={\"inputItem\"}>\n        <legend>Credentials</legend>\n        <InputBox\n          id=\"azure_tenant_id\"\n          name=\"azure_tenant_id\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"azureTenantID\", e.target.value);\n            cleanValidation(\"azure_tenant_id\");\n          }}\n          label=\"Tenant ID\"\n          tooltip=\"TenantID is the ID of the Azure KeyVault tenant\"\n          value={azureTenantID}\n          error={validationErrors[\"azure_tenant_id\"] || \"\"}\n        />\n        <InputBox\n          id=\"azure_client_id\"\n          name=\"azure_client_id\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"azureClientID\", e.target.value);\n            cleanValidation(\"azure_client_id\");\n          }}\n          label=\"Client ID\"\n          tooltip=\"ClientID is the ID of the client accessing Azure KeyVault\"\n          value={azureClientID}\n          error={validationErrors[\"azure_client_id\"] || \"\"}\n        />\n        <InputBox\n          id=\"azure_client_secret\"\n          name=\"azure_client_secret\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"azureClientSecret\", e.target.value);\n            cleanValidation(\"azure_client_secret\");\n          }}\n          label=\"Client Secret\"\n          tooltip=\"ClientSecret is the client secret accessing the Azure KeyVault\"\n          value={azureClientSecret}\n          error={validationErrors[\"azure_client_secret\"] || \"\"}\n        />\n      </fieldset>\n    </Fragment>\n  );\n};\n\nexport default AzureKMSAdd;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback } from \"react\";\nimport { InputBox } from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { updateAddField } from \"../../createTenantSlice\";\n\nconst GCPKMSAdd = () => {\n  const dispatch = useAppDispatch();\n\n  const gcpProjectID = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpProjectID,\n  );\n  const gcpEndpoint = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpEndpoint,\n  );\n  const gcpClientEmail = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpClientEmail,\n  );\n  const gcpClientID = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpClientID,\n  );\n  const gcpPrivateKeyID = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpPrivateKeyID,\n  );\n  const gcpPrivateKey = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpPrivateKey,\n  );\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"encryption\", field: field, value: value }),\n      );\n    },\n    [dispatch],\n  );\n\n  return (\n    <Fragment>\n      <InputBox\n        id=\"gcp_project_id\"\n        name=\"gcp_project_id\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"gcpProjectID\", e.target.value);\n        }}\n        label=\"Project ID\"\n        tooltip=\"ProjectID is the GCP project ID.\"\n        value={gcpProjectID}\n      />\n      <InputBox\n        id=\"gcp_endpoint\"\n        name=\"gcp_endpoint\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"gcpEndpoint\", e.target.value);\n        }}\n        label=\"Endpoint\"\n        tooltip=\"Endpoint is the GCP project ID. If empty defaults to: secretmanager.googleapis.com:443\"\n        value={gcpEndpoint}\n      />\n      <fieldset className={\"inputItem\"}>\n        <legend>Credentials</legend>\n        <InputBox\n          id=\"gcp_client_email\"\n          name=\"gcp_client_email\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"gcpClientEmail\", e.target.value);\n          }}\n          label=\"Client Email\"\n          tooltip=\"Is the Client email of the GCP service account used to access the SecretManager\"\n          value={gcpClientEmail}\n        />\n        <InputBox\n          id=\"gcp_client_id\"\n          name=\"gcp_client_id\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"gcpClientID\", e.target.value);\n          }}\n          label=\"Client ID\"\n          tooltip=\"Is the Client ID of the GCP service account used to access the SecretManager\"\n          value={gcpClientID}\n        />\n        <InputBox\n          id=\"gcp_private_key_id\"\n          name=\"gcp_private_key_id\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"gcpPrivateKeyID\", e.target.value);\n          }}\n          label=\"Private Key ID\"\n          tooltip=\"Is the private key ID of the GCP service account used to access the SecretManager\"\n          value={gcpPrivateKeyID}\n        />\n        <InputBox\n          id=\"gcp_private_key\"\n          name=\"gcp_private_key\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"gcpPrivateKey\", e.target.value);\n          }}\n          label=\"Private Key\"\n          tooltip=\"Is the private key of the GCP service account used to access the SecretManager\"\n          value={gcpPrivateKey}\n        />\n      </fieldset>\n    </Fragment>\n  );\n};\n\nexport default GCPKMSAdd;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputBox } from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { isPageValid, updateAddField } from \"../../createTenantSlice\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../../../utils\";\n\nconst GemaltoKMSAdd = () => {\n  const dispatch = useAppDispatch();\n\n  const encryptionTab = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.encryptionTab,\n  );\n  const gemaltoEndpoint = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gemaltoEndpoint,\n  );\n  const gemaltoToken = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gemaltoToken,\n  );\n  const gemaltoDomain = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gemaltoDomain,\n  );\n  const gemaltoRetry = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gemaltoRetry,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (!encryptionTab) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"gemalto_endpoint\",\n          required: true,\n          value: gemaltoEndpoint,\n        },\n        {\n          fieldKey: \"gemalto_token\",\n          required: true,\n          value: gemaltoToken,\n        },\n        {\n          fieldKey: \"gemalto_domain\",\n          required: true,\n          value: gemaltoDomain,\n        },\n        {\n          fieldKey: \"gemalto_retry\",\n          required: false,\n          value: gemaltoRetry,\n          customValidation: parseInt(gemaltoRetry) < 0,\n          customValidationMessage: \"Value needs to be 0 or greater\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"encryption\",\n        valid: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    encryptionTab,\n    gemaltoEndpoint,\n    gemaltoToken,\n    gemaltoDomain,\n    gemaltoRetry,\n    dispatch,\n  ]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"encryption\", field: field, value: value }),\n      );\n    },\n    [dispatch],\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Fragment>\n      <InputBox\n        id=\"gemalto_endpoint\"\n        name=\"gemalto_endpoint\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"gemaltoEndpoint\", e.target.value);\n          cleanValidation(\"gemalto_endpoint\");\n        }}\n        label=\"Endpoint\"\n        tooltip=\"Endpoint is the endpoint to the KeySecure server\"\n        value={gemaltoEndpoint}\n        error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n        required\n      />\n      <fieldset className={\"inputItem\"}>\n        <legend>Credentials</legend>\n        <InputBox\n          id=\"gemalto_token\"\n          name=\"gemalto_token\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"gemaltoToken\", e.target.value);\n            cleanValidation(\"gemalto_token\");\n          }}\n          label=\"Token\"\n          tooltip=\"Token is the refresh authentication token to access the KeySecure server\"\n          value={gemaltoToken}\n          error={validationErrors[\"gemalto_token\"] || \"\"}\n          required\n        />\n        <InputBox\n          id=\"gemalto_domain\"\n          name=\"gemalto_domain\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"gemaltoDomain\", e.target.value);\n            cleanValidation(\"gemalto_domain\");\n          }}\n          label=\"Domain\"\n          tooltip=\"Domain is the isolated namespace within the KeySecure server. If empty, defaults to the top-level / root domain\"\n          value={gemaltoDomain}\n          error={validationErrors[\"gemalto_domain\"] || \"\"}\n          required\n        />\n        <InputBox\n          type=\"number\"\n          min=\"0\"\n          id=\"gemalto_retry\"\n          name=\"gemalto_retry\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"gemaltoRetry\", e.target.value);\n            cleanValidation(\"gemalto_retry\");\n          }}\n          label=\"Retry (seconds)\"\n          value={gemaltoRetry}\n          error={validationErrors[\"gemalto_retry\"] || \"\"}\n        />\n      </fieldset>\n    </Fragment>\n  );\n};\n\nexport default GemaltoKMSAdd;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputBox } from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport { isPageValid, updateAddField } from \"../../createTenantSlice\";\nimport { clearValidationError } from \"../../../utils\";\n\nconst AWSKMSAdd = () => {\n  const dispatch = useAppDispatch();\n\n  const encryptionTab = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.encryptionTab,\n  );\n  const awsEndpoint = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.awsEndpoint,\n  );\n  const awsRegion = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.awsRegion,\n  );\n  const awsKMSKey = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.awsKMSKey,\n  );\n  const awsAccessKey = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.awsAccessKey,\n  );\n  const awsSecretKey = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.awsSecretKey,\n  );\n  const awsToken = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.awsToken,\n  );\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (!encryptionTab) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"aws_endpoint\",\n          required: true,\n          value: awsEndpoint,\n        },\n        {\n          fieldKey: \"aws_region\",\n          required: true,\n          value: awsRegion,\n        },\n        {\n          fieldKey: \"aws_accessKey\",\n          required: true,\n          value: awsAccessKey,\n        },\n        {\n          fieldKey: \"aws_secretKey\",\n          required: true,\n          value: awsSecretKey,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"encryption\",\n        valid: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    encryptionTab,\n    awsEndpoint,\n    awsRegion,\n    awsSecretKey,\n    awsAccessKey,\n    dispatch,\n  ]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"encryption\", field: field, value: value }),\n      );\n    },\n    [dispatch],\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Fragment>\n      <InputBox\n        id=\"aws_endpoint\"\n        name=\"aws_endpoint\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"awsEndpoint\", e.target.value);\n          cleanValidation(\"aws_endpoint\");\n        }}\n        label=\"Endpoint\"\n        tooltip=\"Endpoint is the AWS SecretsManager endpoint. AWS SecretsManager endpoints have the following schema: secrestmanager[-fips].<region>.amanzonaws.com\"\n        value={awsEndpoint}\n        error={validationErrors[\"aws_endpoint\"] || \"\"}\n        required\n      />\n      <InputBox\n        id=\"aws_region\"\n        name=\"aws_region\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"awsRegion\", e.target.value);\n          cleanValidation(\"aws_region\");\n        }}\n        label=\"Region\"\n        tooltip=\"Region is the AWS region the SecretsManager is located\"\n        value={awsRegion}\n        error={validationErrors[\"aws_region\"] || \"\"}\n        required\n      />\n      <InputBox\n        id=\"aws_kmsKey\"\n        name=\"aws_kmsKey\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"awsKMSKey\", e.target.value);\n        }}\n        label=\"KMS Key\"\n        tooltip=\"KMSKey is the AWS-KMS key ID (CMK-ID) used to en/decrypt secrets managed by the SecretsManager. If empty, the default AWS KMS key is used\"\n        value={awsKMSKey}\n      />\n      <fieldset className={\"inputItem\"}>\n        <legend>Credentials</legend>\n        <InputBox\n          id=\"aws_accessKey\"\n          name=\"aws_accessKey\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"awsAccessKey\", e.target.value);\n            cleanValidation(\"aws_accessKey\");\n          }}\n          label=\"Access Key\"\n          tooltip=\"AccessKey is the access key for authenticating to AWS\"\n          value={awsAccessKey}\n          error={validationErrors[\"aws_accessKey\"] || \"\"}\n          required\n        />\n        <InputBox\n          id=\"aws_secretKey\"\n          name=\"aws_secretKey\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"awsSecretKey\", e.target.value);\n            cleanValidation(\"aws_secretKey\");\n          }}\n          label=\"Secret Key\"\n          tooltip=\"SecretKey is the secret key for authenticating to AWS\"\n          value={awsSecretKey}\n          error={validationErrors[\"aws_secretKey\"] || \"\"}\n          required\n        />\n        <InputBox\n          id=\"aws_token\"\n          name=\"aws_token\"\n          tooltip=\"SessionToken is an optional session token for authenticating to AWS when using STS\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            updateField(\"awsToken\", e.target.value);\n          }}\n          label=\"Token\"\n          value={awsToken}\n        />\n      </fieldset>\n    </Fragment>\n  );\n};\n\nexport default AWSKMSAdd;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport {\n  Box,\n  CodeEditor,\n  FileSelector,\n  FormLayout,\n  Grid,\n  InputBox,\n  RadioGroup,\n  Select,\n  SimpleHeader,\n  Switch,\n  Tabs,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport {\n  addFileKESServerCert,\n  addFileKMSCa,\n  addFileKMSMTLSCert,\n  addFileMinIOMTLSCert,\n  isPageValid,\n  updateAddField,\n} from \"../createTenantSlice\";\nimport VaultKMSAdd from \"./Encryption/VaultKMSAdd\";\nimport AzureKMSAdd from \"./Encryption/AzureKMSAdd\";\nimport GCPKMSAdd from \"./Encryption/GCPKMSAdd\";\nimport GemaltoKMSAdd from \"./Encryption/GemaltoKMSAdd\";\nimport AWSKMSAdd from \"./Encryption/AWSKMSAdd\";\nimport H3Section from \"../../../Common/H3Section\";\n\nconst Encryption = () => {\n  const dispatch = useAppDispatch();\n\n  const replicas = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.replicas,\n  );\n  const rawConfiguration = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.rawConfiguration,\n  );\n  const encryptionTab = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.encryptionTab,\n  );\n  const enableEncryption = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.enableEncryption,\n  );\n  const encryptionType = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.encryptionType,\n  );\n\n  const gcpProjectID = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpProjectID,\n  );\n  const gcpEndpoint = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpEndpoint,\n  );\n  const gcpClientEmail = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpClientEmail,\n  );\n  const gcpClientID = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpClientID,\n  );\n  const gcpPrivateKeyID = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpPrivateKeyID,\n  );\n  const gcpPrivateKey = useSelector(\n    (state: AppState) => state.createTenant.fields.encryption.gcpPrivateKey,\n  );\n  const enableCustomCertsForKES = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.encryption.enableCustomCertsForKES,\n  );\n  const enableAutoCert = useSelector(\n    (state: AppState) => state.createTenant.fields.security.enableAutoCert,\n  );\n  const enableTLS = useSelector(\n    (state: AppState) => state.createTenant.fields.security.enableTLS,\n  );\n  const minioServerCertificates = useSelector(\n    (state: AppState) =>\n      state.createTenant.certificates.minioServerCertificates,\n  );\n  const kesServerCertificate = useSelector(\n    (state: AppState) => state.createTenant.certificates.kesServerCertificate,\n  );\n  const minioMTLSCertificate = useSelector(\n    (state: AppState) => state.createTenant.certificates.minioMTLSCertificate,\n  );\n  const kmsMTLSCertificate = useSelector(\n    (state: AppState) => state.createTenant.certificates.kmsMTLSCertificate,\n  );\n  const kmsCA = useSelector(\n    (state: AppState) => state.createTenant.certificates.kmsCA,\n  );\n  const enableCustomCerts = useSelector(\n    (state: AppState) => state.createTenant.fields.security.enableCustomCerts,\n  );\n  const kesSecurityContext = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.encryption.kesSecurityContext,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  let encryptionAvailable = false;\n  if (\n    enableTLS &&\n    (enableAutoCert ||\n      (minioServerCertificates &&\n        minioServerCertificates.filter(\n          (item) => item.encoded_key && item.encoded_cert,\n        ).length > 0))\n  ) {\n    encryptionAvailable = true;\n  }\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"encryption\", field: field, value: value }),\n      );\n    },\n    [dispatch],\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (enableEncryption) {\n      encryptionValidation = [\n        {\n          fieldKey: \"rawConfiguration\",\n          required: encryptionTab === \"kms-raw-configuration\",\n          value: rawConfiguration,\n        },\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: kesSecurityContext.runAsUser,\n          customValidation:\n            kesSecurityContext.runAsUser === \"\" ||\n            parseInt(kesSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: kesSecurityContext.runAsGroup,\n          customValidation:\n            kesSecurityContext.runAsGroup === \"\" ||\n            parseInt(kesSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: kesSecurityContext.fsGroup!,\n          customValidation:\n            kesSecurityContext.fsGroup === \"\" ||\n            parseInt(kesSecurityContext.fsGroup!) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enableCustomCerts) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: !enableAutoCert,\n            value: kesServerCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: !enableAutoCert,\n            value: kesServerCertificate.encoded_cert,\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: !enableAutoCert,\n            value: minioMTLSCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: !enableAutoCert,\n            value: minioMTLSCertificate.encoded_cert,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n    dispatch(\n      isPageValid({\n        pageName: \"encryption\",\n        valid: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    rawConfiguration,\n    encryptionTab,\n    enableEncryption,\n    encryptionType,\n    gcpProjectID,\n    gcpEndpoint,\n    gcpClientEmail,\n    gcpClientID,\n    gcpPrivateKeyID,\n    gcpPrivateKey,\n    dispatch,\n    enableAutoCert,\n    enableCustomCerts,\n    kesServerCertificate.encoded_key,\n    kesServerCertificate.encoded_cert,\n    minioMTLSCertificate.encoded_key,\n    minioMTLSCertificate.encoded_cert,\n    kesSecurityContext,\n    replicas,\n  ]);\n\n  return (\n    <FormLayout\n      withBorders={false}\n      containerPadding={false}\n      sx={{\n        \"& .tabs-container\": { height: \"inherit\" },\n        \"& .rightSpacer\": {\n          marginRight: 15,\n        },\n        \"& .responsiveContainer\": {\n          \"@media (max-width: 900px)\": {\n            display: \"flex\",\n            flexFlow: \"column\",\n          },\n        },\n        \"& .multiContainer\": {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-start\",\n        },\n      }}\n    >\n      <Box\n        className={\"inputItem\"}\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <H3Section>Encryption</H3Section>\n        <Switch\n          label={\"\"}\n          indicatorLabels={[\"Enabled\", \"Disabled\"]}\n          checked={enableEncryption}\n          value={\"tenant_encryption\"}\n          id=\"tenant-encryption\"\n          name=\"tenant-encryption\"\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"enableEncryption\", checked);\n          }}\n          description=\"\"\n          disabled={!encryptionAvailable}\n        />\n      </Box>\n      <Box className={\"muted inputItem\"}>\n        MinIO Server-Side Encryption (SSE) protects objects as part of write\n        operations, allowing clients to take advantage of server processing\n        power to secure objects at the storage layer (encryption-at-rest). SSE\n        also provides key functionality to regulatory and compliance\n        requirements around secure locking and erasure.\n      </Box>\n      <hr />\n\n      {enableEncryption && (\n        <Fragment>\n          <Tabs\n            horizontal\n            currentTabOrPath={encryptionTab}\n            onTabClick={(value: string) => {\n              updateField(\"encryptionTab\", value);\n            }}\n            sx={{\n              height: \"initial\",\n            }}\n            options={[\n              {\n                tabConfig: {\n                  label: \"Options\",\n                  id: \"kms-options\",\n                },\n                content: (\n                  <Fragment>\n                    <RadioGroup\n                      currentValue={encryptionType}\n                      id=\"encryptionType\"\n                      name=\"encryptionType\"\n                      label=\"KMS\"\n                      onChange={(e) => {\n                        updateField(\"encryptionType\", e.target.value);\n                      }}\n                      selectorOptions={[\n                        { label: \"Vault\", value: \"vault\" },\n                        { label: \"AWS\", value: \"aws\" },\n                        { label: \"Gemalto\", value: \"gemalto\" },\n                        { label: \"GCP\", value: \"gcp\" },\n                        { label: \"Azure\", value: \"azure\" },\n                      ]}\n                    />\n                    {encryptionType === \"vault\" && <VaultKMSAdd />}\n                    {encryptionType === \"azure\" && <AzureKMSAdd />}\n                    {encryptionType === \"gcp\" && <GCPKMSAdd />}\n                    {encryptionType === \"aws\" && <AWSKMSAdd />}\n                    {encryptionType === \"gemalto\" && <GemaltoKMSAdd />}\n                  </Fragment>\n                ),\n              },\n              {\n                tabConfig: {\n                  label: \"Raw Edit\",\n                  id: \"kms-raw-configuration\",\n                },\n                content: (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <CodeEditor\n                        value={rawConfiguration}\n                        mode={\"yaml\"}\n                        onChange={(value) => {\n                          updateField(\"rawConfiguration\", value);\n                        }}\n                        editorHeight={\"550px\"}\n                      />\n                    </Grid>\n                  </Fragment>\n                ),\n              },\n            ]}\n          />\n          <SimpleHeader\n            label={\"Additional Configurations\"}\n            sx={{ margin: \"0px 0px 10px\" }}\n          />\n          <Switch\n            value=\"enableCustomCertsForKES\"\n            id=\"enableCustomCertsForKES\"\n            name=\"enableCustomCertsForKES\"\n            checked={enableCustomCertsForKES || !enableAutoCert}\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n\n              updateField(\"enableCustomCertsForKES\", checked);\n            }}\n            label={\"Custom Certificates\"}\n            disabled={!enableAutoCert}\n          />\n          {(enableCustomCertsForKES || !enableAutoCert) && (\n            <Fragment>\n              <fieldset className={\"inputItem\"}>\n                <legend>Encryption server certificates</legend>\n                <FileSelector\n                  onChange={(event, fileName, encodedValue) => {\n                    if (encodedValue) {\n                      dispatch(\n                        addFileKESServerCert({\n                          key: \"key\",\n                          fileName: fileName,\n                          value: encodedValue,\n                        }),\n                      );\n                      cleanValidation(\"serverKey\");\n                    }\n                  }}\n                  accept=\".key,.pem\"\n                  id=\"serverKey\"\n                  name=\"serverKey\"\n                  label=\"Key\"\n                  error={validationErrors[\"serverKey\"] || \"\"}\n                  value={kesServerCertificate.key}\n                  required={!enableAutoCert}\n                  returnEncodedData\n                />\n                <FileSelector\n                  onChange={(event, fileName, encodedValue) => {\n                    if (encodedValue) {\n                      dispatch(\n                        addFileKESServerCert({\n                          key: \"cert\",\n                          fileName: fileName,\n                          value: encodedValue,\n                        }),\n                      );\n                      cleanValidation(\"serverCert\");\n                    }\n                  }}\n                  accept=\".cer,.crt,.cert,.pem\"\n                  id=\"serverCert\"\n                  name=\"serverCert\"\n                  label=\"Cert\"\n                  error={validationErrors[\"serverCert\"] || \"\"}\n                  value={kesServerCertificate.cert}\n                  required={!enableAutoCert}\n                  returnEncodedData\n                />\n              </fieldset>\n              <fieldset className={\"inputItem\"}>\n                <legend>\n                  MinIO mTLS certificates (connection between MinIO and the\n                  Encryption server)\n                </legend>\n                <FileSelector\n                  onChange={(event, fileName, encodedValue) => {\n                    if (encodedValue) {\n                      dispatch(\n                        addFileMinIOMTLSCert({\n                          key: \"key\",\n                          fileName: fileName,\n                          value: encodedValue,\n                        }),\n                      );\n                      cleanValidation(\"clientKey\");\n                    }\n                  }}\n                  accept=\".key,.pem\"\n                  id=\"clientKey\"\n                  name=\"clientKey\"\n                  label=\"Key\"\n                  error={validationErrors[\"clientKey\"] || \"\"}\n                  value={minioMTLSCertificate.key}\n                  required={!enableAutoCert}\n                  returnEncodedData\n                />\n                <FileSelector\n                  onChange={(event, fileName, encodedValue) => {\n                    if (encodedValue) {\n                      dispatch(\n                        addFileMinIOMTLSCert({\n                          key: \"cert\",\n                          fileName: fileName,\n                          value: encodedValue,\n                        }),\n                      );\n                      cleanValidation(\"clientCert\");\n                    }\n                  }}\n                  accept=\".cer,.crt,.cert,.pem\"\n                  id=\"clientCert\"\n                  name=\"clientCert\"\n                  label=\"Cert\"\n                  error={validationErrors[\"clientCert\"] || \"\"}\n                  value={minioMTLSCertificate.cert}\n                  required={!enableAutoCert}\n                  returnEncodedData\n                />\n              </fieldset>\n              <fieldset className={\"inputItem\"}>\n                <legend>\n                  KMS mTLS certificates (connection between the Encryption\n                  server and the KMS)\n                </legend>\n                <FileSelector\n                  onChange={(event, fileName, encodedValue) => {\n                    if (encodedValue) {\n                      dispatch(\n                        addFileKMSMTLSCert({\n                          key: \"key\",\n                          fileName: fileName,\n                          value: encodedValue,\n                        }),\n                      );\n                      cleanValidation(\"vault_key\");\n                    }\n                  }}\n                  accept=\".key,.pem\"\n                  id=\"vault_key\"\n                  name=\"vault_key\"\n                  label=\"Key\"\n                  value={kmsMTLSCertificate.key}\n                  returnEncodedData\n                />\n                <FileSelector\n                  onChange={(event, fileName, encodedValue) => {\n                    if (encodedValue) {\n                      dispatch(\n                        addFileKMSMTLSCert({\n                          key: \"cert\",\n                          fileName: fileName,\n                          value: encodedValue,\n                        }),\n                      );\n                      cleanValidation(\"vault_cert\");\n                    }\n                  }}\n                  accept=\".cer,.crt,.cert,.pem\"\n                  id=\"vault_cert\"\n                  name=\"vault_cert\"\n                  label=\"Cert\"\n                  value={kmsMTLSCertificate.cert}\n                  returnEncodedData\n                />\n                <FileSelector\n                  onChange={(event, fileName, encodedValue) => {\n                    if (encodedValue) {\n                      dispatch(\n                        addFileKMSCa({\n                          fileName: fileName,\n                          value: encodedValue,\n                        }),\n                      );\n                      cleanValidation(\"vault_ca\");\n                    }\n                  }}\n                  accept=\".cer,.crt,.cert,.pem\"\n                  id=\"vault_ca\"\n                  name=\"vault_ca\"\n                  label=\"CA\"\n                  value={kmsCA.cert}\n                  returnEncodedData\n                />\n              </fieldset>\n            </Fragment>\n          )}\n          <InputBox\n            type=\"number\"\n            min=\"1\"\n            id=\"replicas\"\n            name=\"replicas\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"replicas\", e.target.value);\n              cleanValidation(\"replicas\");\n            }}\n            label=\"Replicas\"\n            value={replicas}\n            required\n            error={validationErrors[\"replicas\"] || \"\"}\n            sx={{ marginBottom: 10 }}\n          />\n\n          <fieldset className={\"inputItem\"}>\n            <legend>SecurityContext for KES pods</legend>\n            <Grid item xs={12}>\n              <div className={`multiContainer responsiveContainer`}>\n                <div className={`rightSpacer`}>\n                  <InputBox\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsUser\"\n                    name=\"kes_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"kesSecurityContext\", {\n                        ...kesSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"kes_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={kesSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={`rightSpacer`}>\n                  <InputBox\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsGroup\"\n                    name=\"kes_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"kesSecurityContext\", {\n                        ...kesSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"kes_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={kesSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12}>\n              <div className={`multiContainer responsiveContainer`}>\n                <div className={`rightSpacer`}>\n                  <InputBox\n                    type=\"number\"\n                    id=\"kes_securityContext_fsGroup\"\n                    name=\"kes_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"kesSecurityContext\", {\n                        ...kesSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"kes_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={kesSecurityContext.fsGroup!}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={`rightSpacer`}>\n                  <Select\n                    label=\"FsGroupChangePolicy\"\n                    id=\"securityContext_fsGroupChangePolicy\"\n                    name=\"securityContext_fsGroupChangePolicy\"\n                    value={kesSecurityContext.fsGroupChangePolicy!}\n                    onChange={(value) => {\n                      updateField(\"kesSecurityContext\", {\n                        ...kesSecurityContext,\n                        fsGroupChangePolicy: value,\n                      });\n                    }}\n                    options={[\n                      {\n                        label: \"Always\",\n                        value: \"Always\",\n                      },\n                      {\n                        label: \"OnRootMismatch\",\n                        value: \"OnRootMismatch\",\n                      },\n                    ]}\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Switch\n              value=\"kesSecurityContextRunAsNonRoot\"\n              id=\"kes_securityContext_runAsNonRoot\"\n              name=\"kes_securityContext_runAsNonRoot\"\n              checked={kesSecurityContext.runAsNonRoot}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"kesSecurityContext\", {\n                  ...kesSecurityContext,\n                  runAsNonRoot: checked,\n                });\n              }}\n              label={\"Do not run as Root\"}\n            />\n          </fieldset>\n        </Fragment>\n      )}\n    </FormLayout>\n  );\n};\n\nexport default Encryption;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport {\n  AddIcon,\n  RemoveIcon,\n  FormLayout,\n  Box,\n  InputLabel,\n  RadioGroup,\n  Switch,\n  Select,\n  InputBox,\n  IconButton,\n  Grid,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../../store\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { ErrorResponseHandler } from \"../../../../../common/types\";\nimport { LabelKeyPair } from \"../../types\";\nimport { setModalErrorSnackMessage } from \"../../../../../systemSlice\";\nimport {\n  addNewToleration,\n  isPageValid,\n  removeToleration,\n  setKeyValuePairs,\n  setTolerationInfo,\n  updateAddField,\n} from \"../createTenantSlice\";\nimport api from \"../../../../../common/api\";\nimport TolerationSelector from \"../../../Common/TolerationSelector/TolerationSelector\";\nimport H3Section from \"../../../Common/H3Section\";\n\nconst AffinityContainer = styled.div(() => ({\n  \"& .overlayAction\": {\n    marginLeft: 10,\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  \"& .affinityConfigField\": {\n    display: \"flex\",\n  },\n  \"& .affinityFieldLabel\": {\n    display: \"flex\",\n    flexFlow: \"column\",\n    flex: 1,\n  },\n  \"& .affinityLabelKey\": {\n    \"& div:first-child\": {\n      marginBottom: 0,\n    },\n  },\n  \"& .affinityLabelValue\": {\n    marginLeft: 10,\n    \"& div:first-child\": {\n      marginBottom: 0,\n    },\n  },\n  \"& .rowActions\": {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  \"& .affinityRow\": {\n    marginBottom: 10,\n    display: \"flex\",\n  },\n}));\n\ninterface OptionPair {\n  label: string;\n  value: string;\n}\n\nconst Affinity = () => {\n  const dispatch = useAppDispatch();\n\n  const podAffinity = useSelector(\n    (state: AppState) => state.createTenant.fields.affinity.podAffinity,\n  );\n  const nodeSelectorLabels = useSelector(\n    (state: AppState) => state.createTenant.fields.affinity.nodeSelectorLabels,\n  );\n  const withPodAntiAffinity = useSelector(\n    (state: AppState) => state.createTenant.fields.affinity.withPodAntiAffinity,\n  );\n  const keyValuePairs = useSelector(\n    (state: AppState) => state.createTenant.nodeSelectorPairs,\n  );\n  const tolerations = useSelector(\n    (state: AppState) => state.createTenant.tolerations,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [keyValueMap, setKeyValueMap] = useState<{ [key: string]: string[] }>(\n    {},\n  );\n  const [keyOptions, setKeyOptions] = useState<OptionPair[]>([]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({\n          pageName: \"affinity\",\n          field: field,\n          value: value,\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/nodes/labels`)\n        .then((res: { [key: string]: string[] }) => {\n          setLoading(false);\n          setKeyValueMap(res);\n          let keys: OptionPair[] = [];\n          for (let k in res) {\n            keys.push({\n              label: k,\n              value: k,\n            });\n          }\n          setKeyOptions(keys);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n          setKeyValueMap({});\n        });\n    }\n  }, [dispatch, loading]);\n\n  useEffect(() => {\n    if (keyValuePairs) {\n      const vlr = keyValuePairs\n        .filter((kvp) => kvp.key !== \"\")\n        .map((kvp) => `${kvp.key}=${kvp.value}`)\n        .filter((kvs, i, a) => a.indexOf(kvs) === i);\n      const vl = vlr.join(\"&\");\n      updateField(\"nodeSelectorLabels\", vl);\n    }\n  }, [keyValuePairs, updateField]);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (podAffinity === \"nodeSelector\") {\n      let valid = true;\n\n      const splittedLabels = nodeSelectorLabels.split(\"&\");\n\n      if (splittedLabels.length === 1 && splittedLabels[0] === \"\") {\n        valid = false;\n      }\n\n      splittedLabels.forEach((item: string, index: number) => {\n        const splitItem = item.split(\"=\");\n\n        if (splitItem.length !== 2) {\n          valid = false;\n        }\n\n        if (index + 1 !== splittedLabels.length) {\n          if (splitItem[0] === \"\" || splitItem[1] === \"\") {\n            valid = false;\n          }\n        }\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"labels\",\n          required: true,\n          value: nodeSelectorLabels,\n          customValidation: !valid,\n          customValidationMessage:\n            \"You need to add at least one label key-pair\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"affinity\",\n        valid: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [dispatch, podAffinity, nodeSelectorLabels]);\n\n  const updateToleration = (index: number, field: string, value: any) => {\n    const alterToleration = { ...tolerations[index], [field]: value };\n\n    dispatch(\n      setTolerationInfo({\n        index: index,\n        tolerationValue: alterToleration,\n      }),\n    );\n  };\n\n  return (\n    <AffinityContainer>\n      <FormLayout withBorders={false} containerPadding={false}>\n        <Box className={\"inputItem\"}>\n          <H3Section>Pod Placement</H3Section>\n          <span className={\"muted\"}>\n            Configure how pods will be assigned to nodes\n          </span>\n        </Box>\n        <Box>\n          <InputLabel>Type</InputLabel>\n        </Box>\n        <Box className={`muted inputItem`}>\n          MinIO supports multiple configurations for Pod Affinity\n        </Box>\n        <RadioGroup\n          currentValue={podAffinity}\n          id=\"affinity-options\"\n          name=\"affinity-options\"\n          label={\" \"}\n          onChange={(e) => {\n            updateField(\"podAffinity\", e.target.value);\n          }}\n          selectorOptions={[\n            { label: \"None\", value: \"none\" },\n            { label: \"Default (Pod Anti-Affinity)\", value: \"default\" },\n            { label: \"Node Selector\", value: \"nodeSelector\" },\n          ]}\n          displayInColumn\n        />\n        {podAffinity === \"nodeSelector\" && (\n          <Fragment>\n            <Switch\n              value=\"with_pod_anti_affinity\"\n              id=\"with_pod_anti_affinity\"\n              name=\"with_pod_anti_affinity\"\n              checked={withPodAntiAffinity}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"withPodAntiAffinity\", checked);\n              }}\n              label={\"With Pod Anti-Affinity\"}\n            />\n            <Box className={\"inputBox\"}>\n              <h3>Labels</h3>\n              <span className={\"error\"}>{validationErrors[\"labels\"]}</span>\n              <Grid container>\n                {keyValuePairs &&\n                  keyValuePairs.map((kvp, i) => {\n                    return (\n                      <Grid\n                        item\n                        xs={12}\n                        className={\"affinityRow\"}\n                        key={`affinity-keyVal-${i.toString()}`}\n                      >\n                        <Grid item xs={5} className={\"affinityLabelKey\"}>\n                          {keyOptions.length > 0 && (\n                            <Select\n                              onChange={(value) => {\n                                const newKey = value;\n                                const newLKP: LabelKeyPair = {\n                                  key: newKey,\n                                  value: keyValueMap[newKey][0],\n                                };\n                                const arrCp: LabelKeyPair[] = [\n                                  ...keyValuePairs,\n                                ];\n                                arrCp[i] = newLKP;\n                                dispatch(setKeyValuePairs(arrCp));\n                              }}\n                              id=\"select-access-policy\"\n                              name=\"select-access-policy\"\n                              label={\"\"}\n                              value={kvp.key}\n                              options={keyOptions}\n                            />\n                          )}\n                          {keyOptions.length === 0 && (\n                            <InputBox\n                              id={`nodeselector-key-${i.toString()}`}\n                              label={\"\"}\n                              name={`nodeselector-${i.toString()}`}\n                              value={kvp.key}\n                              onChange={(e) => {\n                                const arrCp: LabelKeyPair[] = [\n                                  ...keyValuePairs,\n                                ];\n                                arrCp[i] = {\n                                  key: arrCp[i].key,\n                                  value: e.target.value as string,\n                                };\n                                dispatch(setKeyValuePairs(arrCp));\n                              }}\n                              index={i}\n                              placeholder={\"Key\"}\n                            />\n                          )}\n                        </Grid>\n                        <Grid item xs={5} className={\"affinityLabelValue\"}>\n                          {keyOptions.length > 0 && (\n                            <Select\n                              onChange={(value) => {\n                                const arrCp: LabelKeyPair[] = [\n                                  ...keyValuePairs,\n                                ];\n                                arrCp[i] = {\n                                  key: arrCp[i].key,\n                                  value: value,\n                                };\n                                dispatch(setKeyValuePairs(arrCp));\n                              }}\n                              id=\"select-access-policy\"\n                              name=\"select-access-policy\"\n                              label={\"\"}\n                              value={kvp.value}\n                              options={\n                                keyValueMap[kvp.key]\n                                  ? keyValueMap[kvp.key].map((v) => {\n                                      return { label: v, value: v };\n                                    })\n                                  : []\n                              }\n                            />\n                          )}\n                          {keyOptions.length === 0 && (\n                            <InputBox\n                              id={`nodeselector-value-${i.toString()}`}\n                              label={\"\"}\n                              name={`nodeselector-${i.toString()}`}\n                              value={kvp.value}\n                              onChange={(e) => {\n                                const arrCp: LabelKeyPair[] = [\n                                  ...keyValuePairs,\n                                ];\n                                arrCp[i] = {\n                                  key: arrCp[i].key,\n                                  value: e.target.value as string,\n                                };\n                                dispatch(setKeyValuePairs(arrCp));\n                              }}\n                              index={i}\n                              placeholder={\"value\"}\n                            />\n                          )}\n                        </Grid>\n                        <Grid item xs={2} className={\"rowActions\"}>\n                          <Box className={\"overlayAction\"}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                const arrCp = [...keyValuePairs];\n                                if (keyOptions.length > 0) {\n                                  arrCp.push({\n                                    key: keyOptions[0].value,\n                                    value: keyValueMap[keyOptions[0].value][0],\n                                  });\n                                } else {\n                                  arrCp.push({ key: \"\", value: \"\" });\n                                }\n\n                                dispatch(setKeyValuePairs(arrCp));\n                              }}\n                              disabled={i !== keyValuePairs.length - 1}\n                            >\n                              <AddIcon />\n                            </IconButton>\n                          </Box>\n                          <Box className={\"overlayAction\"}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                const arrCp = keyValuePairs.filter(\n                                  (item, index) => index !== i,\n                                );\n                                dispatch(setKeyValuePairs(arrCp));\n                              }}\n                              disabled={keyValuePairs.length <= 1}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </Box>\n                        </Grid>\n                      </Grid>\n                    );\n                  })}\n              </Grid>\n            </Box>\n          </Fragment>\n        )}\n        <Grid item xs={12} className={\"affinityConfigField\"}>\n          <Grid item className={\"affinityFieldLabel\"}>\n            <h3>Tolerations</h3>\n            <span className={\"error\"}>{validationErrors[\"tolerations\"]}</span>\n            <Grid container>\n              {tolerations &&\n                tolerations.map((tol, i) => {\n                  return (\n                    <Grid\n                      item\n                      xs={12}\n                      className={\"affinityRow\"}\n                      key={`affinity-keyVal-${i.toString()}`}\n                    >\n                      <TolerationSelector\n                        effect={tol.effect}\n                        onEffectChange={(value) => {\n                          updateToleration(i, \"effect\", value);\n                        }}\n                        tolerationKey={tol.key}\n                        onTolerationKeyChange={(value) => {\n                          updateToleration(i, \"key\", value);\n                        }}\n                        operator={tol.operator}\n                        onOperatorChange={(value) => {\n                          updateToleration(i, \"operator\", value);\n                        }}\n                        value={tol.value}\n                        onValueChange={(value) => {\n                          updateToleration(i, \"value\", value);\n                        }}\n                        tolerationSeconds={tol.tolerationSeconds?.seconds || 0}\n                        onSecondsChange={(value) => {\n                          updateToleration(i, \"tolerationSeconds\", {\n                            seconds: value,\n                          });\n                        }}\n                        index={i}\n                      />\n                      <Box className={\"overlayAction\"}>\n                        <IconButton\n                          size={\"small\"}\n                          onClick={() => {\n                            dispatch(addNewToleration());\n                          }}\n                          disabled={i !== tolerations.length - 1}\n                        >\n                          <AddIcon />\n                        </IconButton>\n                      </Box>\n\n                      <Box className={\"overlayAction\"}>\n                        <IconButton\n                          size={\"small\"}\n                          onClick={() => dispatch(removeToleration(i))}\n                          disabled={tolerations.length <= 1}\n                        >\n                          <RemoveIcon />\n                        </IconButton>\n                      </Box>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Grid>\n        </Grid>\n      </FormLayout>\n    </AffinityContainer>\n  );\n};\n\nexport default Affinity;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Box, FormLayout, InputBox, Switch } from \"mds\";\nimport { AppState, useAppDispatch } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { isPageValid, updateAddField } from \"../createTenantSlice\";\nimport H3Section from \"../../../Common/H3Section\";\n\nconst Images = () => {\n  const dispatch = useAppDispatch();\n\n  const customImage = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.customImage,\n  );\n  const imageName = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.imageName,\n  );\n  const customDockerhub = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.customDockerhub,\n  );\n  const imageRegistry = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.imageRegistry,\n  );\n  const imageRegistryUsername = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.configure.imageRegistryUsername,\n  );\n  const imageRegistryPassword = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.configure.imageRegistryPassword,\n  );\n\n  const tenantCustom = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.tenantCustom,\n  );\n\n  const kesImage = useSelector(\n    (state: AppState) => state.createTenant.fields.configure.kesImage,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"configure\", field: field, value: value }),\n      );\n    },\n    [dispatch],\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (customImage) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"image\",\n          required: false,\n          value: imageName,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/minio:VERSION'\",\n        },\n        {\n          fieldKey: \"kesImage\",\n          required: false,\n          value: kesImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/kes:VERSION'\",\n        },\n      ];\n      if (customDockerhub) {\n        customAccountValidation = [\n          ...customAccountValidation,\n          {\n            fieldKey: \"registry\",\n            required: true,\n            value: imageRegistry,\n          },\n          {\n            fieldKey: \"registryUsername\",\n            required: true,\n            value: imageRegistryUsername,\n          },\n          {\n            fieldKey: \"registryPassword\",\n            required: true,\n            value: imageRegistryPassword,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"configure\",\n        valid: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    customImage,\n    imageName,\n    kesImage,\n    customDockerhub,\n    imageRegistry,\n    imageRegistryUsername,\n    imageRegistryPassword,\n    dispatch,\n    tenantCustom,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <FormLayout withBorders={false} containerPadding={false}>\n      <Box className={\"inputItem\"}>\n        <H3Section>Container Images</H3Section>\n        <span className={\"muted\"}>\n          Specify the container images used by the Tenant and its features.\n        </span>\n      </Box>\n\n      <InputBox\n        id=\"image\"\n        name=\"image\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"imageName\", e.target.value);\n          cleanValidation(\"image\");\n        }}\n        label=\"MinIO\"\n        value={imageName}\n        error={validationErrors[\"image\"] || \"\"}\n        placeholder=\"minio/minio:RELEASE.2023-11-15T20-43-25Z\"\n      />\n      <InputBox\n        id=\"kesImage\"\n        name=\"kesImage\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          updateField(\"kesImage\", e.target.value);\n          cleanValidation(\"kesImage\");\n        }}\n        label=\"KES\"\n        value={kesImage}\n        error={validationErrors[\"kesImage\"] || \"\"}\n        placeholder=\"minio/kes:2023-11-10T10-44-28Z\"\n      />\n\n      {customImage && (\n        <Fragment>\n          <Box className={\"inputItem\"}>\n            <h4>Custom Container Registry</h4>\n          </Box>\n          <Switch\n            value=\"custom_docker_hub\"\n            id=\"custom_docker_hub\"\n            name=\"custom_docker_hub\"\n            checked={customDockerhub}\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n\n              updateField(\"customDockerhub\", checked);\n            }}\n            label={\"Use a private container registry\"}\n          />\n        </Fragment>\n      )}\n      {customDockerhub && (\n        <Fragment>\n          <InputBox\n            id=\"registry\"\n            name=\"registry\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"imageRegistry\", e.target.value);\n            }}\n            label=\"Endpoint\"\n            value={imageRegistry}\n            error={validationErrors[\"registry\"] || \"\"}\n            placeholder=\"https://index.docker.io/v1/\"\n            required\n          />\n          <InputBox\n            id=\"registryUsername\"\n            name=\"registryUsername\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"imageRegistryUsername\", e.target.value);\n            }}\n            label=\"Username\"\n            value={imageRegistryUsername}\n            error={validationErrors[\"registryUsername\"] || \"\"}\n            required\n          />\n          <InputBox\n            id=\"registryPassword\"\n            name=\"registryPassword\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"imageRegistryPassword\", e.target.value);\n            }}\n            label=\"Password\"\n            value={imageRegistryPassword}\n            error={validationErrors[\"registryPassword\"] || \"\"}\n            required\n          />\n        </Fragment>\n      )}\n    </FormLayout>\n  );\n};\n\nexport default Images;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { Box, SimpleHeader, Table, TableBody, TableCell, TableRow } from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"../../../../../store\";\nimport { niceBytes } from \"../../../../../common/utils\";\n\nconst SizePreview = () => {\n  const nodes = useSelector(\n    (state: AppState) => state.createTenant.fields.tenantSize.nodes,\n  );\n  const memoryNode = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.tenantSize.resourcesMemoryRequest,\n  );\n  const ecParity = useSelector(\n    (state: AppState) => state.createTenant.fields.tenantSize.ecParity,\n  );\n\n  const distribution = useSelector(\n    (state: AppState) => state.createTenant.fields.tenantSize.distribution,\n  );\n  const ecParityCalc = useSelector(\n    (state: AppState) => state.createTenant.fields.tenantSize.ecParityCalc,\n  );\n\n  const cpuToUse = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.tenantSize.resourcesCPURequest,\n  );\n  const integrationSelection = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.tenantSize.integrationSelection,\n  );\n\n  const usableInformation = ecParityCalc.storageFactors.find(\n    (element) => element.erasureCode === ecParity,\n  );\n\n  return (\n    <Box\n      sx={{ margin: 4, \"& table\": { fontSize: 13, \"& td\": { padding: 8 } } }}\n    >\n      <SimpleHeader\n        label={\"Resource Allocation\"}\n        sx={{ margin: 4, padding: \"5px 0\" }}\n      />\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell scope=\"row\">Number of Servers</TableCell>\n            <TableCell sx={{ textAlign: \"right\" }}>\n              {parseInt(nodes) > 0 ? nodes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell sx={{ textAlign: \"right\" }}>\n                    {distribution ? distribution.disks : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drive Capacity</TableCell>\n                  <TableCell sx={{ textAlign: \"right\" }}>\n                    {distribution ? niceBytes(distribution.pvSize) : \"-\"}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n\n          <TableRow>\n            <TableCell scope=\"row\">Total Volumes</TableCell>\n            <TableCell sx={{ textAlign: \"right\" }}>\n              {distribution ? distribution.persistentVolumes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory per Node</TableCell>\n                  <TableCell sx={{ textAlign: \"right\" }}>\n                    {memoryNode} Gi\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    CPU Selection\n                  </TableCell>\n                  <TableCell\n                    style={{ borderBottom: 0 }}\n                    sx={{ textAlign: \"right\" }}\n                  >\n                    {cpuToUse}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n        </TableBody>\n      </Table>\n      {ecParityCalc.error === 0 && usableInformation && (\n        <Fragment>\n          <SimpleHeader\n            label={\"Erasure Code Configuration\"}\n            sx={{ margin: 4, padding: \"5px 0\" }}\n          />\n          <Table>\n            <TableBody>\n              <TableRow>\n                <TableCell scope=\"row\">EC Parity</TableCell>\n                <TableCell sx={{ textAlign: \"right\" }}>\n                  {ecParity !== \"\" ? ecParity : \"-\"}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Raw Capacity</TableCell>\n                <TableCell sx={{ textAlign: \"right\" }}>\n                  {niceBytes(ecParityCalc.rawCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Usable Capacity</TableCell>\n                <TableCell sx={{ textAlign: \"right\" }}>\n                  {niceBytes(usableInformation.maxCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                  Server Failures Tolerated\n                </TableCell>\n                <TableCell\n                  style={{ borderBottom: 0 }}\n                  sx={{ textAlign: \"right\" }}\n                >\n                  {distribution\n                    ? Math.floor(\n                        usableInformation.maxFailureTolerations /\n                          distribution.disks,\n                      )\n                    : \"-\"}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Fragment>\n      )}\n      {integrationSelection.typeSelection !== \"\" &&\n        integrationSelection.storageClass !== \"\" && (\n          <Fragment>\n            <SimpleHeader\n              label={\"Single Instance Configuration\"}\n              sx={{ margin: 4, padding: \"5px 0\" }}\n            />\n            <Table>\n              <TableBody>\n                <TableRow>\n                  <TableCell scope=\"row\">CPU</TableCell>\n                  <TableCell sx={{ textAlign: \"right\" }}>\n                    {integrationSelection.CPU !== 0\n                      ? integrationSelection.CPU\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory</TableCell>\n                  <TableCell sx={{ textAlign: \"right\" }}>\n                    {integrationSelection.memory !== 0\n                      ? `${integrationSelection.memory} Gi`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell sx={{ textAlign: \"right\" }}>\n                    {integrationSelection.drivesPerServer !== 0\n                      ? `${integrationSelection.drivesPerServer}`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    Drive Size\n                  </TableCell>\n                  <TableCell\n                    style={{ borderBottom: 0 }}\n                    sx={{ textAlign: \"right\" }}\n                  >\n                    {integrationSelection.driveSize.driveSize}\n                    {integrationSelection.driveSize.sizeUnit}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Fragment>\n        )}\n    </Box>\n  );\n};\n\nexport default SizePreview;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ConfirmModalIcon, ProgressBar } from \"mds\";\nimport ConfirmDialog from \"../../../../Common/ModalWrapper/ConfirmDialog\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { closeAddNSModal } from \"../../createTenantSlice\";\nimport { createNamespaceAsync } from \"../../thunks/namespaceThunks\";\n\nconst AddNamespaceModal = () => {\n  const dispatch = useAppDispatch();\n\n  const namespace = useSelector(\n    (state: AppState) => state.createTenant.fields.nameTenant.namespace,\n  );\n  const addNamespaceLoading = useSelector(\n    (state: AppState) => state.createTenant.addNSLoading,\n  );\n  const addNamespaceOpen = useSelector(\n    (state: AppState) => state.createTenant.addNSOpen,\n  );\n\n  return (\n    <ConfirmDialog\n      title={`New namespace`}\n      confirmText={\"Create\"}\n      confirmButtonProps={{\n        variant: \"callAction\",\n      }}\n      isOpen={addNamespaceOpen}\n      titleIcon={<ConfirmModalIcon />}\n      isLoading={addNamespaceLoading}\n      onConfirm={() => {\n        dispatch(createNamespaceAsync());\n      }}\n      onClose={() => {\n        dispatch(closeAddNSModal());\n      }}\n      confirmationContent={\n        <Fragment>\n          {addNamespaceLoading && <ProgressBar />}\n          Are you sure you want to add a namespace called\n          <br />\n          <b\n            style={{\n              maxWidth: \"200px\",\n              whiteSpace: \"normal\",\n              wordWrap: \"break-word\",\n            }}\n          >\n            {namespace}\n          </b>\n          ?\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default AddNamespaceModal;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useMemo } from \"react\";\nimport debounce from \"lodash/debounce\";\nimport { AddIcon, InputBox } from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { openAddNSModal, setNamespace } from \"../../createTenantSlice\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { IMkEnvs } from \"./utils\";\nimport { validateNamespaceAsync } from \"../../thunks/namespaceThunks\";\nimport AddNamespaceModal from \"../helpers/AddNamespaceModal\";\n\nconst NamespaceSelector = ({ formToRender }: { formToRender?: IMkEnvs }) => {\n  const dispatch = useAppDispatch();\n\n  const namespace = useSelector(\n    (state: AppState) => state.createTenant.fields.nameTenant.namespace,\n  );\n\n  const showNSCreateButton = useSelector(\n    (state: AppState) => state.createTenant.showNSCreateButton,\n  );\n\n  const namespaceError = useSelector(\n    (state: AppState) => state.createTenant.validationErrors[\"namespace\"],\n  );\n  const openAddNSConfirm = useSelector(\n    (state: AppState) => state.createTenant.addNSOpen,\n  );\n\n  const debounceNamespace = useMemo(\n    () =>\n      debounce(() => {\n        dispatch(validateNamespaceAsync());\n      }, 500),\n    [dispatch],\n  );\n\n  useEffect(() => {\n    if (namespace !== \"\") {\n      debounceNamespace();\n      // Cancel previous debounce calls during useEffect cleanup.\n      return debounceNamespace.cancel;\n    }\n  }, [debounceNamespace, namespace]);\n\n  const addNamespace = () => {\n    dispatch(openAddNSModal());\n  };\n\n  return (\n    <Fragment>\n      {openAddNSConfirm && <AddNamespaceModal />}\n      <InputBox\n        id=\"namespace\"\n        name=\"namespace\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          dispatch(setNamespace(e.target.value));\n        }}\n        label=\"Namespace\"\n        value={namespace}\n        error={namespaceError || \"\"}\n        overlayIcon={showNSCreateButton ? <AddIcon /> : null}\n        overlayAction={addNamespace}\n        required\n      />\n    </Fragment>\n  );\n};\nexport default NamespaceSelector;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Box, FormLayout, Grid, InputBox, Select } from \"mds\";\nimport get from \"lodash/get\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { IMkEnvs, mkPanelConfigurations } from \"./utils\";\nimport {\n  isPageValid,\n  setStorageType,\n  setTenantName,\n  updateAddField,\n} from \"../../createTenantSlice\";\nimport { selFeatures } from \"../../../../consoleSlice\";\nimport SizePreview from \"../SizePreview\";\nimport TenantSize from \"./TenantSize\";\nimport NamespaceSelector from \"./NamespaceSelector\";\nimport H3Section from \"../../../../Common/H3Section\";\n\nconst NameTenantField = () => {\n  const dispatch = useAppDispatch();\n  const tenantName = useSelector(\n    (state: AppState) => state.createTenant.fields.nameTenant.tenantName,\n  );\n\n  const tenantNameError = useSelector(\n    (state: AppState) => state.createTenant.validationErrors[\"tenant-name\"],\n  );\n\n  return (\n    <InputBox\n      id=\"tenant-name\"\n      name=\"tenant-name\"\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setTenantName(e.target.value));\n      }}\n      label=\"Name\"\n      value={tenantName}\n      required\n      error={tenantNameError || \"\"}\n    />\n  );\n};\n\ninterface INameTenantMainScreen {\n  formToRender?: IMkEnvs;\n}\n\nconst NameTenantMain = ({ formToRender }: INameTenantMainScreen) => {\n  const dispatch = useAppDispatch();\n\n  const selectedStorageClass = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.nameTenant.selectedStorageClass,\n  );\n  const selectedStorageType = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.nameTenant.selectedStorageType,\n  );\n  const storageClasses = useSelector(\n    (state: AppState) => state.createTenant.storageClasses,\n  );\n  const features = useSelector(selFeatures);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: string) => {\n      dispatch(\n        updateAddField({ pageName: \"nameTenant\", field: field, value: value }),\n      );\n    },\n    [dispatch],\n  );\n\n  // Validation\n  useEffect(() => {\n    const isValid =\n      (formToRender === IMkEnvs.default && storageClasses.length > 0) ||\n      (formToRender !== IMkEnvs.default && selectedStorageType !== \"\");\n\n    dispatch(isPageValid({ pageName: \"nameTenant\", valid: isValid }));\n  }, [storageClasses, dispatch, selectedStorageType, formToRender]);\n\n  return (\n    <Fragment>\n      <Grid container sx={{ justifyContent: \"space-between\" }}>\n        <Grid item sx={{ width: \"calc(100% - 320px)\" }}>\n          <Box sx={{ minHeight: 550 }}>\n            <FormLayout withBorders={false} containerPadding={false}>\n              <Box className={\"inputItem\"}>\n                <H3Section>Name</H3Section>\n                <span className={\"muted\"}>\n                  How would you like to name this new tenant?\n                </span>\n              </Box>\n              <NameTenantField />\n              <NamespaceSelector formToRender={formToRender} />\n              {formToRender === IMkEnvs.default ? (\n                <Select\n                  id=\"storage_class\"\n                  name=\"storage_class\"\n                  onChange={(value) => {\n                    updateField(\"selectedStorageClass\", value);\n                  }}\n                  label=\"Storage Class\"\n                  value={selectedStorageClass}\n                  options={storageClasses}\n                  disabled={storageClasses.length < 1}\n                />\n              ) : (\n                <Select\n                  id=\"storage_type\"\n                  name=\"storage_type\"\n                  onChange={(value) => {\n                    dispatch(\n                      setStorageType({\n                        storageType: value,\n                        features: features,\n                      }),\n                    );\n                  }}\n                  label={get(\n                    mkPanelConfigurations,\n                    `${formToRender}.variantSelectorLabel`,\n                    \"Storage Type\",\n                  )}\n                  value={selectedStorageType}\n                  options={get(\n                    mkPanelConfigurations,\n                    `${formToRender}.variantSelectorValues`,\n                    [],\n                  )}\n                />\n              )}\n              {formToRender === IMkEnvs.default ? (\n                <TenantSize />\n              ) : (\n                get(\n                  mkPanelConfigurations,\n                  `${formToRender}.sizingComponent`,\n                  null,\n                )\n              )}\n            </FormLayout>\n          </Box>\n        </Grid>\n        <Grid item xs={\"hidden\"} sm={\"hidden\"}>\n          <Box\n            sx={{\n              marginLeft: 10,\n              padding: 2,\n              marginTop: 20,\n            }}\n            withBorders\n            useBackground\n          >\n            <SizePreview />\n          </Box>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default NameTenantMain;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport get from \"lodash/get\";\nimport NameTenantMain from \"./NameTenantMain\";\nimport { IMkEnvs, resourcesConfigurations } from \"./utils\";\nimport { selFeatures } from \"../../../../consoleSlice\";\n\nconst TenantResources = () => {\n  const features = useSelector(selFeatures);\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default,\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  if (formRender === null) {\n    return null;\n  }\n\n  return <NameTenantMain formToRender={formRender} />;\n};\n\nexport default TenantResources;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nexport const requiredPages = [\n  \"nameTenant\",\n  \"tenantSize\",\n  \"configure\",\n  \"affinity\",\n  \"identityProvider\",\n  \"security\",\n  \"encryption\",\n];\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Button } from \"mds\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { requiredPages } from \"./common\";\nimport { createTenantAsync } from \"./thunks/createTenantThunk\";\n\nconst CreateTenantButton = () => {\n  const dispatch = useAppDispatch();\n\n  const addSending = useSelector(\n    (state: AppState) => state.createTenant.addingTenant,\n  );\n\n  const validPages = useSelector(\n    (state: AppState) => state.createTenant.validPages,\n  );\n\n  const selectedStorageClass = useSelector(\n    (state: AppState) =>\n      state.createTenant.fields.nameTenant.selectedStorageClass,\n  );\n\n  const enabled =\n    !addSending &&\n    selectedStorageClass !== \"\" &&\n    requiredPages.every((v) => validPages.includes(v));\n\n  return (\n    <Button\n      id={\"wizard-button-Create\"}\n      variant=\"callAction\"\n      color=\"primary\"\n      onClick={() => {\n        dispatch(createTenantAsync());\n      }}\n      disabled={!enabled}\n      key={`button-AddTenant-Create`}\n      label={\"Create\"}\n    />\n  );\n};\n\nexport default CreateTenantButton;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport CredentialsPrompt from \"../../Common/CredentialsPrompt/CredentialsPrompt\";\nimport { resetAddTenantForm } from \"./createTenantSlice\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst NewTenantCredentials = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const showNewCredentials = useSelector(\n    (state: AppState) => state.createTenant.showNewCredentials,\n  );\n  const createdAccount = useSelector(\n    (state: AppState) => state.createTenant.createdAccount,\n  );\n\n  return (\n    <Fragment>\n      {showNewCredentials && (\n        <CredentialsPrompt\n          newServiceAccount={createdAccount}\n          open={showNewCredentials}\n          closeModal={() => {\n            dispatch(resetAddTenantForm());\n            navigate(\"/tenants\");\n          }}\n          entity=\"Tenant\"\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default NewTenantCredentials;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport {\n  BackLink,\n  Box,\n  Grid,\n  HelpBox,\n  PageLayout,\n  ProgressBar,\n  StorageIcon,\n  Wizard,\n  WizardButton,\n  WizardElement,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  IMkEnvs,\n  resourcesConfigurations,\n} from \"./Steps/TenantResources/utils\";\nimport { selFeatures } from \"../../consoleSlice\";\nimport { resetAddTenantForm } from \"./createTenantSlice\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport Configure from \"./Steps/Configure\";\nimport IdentityProvider from \"./Steps/IdentityProvider\";\nimport Security from \"./Steps/Security\";\nimport Encryption from \"./Steps/Encryption\";\nimport Affinity from \"./Steps/Affinity\";\nimport Images from \"./Steps/Images\";\nimport TenantResources from \"./Steps/TenantResources/TenantResources\";\nimport CreateTenantButton from \"./CreateTenantButton\";\nimport NewTenantCredentials from \"./NewTenantCredentials\";\nimport PageHeaderWrapper from \"../../Common/PageHeaderWrapper/PageHeaderWrapper\";\n\nconst AddTenant = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const features = useSelector(selFeatures);\n\n  // Fields\n  const addSending = useSelector(\n    (state: AppState) => state.createTenant.addingTenant,\n  );\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default,\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  const cancelButton = {\n    label: \"Cancel\",\n    type: \"custom\" as \"to\" | \"custom\" | \"next\" | \"back\",\n    enabled: true,\n    action: () => {\n      dispatch(resetAddTenantForm());\n      navigate(\"/tenants\");\n    },\n  };\n\n  const createButton: WizardButton = {\n    componentRender: <CreateTenantButton key={\"create-tenant\"} />,\n  };\n\n  const wizardSteps: WizardElement[] = [\n    {\n      label: \"Setup\",\n      componentRender: <TenantResources />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Configure\",\n      advancedOnly: true,\n      componentRender: <Configure />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Images\",\n      advancedOnly: true,\n      componentRender: <Images />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Pod Placement\",\n      advancedOnly: true,\n      componentRender: <Affinity />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Identity Provider\",\n      advancedOnly: true,\n      componentRender: <IdentityProvider />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Security\",\n      advancedOnly: true,\n      componentRender: <Security />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Encryption\",\n      advancedOnly: true,\n      componentRender: <Encryption />,\n      buttons: [cancelButton, createButton],\n    },\n  ];\n\n  return (\n    <Fragment>\n      <NewTenantCredentials />\n      <PageHeaderWrapper\n        label={\n          <BackLink\n            onClick={() => {\n              dispatch(resetAddTenantForm());\n              navigate(\"/tenants\");\n            }}\n            label={\"Tenants\"}\n          />\n        }\n      />\n\n      <PageLayout variant={\"constrained\"}>\n        {addSending && (\n          <Grid item xs={12}>\n            <ProgressBar />\n          </Grid>\n        )}\n        <Box\n          withBorders\n          customBorderPadding={\"0px\"}\n          sx={{ \"& .muted\": { fontSize: 13 } }}\n        >\n          <Wizard wizardSteps={wizardSteps} linearMode={false} />\n        </Box>\n        {formRender === IMkEnvs.aws && (\n          <Grid item xs={12} style={{ marginTop: 16 }}>\n            <HelpBox\n              title={\"EBS Volume Configuration.\"}\n              iconComponent={<StorageIcon />}\n              help={\n                <Fragment>\n                  <b>Performance Optimized</b>: Uses the <i>gp3</i> EBS storage\n                  class class configured at 1,000Mi/s throughput and 16,000\n                  IOPS, however the minimum volume size for this type of EBS\n                  volume is <b>32Gi</b>.\n                  <br />\n                  <br />\n                  <b>Storage Optimized</b>: Uses the <i>sc1</i> EBS storage\n                  class, however the minimum volume size for this type of EBS\n                  volume is &nbsp;\n                  <b>16Ti</b> to unlock their maximum throughput speed of\n                  250Mi/s.\n                </Fragment>\n              }\n            />\n          </Grid>\n        )}\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default AddTenant;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { CertificateIcon, Box, breakPoints } from \"mds\";\nimport { useParams } from \"react-router-dom\";\nimport { AppState } from \"../../../../store\";\n\nconst FeatureItem = ({\n  icon,\n  description,\n}: {\n  icon: any;\n  description: string;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        \"& .min-icon\": {\n          marginRight: \"10px\",\n          height: \"23px\",\n          width: \"23px\",\n          marginBottom: \"10px\",\n        },\n      }}\n    >\n      {icon}{\" \"}\n      <Box className=\"muted\" sx={{ fontSize: \"14px\", fontStyle: \"italic\" }}>\n        {description}\n      </Box>\n    </Box>\n  );\n};\nconst TLSHelpBox = () => {\n  const params = useParams();\n  const tenantNameParam = params.tenantName || \"\";\n  const tenantNamespaceParam = params.tenantNamespace || \"\";\n  const namespace = useSelector((state: AppState) => {\n    let defaultNamespace = \"<namespace>\";\n    if (tenantNamespaceParam !== \"\") {\n      return tenantNamespaceParam;\n    }\n    if (state.createTenant.fields.nameTenant.namespace !== \"\") {\n      return state.createTenant.fields.nameTenant.namespace;\n    }\n    return defaultNamespace;\n  });\n\n  const tenantName = useSelector((state: AppState) => {\n    let defaultTenantName = \"<tenant-name>\";\n    if (tenantNameParam !== \"\") {\n      return tenantNameParam;\n    }\n\n    if (state.createTenant.fields.nameTenant.tenantName !== \"\") {\n      return state.createTenant.fields.nameTenant.tenantName;\n    }\n    return defaultTenantName;\n  });\n\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n        [`@media (max-width: ${breakPoints.sm}px)`]: {\n          marginTop: 0,\n        },\n      }}\n    >\n      <Box\n        sx={{\n          display: \"flex\",\n          flexFlow: \"column\",\n        }}\n      >\n        <FeatureItem\n          icon={<CertificateIcon />}\n          description={`TLS Certificates Warning`}\n        />\n        <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n          Automatic certificate generation is not enabled.\n          <br />\n          <br />\n          If you wish to continue only with <b>custom certificates</b> make sure\n          they are valid for the following internode hostnames, i.e.:\n          <br />\n          <br />\n          <Box\n            sx={{ fontSize: \"14px\", fontStyle: \"italic\" }}\n            className={\"muted\"}\n          >\n            minio.{namespace}\n            <br />\n            minio.{namespace}.svc\n            <br />\n            minio.{namespace}.svc.&#x3C;cluster domain&#x3E;\n            <br />\n            *.{tenantName}-hl.{namespace}.svc.&#x3C;cluster domain&#x3E;\n            <br />\n            *.{namespace}.svc.&#x3C;cluster domain&#x3E;\n          </Box>\n          <br />\n          Replace <em>&#x3C;tenant-name&#x3E;</em>,{\" \"}\n          <em>&#x3C;namespace&#x3E;</em> and\n          <em>&#x3C;cluster domain&#x3E;</em> with the actual values for your\n          MinIO tenant.\n          <br />\n          <br />\n          You can learn more at our{\" \"}\n          <a\n            href=\"https://min.io/docs/minio/kubernetes/upstream/operations/network-encryption.html?ref=op#id5\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            documentation\n          </a>\n          .\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default TLSHelpBox;\n"],"names":["ConfigureMain","styled","div","marginRight","marginBottom","display","flexGrow","flexFlow","alignItems","justifyContent","borderBottom","flex","minWidth","marginLeft","Configure","dispatch","useAppDispatch","exposeMinIO","useSelector","state","createTenant","fields","configure","exposeConsole","exposeSFTP","setDomains","consoleDomain","minioDomains","tenantCustom","tenantEnvVars","envVars","tenantSecurityContext","customRuntime","runtimeClassName","validationErrors","setValidationErrors","useState","updateField","useCallback","field","value","updateAddField","pageName","useEffect","customAccountValidation","fieldKey","required","runAsUser","customValidation","parseInt","customValidationMessage","runAsGroup","fsGroup","minioExtraValidations","map","validation","index","concat","toString","pattern","customPatternMessage","commonVal","commonFormValidation","isPageValid","valid","Object","keys","length","cleanValidation","fieldName","clearValidationError","_jsx","children","_jsxs","FormLayout","withBorders","containerPadding","Box","className","H3Section","style","margin","Switch","id","name","checked","onChange","e","target","label","Grid","item","xs","InputBox","placeholder","error","domain","updateMinIODomain","copyDomains","IconButton","size","onClick","addNewMinIODomain","disabled","AddIcon","removeMinIODomain","RemoveIcon","type","min","Select","fsGroupChangePolicy","options","runAsNonRoot","container","envVar","key","existingEnvVars","setEnvVars","keyPair","i","push","filter","fIndex","IDPActiveDirectory","idpSelection","identityProvider","ADURL","ADSkipTLS","ADServerInsecure","ADGroupSearchBaseDN","ADGroupSearchFilter","ADUserDNs","ADGroupDNs","ADLookupBindDN","ADLookupBindPassword","ADUserDNSearchBaseDN","ADUserDNSearchFilter","ADServerStartTLS","customIDPValidation","sx","gap","marginTop","_","Fragment","setIDPADUsrAtIndex","userDN","Tooltip","tooltip","addIDPADUsrAtIndex","removeIDPADUsrAtIndex","setIDPADGroupAtIndex","addIDPADGroupAtIndex","removeIDPADGroupAtIndex","IDPOpenID","openIDConfigurationURL","openIDClientID","openIDSecretID","openIDClaimName","openIDScopes","IDPBuiltIn","accessKeys","secretKeys","gridTemplateColumns","setIDPUsrAtIndex","accessKey","setIDPPwdAtIndex","secretKey","height","addIDPNewKeyPair","removeIDPKeyPairAtIndex","getRandomString","ShuffleIcon","IdentityProvider","padding","RadioGroup","currentValue","setIDP","selectorOptions","icon","UsersIcon","OIDCIcon","LDAPIcon","CertificateRow","_ref","theme","get","breakPoints","md","Security","enableTLS","security","enableAutoCert","enableCustomCerts","minioCertificates","certificates","minioServerCertificates","minioClientCertificates","caCertificates","minioCAsCertificates","description","TLSHelpBox","FileSelector","fileName","encodedValue","addFileToKeyPair","accept","cert","returnEncodedData","event","addKeyPair","deleteKeyPair","addFileToClientKeyPair","addClientKeyPair","deleteClientKeyPair","addFileToCaCertificates","addCaCertificate","deleteCaCertificate","VaultKMSAdd","encryptionTab","encryption","vaultEndpoint","vaultEngine","vaultNamespace","vaultPrefix","vaultAppRoleEngine","vaultId","vaultSecret","vaultRetry","vaultPing","encryptionValidation","AzureKMSAdd","azureEndpoint","azureTenantID","azureClientID","azureClientSecret","GCPKMSAdd","gcpProjectID","gcpEndpoint","gcpClientEmail","gcpClientID","gcpPrivateKeyID","gcpPrivateKey","GemaltoKMSAdd","gemaltoEndpoint","gemaltoToken","gemaltoDomain","gemaltoRetry","AWSKMSAdd","awsEndpoint","awsRegion","awsKMSKey","awsAccessKey","awsSecretKey","awsToken","Encryption","replicas","rawConfiguration","enableEncryption","encryptionType","enableCustomCertsForKES","kesServerCertificate","minioMTLSCertificate","kmsMTLSCertificate","kmsCA","kesSecurityContext","encryptionAvailable","encoded_key","encoded_cert","indicatorLabels","Tabs","horizontal","currentTabOrPath","onTabClick","tabConfig","content","CodeEditor","mode","editorHeight","SimpleHeader","addFileKESServerCert","addFileMinIOMTLSCert","addFileKMSMTLSCert","addFileKMSCa","AffinityContainer","Affinity","podAffinity","affinity","nodeSelectorLabels","withPodAntiAffinity","keyValuePairs","nodeSelectorPairs","tolerations","loading","setLoading","keyValueMap","setKeyValueMap","keyOptions","setKeyOptions","api","invoke","then","res","k","catch","err","setModalErrorSnackMessage","vl","kvp","kvs","a","indexOf","join","splittedLabels","split","forEach","splitItem","updateToleration","alterToleration","setTolerationInfo","tolerationValue","InputLabel","displayInColumn","newLKP","arrCp","setKeyValuePairs","v","tol","_tol$tolerationSecond","TolerationSelector","effect","onEffectChange","tolerationKey","onTolerationKeyChange","operator","onOperatorChange","onValueChange","tolerationSeconds","seconds","onSecondsChange","addNewToleration","removeToleration","Images","customImage","imageName","customDockerhub","imageRegistry","imageRegistryUsername","imageRegistryPassword","kesImage","SizePreview","nodes","tenantSize","memoryNode","resourcesMemoryRequest","ecParity","distribution","ecParityCalc","cpuToUse","resourcesCPURequest","integrationSelection","usableInformation","storageFactors","find","element","erasureCode","fontSize","Table","TableBody","TableRow","TableCell","scope","textAlign","typeSelection","storageClass","disks","niceBytes","pvSize","persistentVolumes","rawCapacity","maxCapacity","Math","floor","maxFailureTolerations","CPU","memory","drivesPerServer","driveSize","sizeUnit","AddNamespaceModal","namespace","nameTenant","addNamespaceLoading","addNSLoading","addNamespaceOpen","addNSOpen","ConfirmDialog","title","confirmText","confirmButtonProps","variant","isOpen","titleIcon","ConfirmModalIcon","isLoading","onConfirm","createNamespaceAsync","onClose","closeAddNSModal","confirmationContent","ProgressBar","maxWidth","whiteSpace","wordWrap","formToRender","showNSCreateButton","namespaceError","openAddNSConfirm","debounceNamespace","useMemo","debounce","validateNamespaceAsync","cancel","setNamespace","overlayIcon","overlayAction","addNamespace","openAddNSModal","NameTenantField","tenantName","tenantNameError","setTenantName","selectedStorageClass","selectedStorageType","storageClasses","features","selFeatures","isValid","IMkEnvs","default","width","minHeight","NamespaceSelector","setStorageType","storageType","mkPanelConfigurations","TenantSize","sm","useBackground","TenantResources","formRender","setFormRender","setConfiguration","resourcesConfigurations","includes","NameTenantMain","requiredPages","CreateTenantButton","addSending","addingTenant","validPages","enabled","every","Button","color","createTenantAsync","NewTenantCredentials","navigate","useNavigate","showNewCredentials","createdAccount","CredentialsPrompt","newServiceAccount","open","closeModal","resetAddTenantForm","entity","AddTenant","cancelButton","action","createButton","componentRender","wizardSteps","buttons","advancedOnly","PageHeaderWrapper","BackLink","PageLayout","customBorderPadding","Wizard","linearMode","aws","HelpBox","iconComponent","StorageIcon","help","FeatureItem","fontStyle","params","useParams","tenantNameParam","tenantNamespaceParam","tenantNamespace","border","borderRadius","CertificateIcon","href","rel"],"sourceRoot":""}