{"version":3,"file":"static/js/843.d7483934.chunk.js","mappings":"8QA8IA,KAAeA,EAAAA,EAAAA,IAtGA,SAACC,GAAY,OAC1BC,EAAAA,EAAAA,IAAa,UACRC,EAAAA,IACF,GAmGL,EAjG0B,SAAH,GASF,IARnBC,EAAK,EAALA,MAAM,EAAD,EACLC,MAAAA,OAAK,MAAG,GAAE,MACVC,QAAAA,OAAO,MAAG,GAAE,MACZC,KAAAA,OAAI,MAAG,OAAM,EACbC,EAAO,EAAPA,QACAC,EAAc,EAAdA,eACgB,GADF,EACdC,SAAgB,EAChBC,cAAAA,OAAY,MAAG,QAAO,EAEtB,OACE,UAAC,WAAc,YACb,SAAC,KAAI,CAACC,MAAI,EAACC,GAAI,GAAIC,GAAI,CAAEC,aAAc,QAAS,UAC9C,UAAC,IAAU,CAACC,UAAWR,EAAQS,WAAW,WACxC,0BAAOZ,IACM,KAAZC,IACC,gBAAKU,UAAWR,EAAQU,iBAAiB,UACvC,SAAC,IAAO,CAACC,MAAOb,EAASc,UAAU,YAAW,UAC5C,gBAAKJ,UAAWR,EAAQF,QAAQ,UAC9B,SAAC,MAAQ,gBAQrB,SAAC,KAAI,CACHM,MAAI,EACJC,GAAI,GACJQ,MAAO,CACLC,UAAWX,EACXY,SAAU,OACVC,OAAQ,qBACR,UAEF,SAAC,IAAU,CACTpB,MAAOA,EACPqB,SAAUlB,EACVmB,SAAU,SAACC,GACTlB,EAAe,KAAM,KAAMkB,EAAIC,OAAOxB,MACxC,EACAyB,GAAI,eACJC,QAAS,GACTT,MAAO,CACLU,SAAU,GACVC,gBAAiB,UACjBC,WACE,+EACFC,UAAWvB,GAAgB,UAC3BwB,MAAO,gBAIb,SAAC,KAAI,CACHvB,MAAI,EACJC,GAAI,GACJC,GAAI,CACFsB,WAAY,UACZZ,OAAQ,oBACRa,UAAW,GACX,UAEF,SAAC,IAAG,CACFvB,GAAI,CACFwB,QAAS,OACTC,WAAY,SACZT,QAAS,MACTU,aAAc,MACdC,eAAgB,WAChB,WAAY,CACVC,OAAQ,OACRC,MAAO,OACPb,QAAS,MACT,aAAc,CACZc,WAAY,OAGhB,UAEF,SAAC,IAAc,CAACtC,QAAS,oBAAoB,UAC3C,SAAC,IAAe,CAACuC,KAAMzC,EAAM,UAC3B,SAAC,MAAM,CACL0C,KAAM,SACNjB,GAAI,mBACJkB,MAAM,SAAC,MAAQ,IACfZ,MAAO,UACPa,QAAS,sBAQzB,G,oPC2CA,GAAehD,EAAAA,EAAAA,IAvIA,SAACC,GAAY,OAC1BC,EAAAA,EAAAA,IAAa,kCACRC,EAAAA,IACA8C,EAAAA,IAAa,IAChBC,YAAa,CACXC,SAAU,IACVC,WAAY,SACZ7B,SAAU,SACV8B,aAAc,WACdC,UAAW,GAEbC,eAAgB,CACdC,OAAQ,SACR,4BAA6B,CAC3BC,SAAU,YAGXC,EAAAA,IAAe,IAClBzC,YAAW,kBACNd,EAAAA,GAAAA,YAAqB,IACxBwD,WAAY,WAEdC,kBAAiB,kBACZzD,EAAAA,GAAAA,kBAA2B,IAC9BgD,SAAU,OACV3B,OAAQ,oBACRqC,YAAa,WAEd,GA2GL,EAzGqB,SAAH,GAYI,IAXpBxD,EAAK,EAALA,MACAG,EAAO,EAAPA,QACAkB,EAAQ,EAARA,SACAG,EAAE,EAAFA,GACAiC,EAAI,EAAJA,KAAK,EAAD,EACJC,SAAAA,OAAQ,OAAQ,MAChBzD,QAAAA,OAAO,MAAG,GAAE,EACZ0D,EAAQ,EAARA,SAAS,EAAD,EACRC,MAAAA,OAAK,MAAG,GAAE,MACVC,OAAAA,OAAM,MAAG,GAAE,MACX9D,MAAAA,OAAK,MAAG,GAAE,EAEV,GAA4C+D,EAAAA,EAAAA,WAAS,GAAM,eAApDC,EAAgB,KAAEC,EAAe,KAExC,OACE,SAAC,WAAc,WACb,UAACC,EAAA,GAAI,CACH1D,MAAI,EACJC,GAAI,GACJG,UAAS,UAAKR,EAAQ+C,eAAc,YAAI/C,EAAQ+D,YAAW,YACzD/D,EAAQgE,eAAc,YACV,KAAVP,EAAezD,EAAQiE,aAAe,IAAK,UAEpC,KAAVpE,IACC,UAACqE,EAAA,EAAU,CACTC,QAAS9C,EACTb,UAAS,UAAe,KAAViD,EAAezD,EAAQoE,gBAAkB,GAAE,YACvDpE,EAAQS,YACP,WAEH,4BACGZ,EACA2D,EAAW,IAAM,MAEP,KAAZ1D,IACC,gBAAKU,UAAWR,EAAQU,iBAAiB,UACvC,SAAC2D,EAAA,EAAO,CAAC1D,MAAOb,EAASc,UAAU,YAAW,UAC5C,gBAAKJ,UAAWR,EAAQF,QAAQ,UAC9B,SAAC,MAAQ,aAQpB8D,GAA8B,KAAVhE,GACnB,iBAAKY,UAAWR,EAAQoD,iBAAiB,WACvC,kBACEd,KAAK,OACLgB,KAAMA,EACNpC,SAAU,SAACoD,GACT,IAAMC,EAAWC,IAAIF,EAAG,uBAAwB,KCnHrC,SAACG,EAAUC,GACpC,IAAMC,EAAOF,EAAIrD,OAAOwD,MAAM,GACxBC,EAAS,IAAIC,WACnBD,EAAOE,cAAcJ,GAErBE,EAAOG,OAAS,WAGd,IAAMC,EAAaJ,EAAOK,OAC1B,GAAID,EAAY,CACd,IAAME,EAAYF,EAAWG,WAAWC,MAAM,WAErB,IAArBF,EAAUG,QACZZ,EAASS,EAAU,GAEvB,CACF,CACF,CDmGgBI,CAAYjB,GAAG,SAACkB,GACdtE,EAASsE,EAAMjB,EACjB,GACF,EACAb,OAAQA,EACRF,SAAUA,EACVD,SAAUA,EACV/C,UAAWR,EAAQ+C,iBAGV,KAAVnD,IACC,SAAC6F,EAAA,EAAU,CACT9D,MAAM,UACN,aAAW,iBACX+D,UAAU,OACVC,QAAS,WACP9B,GAAgB,EAClB,EACA+B,eAAe,EACfC,oBAAoB,EACpBC,KAAK,QAAO,UAEZ,SAACC,EAAA,EAAU,MAIJ,KAAVtC,IAAgB,SAACuC,EAAA,EAAU,CAACC,aAAcxC,QAG7C,iBAAKjD,UAAWR,EAAQkG,aAAa,WACnC,gBAAK1F,UAAWR,EAAQ0C,YAAY,SAAE9C,KACtC,SAAC6F,EAAA,EAAU,CACT9D,MAAM,UACN,aAAW,iBACX+D,UAAU,OACVC,QAAS,WACP9B,GAAgB,EAClB,EACA+B,eAAe,EACfC,oBAAoB,EACpBC,KAAK,QAAO,UAEZ,SAACK,EAAA,EAAc,aAO7B,G,yCEnKMC,GAASC,E,SAAAA,GAAO,KAAPA,CAAY,6IAQ3B,K,2OCwLA,KAAe7G,EAAAA,EAAAA,IA3KA,SAACC,GAAY,OAC1BC,EAAAA,EAAAA,GAAa,CACX4G,gBAAiB,CACfC,MAAO,OACPC,WAAY,iBACZxE,aAAc,mBAEhByE,gBAAiB,CAAEF,MAAO,SAC1BG,mBAAoB,CAClBxE,OAAQ,OACRc,OAAQ,EACRhC,OAAQ,oBACR2F,WAAY,OACZC,aAAc,EACd,OAAQ,CACNzD,WAAY,QAEd,QAAS,CACP7B,QAAS,IAGbuF,kBAAmB,CACjBlF,MAAO,UACPG,QAAS,OACTC,WAAY,SACZ+E,SAAU,OACVvG,aAAc,EACd,WAAY,CACV4C,WAAY,SAGhB4D,mBAAoB,CAClBpF,MAAO,UACP,WAAY,CACVwB,WAAY,SAGhB6D,iBAAkB,CAChBhG,OAAQ,oBACR4F,aAAc,EACdjF,MAAO,UACPsF,cAAe,YACfC,UAAW,SACXpG,UAAW,IACXP,aAAc,IAEhB4G,qBAAsB,CACpB7F,QAAS,WACT8F,aAAc,oBACd,QAAS,CACPC,SAAU,GAEZ,QAAS,CACP9F,SAAU,GACV+F,YAAa,GACbC,QAAS,IAEX,SAAU,CACRhG,SAAU,KAGdiG,oBAAqB,CACnB7F,MAAO,SACP,WAAY,CACVwB,WAAY,SAGhBsE,mBAAoB,CAClB9F,MAAO,MACP,WAAY,CACVwB,WAAY,UAGf,GAkGL,EA1FuB,SAAH,GAII,IAHtBnD,EAAO,EAAPA,QACAyG,EAAe,EAAfA,gBAAgB,EAAD,EACfiB,SAAAA,OAAQ,MAAG,WAAO,EAAC,EAEbC,EAAelB,EAAgBmB,SAAW,GAE1CC,EAASC,EAAAA,GAAAA,QAAiBrB,EAAgBoB,QAC1CE,EAAMD,EAAAA,GAAAA,MAERE,EAAuB,EACvBC,EAA4B,GAC5BC,EAAgC,GACpC,GAAIL,EAAQ,CACV,IAAIM,EAAmBN,EAAOO,KAAKL,GACnCC,EAAeG,EAAiBE,GAAG,QACnCJ,EAAoBE,EACjBG,MAAMC,EAAAA,GAAAA,WAAoB,CAAEC,KAAM,KAClCC,QAAQ,QACRC,QAAQ,CAAEC,UAAW,OAAQC,sBAAuB,IACnDZ,GAAgB,IAAMA,EAAe,KACvCE,EAAwBlI,EAAQwH,qBAE9BQ,EAAe,KACjBE,EAAwBlI,EAAQyH,mBAC5BO,EAAe,IACjBC,EAAoBE,EACjBG,MAAMC,EAAAA,GAAAA,WAAoB,CAAEM,QAAS,KACrCJ,QAAQ,QAAS,WACjBC,QAAQ,CAAEC,UAAW,OAAQC,sBAAuB,IACnDT,EAAiBE,GAAG,YAAc,IACpCJ,EAAoB,YAI5B,CAEA,OACE,SAAC,IAAI,CAEHzF,QAAQ,WACRb,MAAM,UACNnB,UAAWR,EAAQ0G,mBACnB7G,OACE,UAAC,IAAS,YACR,SAAC,KAAI,CAACO,MAAI,EAACC,GAAI,EAAGG,UAAWR,EAAQsG,gBAAgB,UACnD,SAAC,MAAe,OAElB,UAAC,KAAI,CAAClG,MAAI,EAACC,GAAI,GAAIG,UAAWR,EAAQyG,gBAAgB,WACpD,SAAC,IAAU,CAACjE,QAAQ,YAAYV,QAAQ,QAAQgH,cAAY,WACzDrC,EAAgBnD,QAEnB,UAAC,IAAG,CAAC9C,UAAWR,EAAQ6G,kBAAkB,WACxC,SAAC,IAAa,CAAClF,MAAM,UAAUJ,SAAS,UAAU,QAElD,iBAAMf,UAAW,QAAQ,SAAC,iBAC1B,0BAAOqH,EAAOkB,SAAS,oBAEzB,UAAC,IAAG,CAACvI,UAAWR,EAAQ6G,kBAAkB,WACxC,SAAC,IAAc,CAAClF,MAAM,UAAUJ,SAAS,UAAU,QAEnD,iBAAMf,UAAW,QAAQ,SAAC,qBAC1B,iBAAMA,UAAW0H,EAAsB,SAAED,QAE3C,SAAC,IAAO,KACR,mBACA,SAAC,IAAG,CAACzH,UAAWR,EAAQ+G,mBAAmB,UACzC,iBAAMvG,UAAU,QAAO,mBAAKmH,EAAarC,OAAM,qBAEjD,SAAC,IAAI,CAAC9E,UAAWR,EAAQgH,iBAAiB,SACvCW,EAAaqB,KAAI,SAACC,EAAKC,GAAK,OAC3B,UAAC,KAAQ,CAEP1I,UAAWR,EAAQmH,qBAAqB,WAExC,SAAC,IAAc,WACb,SAAC,IAAY,OAEf,SAAC,IAAY,CAACgC,QAASF,MAAO,UANtBA,EAAG,YAAIC,GAON,YAMrBxB,SAAUA,GA9CLjB,EAAgBnD,KAiD3B,G,qYC5KM8F,EAAa,SAAHC,GAMT,IAADC,EAAAD,EALJE,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EAAAE,EAAAH,EACV1I,MAAAA,OAAK,IAAA6I,EAAG,GAAEA,EAKV,OAAY,OAALD,QAAK,IAALA,GAAAA,EAAOjE,QACZmE,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAAA,OACE/I,MAAO,CACLU,SAAU,SACV4B,WAAY,QACZwG,SAEDhJ,KAEHiJ,EAAAA,EAAAA,KAAA,OACE/I,MAAO,CACLiB,QAAS,OACT+H,IAAK,MACL5G,SAAU,SACVb,WAAY,OACZuH,SAEDJ,EAAMP,KAAI,SAACc,GACV,OAAOL,EAAAA,EAAAA,MAAA,QAAM5I,MAAO,CAAEU,SAAU,QAASoI,SAAA,CAAC,KAAGG,IAC/C,SAGF,IACN,EAuDA,EArDsB,SAAHC,GAIZ,IAADC,EAAAD,EAHJE,SAIMC,EAtDc,WAAyC,IAAxCD,EAA6BE,UAAA7E,OAAA,QAAA8E,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChDE,EAAcC,OAAOC,KAAKN,GAChC,OAAOI,EAAYrB,KAAI,SAACwB,GACtB,IAAMC,EAAeR,EAASO,IAAY,CAAC,EAC3C,MAAO,CACLlH,KAAMkH,GAAW,GACjBE,WAAYD,EAAaC,YAAc,GAEvCC,MAAOF,EAAaE,OAAS,GAE7BC,MAAOH,EAAaG,OAAS,GAC7BC,KAAMJ,EAAaI,MAAQ,GAE/B,GACF,CAwCsBC,MAJZ,IAAAd,EAAG,CAAC,EAACA,GAKb,OAAOE,EAAY5E,QACjBmE,EAAAA,EAAAA,MAAC3F,EAAAA,GAAI,CAACzD,GAAI,GAAIE,aAAc,MAAMoJ,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAACmB,EAAAA,IAAG,CACFC,aAAW,EACX1K,GAAI,CACFQ,UAAW,QACXC,SAAU,OACVO,QAAS,GACTqI,SAEDO,EAAYlB,KAAI,SAACiC,GAChB,OACExB,EAAAA,EAAAA,MAACsB,EAAAA,IAAG,CACFC,aAAW,EACX1K,GAAI,CACFwB,QAAS,OACTmB,SAAU,SACV4G,IAAK,MACLqB,WAAY,EACZC,YAAa,EACbtJ,UAAW,GACX8H,SAAA,EAEFF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,KACE/I,MAAO,CACLU,SAAU,SACV4B,WAAY,QACZwG,SACH,iBAEI,IACJsB,EAAM3H,SAETsG,EAAAA,EAAAA,KAACR,EAAU,CAACzI,MAAO,QAAS4I,MAAY,OAAL0B,QAAK,IAALA,OAAK,EAALA,EAAOL,SAC1ChB,EAAAA,EAAAA,KAACR,EAAU,CAACzI,MAAO,OAAQ4I,MAAY,OAAL0B,QAAK,IAALA,OAAK,EAALA,EAAOJ,QACzCjB,EAAAA,EAAAA,KAACR,EAAU,CAACzI,MAAO,QAAS4I,MAAY,OAAL0B,QAAK,IAALA,OAAK,EAALA,EAAON,SAC1Cf,EAAAA,EAAAA,KAACR,EAAU,CAACzI,MAAO,aAAc4I,MAAY,OAAL0B,QAAK,IAALA,OAAK,EAALA,EAAOP,eAGrD,SAGF,IACN,ECotDA,GAAelL,EAAAA,EAAAA,IA5wDA,SAACC,GAAY,OAC1BC,EAAAA,EAAAA,IAAY0L,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACTC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,IAAY,IACfC,aAAc,CACZjK,MAAO,MACPJ,SAAU,SACVyB,OAAQ,kBACRlB,QAAS,OACTC,WAAY,SACZ,SAAU,CACRuF,YAAa,QACbpF,OAAQ,GACRC,MAAO,OAGV,GAuvDL,EArvDyB,SAAHkH,GAAwC,IAADwC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAjC5N,GAAOqJ,EAAPrJ,QACpB6N,IAAWC,EAAAA,EAAAA,MAEXC,IAASC,EAAAA,EAAAA,KAAY,SAACC,GAAe,OAAKA,EAAMC,QAAQC,UAAU,IACxEC,IAAwDzK,EAAAA,EAAAA,UAAiB,GAAE0K,IAAAC,EAAAA,EAAAA,GAAAF,GAAA,GAApEG,GAAoBF,GAAA,GAAEG,GAAuBH,GAAA,GACpDI,IACE9K,EAAAA,EAAAA,UAAiB,IAAG+K,IAAAJ,EAAAA,EAAAA,GAAAG,GAAA,GADfE,GAA0BD,GAAA,GAAEE,GAA6BF,GAAA,GAEhEG,IAAkDlL,EAAAA,EAAAA,WAAkB,GAAMmL,IAAAR,EAAAA,EAAAA,GAAAO,GAAA,GAAnEE,GAAiBD,GAAA,GAAEE,GAAoBF,GAAA,GAC9CG,IAA4CtL,EAAAA,EAAAA,UAAiB,SAAQuL,IAAAZ,EAAAA,EAAAA,GAAAW,GAAA,GAA9DE,GAAcD,GAAA,GAAEE,GAAiBF,GAAA,GACxCG,IAAgC1L,EAAAA,EAAAA,UAAiB,KAAI2L,IAAAhB,EAAAA,EAAAA,GAAAe,GAAA,GAA9CE,GAAQD,GAAA,GAAEE,GAAWF,GAAA,GAC5BG,IAA0B9L,EAAAA,EAAAA,UAAiB,IAAG+L,IAAApB,EAAAA,EAAAA,GAAAmB,GAAA,GAAvCE,GAAKD,GAAA,GAAEE,GAAQF,GAAA,GACtBG,IACElM,EAAAA,EAAAA,WAAkB,GAAMmM,IAAAxB,EAAAA,EAAAA,GAAAuB,GAAA,GADnBE,GAAqBD,GAAA,GAAEE,GAAwBF,GAAA,GAEtDG,IAA8CtM,EAAAA,EAAAA,UAA0B,CACtEuM,QAAS,OACTC,oBAAqB,SACrBC,WAAY,OACZC,cAAc,EACdC,UAAW,SACXC,IAAAjC,EAAAA,EAAAA,GAAA2B,GAAA,GANKO,GAAeD,GAAA,GAAEE,GAAkBF,GAAA,GAO1CG,IAAgC/M,EAAAA,EAAAA,UAAc,IAAGgN,IAAArC,EAAAA,EAAAA,GAAAoC,GAAA,GAA1CzG,GAAQ0G,GAAA,GAAEC,GAAWD,GAAA,GAC5BE,IAAoDlN,EAAAA,EAAAA,UAAc,MAAKmN,IAAAxC,EAAAA,EAAAA,GAAAuC,GAAA,GAAhEE,GAAkBD,GAAA,GAAEE,GAAqBF,GAAA,GAChDG,IAAgDtN,EAAAA,EAAAA,UAAc,MAAKuN,IAAA5C,EAAAA,EAAAA,GAAA2C,GAAA,GAA5DE,GAAgBD,GAAA,GAAEE,GAAmBF,GAAA,GAC5CG,IAAwD1N,EAAAA,EAAAA,UAAc,MAAK2N,IAAAhD,EAAAA,EAAAA,GAAA+C,GAAA,GAApEE,GAAoBD,GAAA,GAAEE,GAAuBF,GAAA,GACpDG,IAAoD9N,EAAAA,EAAAA,UAAc,MAAK+N,IAAApD,EAAAA,EAAAA,GAAAmD,GAAA,GAAhEE,GAAkBD,GAAA,GAAEE,GAAqBF,GAAA,GAChDG,IAAgDlO,EAAAA,EAAAA,UAAc,MAAKmO,IAAAxD,EAAAA,EAAAA,GAAAuD,GAAA,GAA5DE,GAAgBD,GAAA,GAAEE,GAAmBF,GAAA,GAC5CG,IACEtO,EAAAA,EAAAA,WAAkB,GAAMuO,IAAA5D,EAAAA,EAAAA,GAAA2D,GAAA,GADnBE,GAAyBD,GAAA,GAAEE,GAA4BF,GAAA,GAE9DG,IAAoD1O,EAAAA,EAAAA,WAAkB,GAAM2O,IAAAhE,EAAAA,EAAAA,GAAA+D,GAAA,GAArEE,GAAkBD,GAAA,GAAEE,GAAqBF,GAAA,GAChDG,IACE9O,EAAAA,EAAAA,UAAkC,MAAK+O,IAAApE,EAAAA,EAAAA,GAAAmE,GAAA,GADlCE,GAA6BD,GAAA,GAAEE,GAAgCF,GAAA,GAEtEG,IACElP,EAAAA,EAAAA,UAAkC,MAAKmP,IAAAxE,EAAAA,EAAAA,GAAAuE,GAAA,GADlCE,GAA0BD,GAAA,GAAEE,GAA6BF,GAAA,GAEhEG,IACEtP,EAAAA,EAAAA,UAAyB,MAAKuP,IAAA5E,EAAAA,EAAAA,GAAA2E,GAAA,GADzBE,GAAoBD,GAAA,GAAEE,GAAuBF,GAAA,GAEpDG,IAA8D1P,EAAAA,EAAAA,UAE5D,IAAG2P,IAAAhF,EAAAA,EAAAA,GAAA+E,GAAA,GAFEE,GAAuBD,GAAA,GAAEE,GAA0BF,GAAA,GAG1DG,IAAoD9P,EAAAA,EAAAA,WAAkB,GAAM+P,IAAApF,EAAAA,EAAAA,GAAAmF,GAAA,GAArEE,GAAkBD,GAAA,GAAEE,GAAqBF,GAAA,GAChDG,IAAsClQ,EAAAA,EAAAA,WAAkB,GAAMmQ,IAAAxF,EAAAA,EAAAA,GAAAuF,GAAA,GAAvDE,GAAWD,GAAA,GAAEE,GAAcF,GAAA,GAClCG,IACEtQ,EAAAA,EAAAA,WAAkB,GAAMuQ,IAAA5F,EAAAA,EAAAA,GAAA2F,GAAA,GADnBE,GAAsBD,GAAA,GAAEE,GAAyBF,GAAA,GAExDG,IACE1Q,EAAAA,EAAAA,UAAkC,MAAK2Q,IAAAhG,EAAAA,EAAAA,GAAA+F,GAAA,GADlCE,GAAwBD,GAAA,GAAEE,GAA2BF,GAAA,GAE5DG,IACE9Q,EAAAA,EAAAA,UAAkC,MAAK+Q,IAAApG,EAAAA,EAAAA,GAAAmG,GAAA,GADlCE,GAAsBD,GAAA,GAAEE,GAAyBF,GAAA,GAExDG,IAAoDlR,EAAAA,EAAAA,UAClD,MACDmR,IAAAxG,EAAAA,EAAAA,GAAAuG,GAAA,GAFME,GAAkBD,GAAA,GAAEE,GAAqBF,GAAA,GAGhDG,IACEtR,EAAAA,EAAAA,UAAyB,MAAKuR,IAAA5G,EAAAA,EAAAA,GAAA2G,GAAA,GADzBE,GAAoBD,GAAA,GAAEE,GAAuBF,GAAA,GAEpDG,IAAgD1R,EAAAA,EAAAA,UAC9C,MACD2R,IAAAhH,EAAAA,EAAAA,GAAA+G,GAAA,GAFME,GAAgBD,GAAA,GAAEE,GAAmBF,GAAA,GAG5CG,IAAgD9R,EAAAA,EAAAA,UAAc,CAAC,GAAE+R,IAAApH,EAAAA,EAAAA,GAAAmH,GAAA,GAA1DE,GAAgBD,GAAA,GAAEE,GAAmBF,GAAA,GACtCG,GAAkB,SAACC,GACvBF,IAAoBG,EAAAA,EAAAA,IAAqBJ,GAAkBG,GAC7D,EACAE,IAAsCrS,EAAAA,EAAAA,WAAkB,GAAMsS,IAAA3H,EAAAA,EAAAA,GAAA0H,GAAA,GAAvDE,GAAWD,GAAA,GAAEE,GAAcF,GAAA,IAGlCG,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAsC,GAE1C,GAAItH,GAAmB,CAgEY,IAADuH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAmCFC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EA0BIC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EA6BFC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EA1FhC,GA/DA5B,EAAuB,CACrB,CACE6B,SAAU,WACV1U,UAAU,EACV5D,MAAO2P,GACP4I,iBAAkBC,SAAS7I,IAAY,EACvC8I,wBAAyB,qCAE3B,CACEH,SAAU,gCACV1U,UAAU,EACV5D,MAAO4Q,GAAgBF,UACvB6H,iBACgC,KAA9B3H,GAAgBF,WAChB8H,SAAS5H,GAAgBF,WAAa,EACxC+H,wBAAwB,8CAE1B,CACEH,SAAU,iCACV1U,UAAU,EACV5D,MAAO4Q,GAAgBJ,WACvB+H,iBACiC,KAA/B3H,GAAgBJ,YAChBgI,SAAS5H,GAAgBJ,YAAc,EACzCiI,wBAAwB,+CAE1B,CACEH,SAAU,8BACV1U,UAAU,EACV5D,MAAO4Q,GAAgBN,QACvBiI,iBAC8B,KAA5B3H,GAAgBN,SAChBkI,SAAS5H,GAAgBN,SAAY,EACvCmI,wBAAwB,6CAIxBlG,KACFkE,EAAoB,GAAAiC,QAAAC,EAAAA,EAAAA,GACflC,GAAoB,CACvB,CACE6B,SAAU,YACV1U,UAAU,EACV5D,OAA2B,OAApBuV,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBqD,cAAe,IAE9C,CACEN,SAAU,aACV1U,UAAU,EACV5D,OAA2B,OAApBuV,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBsD,eAAgB,IAE/C,CACEP,SAAU,YACV1U,UAAU,EACV5D,OAA2B,OAApBuT,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBqF,cAAe,IAE9C,CACEN,SAAU,aACV1U,UAAU,EACV5D,OAA2B,OAApBuT,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBsF,eAAgB,OAK5B,UAAnBtJ,GACFkH,EAAoB,GAAAiC,QAAAC,EAAAA,EAAAA,GACflC,GAAoB,CACvB,CACE6B,SAAU,iBACV1U,UAAU,EACV5D,MAAyB,OAAlBmR,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB2H,UAE7B,CACER,SAAU,WACV1U,UAAU,EACV5D,MAAyB,OAAlBmR,SAAkB,IAAlBA,IAA2B,QAATuF,EAAlBvF,GAAoB4H,eAAO,IAAArC,OAAT,EAAlBA,EAA6BjV,IAEtC,CACE6W,SAAU,eACV1U,UAAU,EACV5D,MAAyB,OAAlBmR,SAAkB,IAAlBA,IAA2B,QAATwF,EAAlBxF,GAAoB4H,eAAO,IAAApC,OAAT,EAAlBA,EAA6BqC,QAEtC,CACEV,SAAU,aACV1U,UAAU,EACV5D,MAAyB,OAAlBmR,SAAkB,IAAlBA,IAA0B,QAARyF,EAAlBzF,GAAoB8H,cAAM,IAAArC,OAAR,EAAlBA,EAA4BsC,KACnCX,iBAAkBC,SAA2B,OAAlBrH,SAAkB,IAAlBA,IAA0B,QAAR0F,EAAlB1F,GAAoB8H,cAAM,IAAApC,OAAR,EAAlBA,EAA4BqC,MAAQ,EAC/DT,wBAAyB,kCAE3B,CACEH,SAAU,cACV1U,UAAU,EACV5D,MAAyB,OAAlBmR,SAAkB,IAAlBA,IAA2B,QAAT2F,EAAlB3F,GAAoB4H,eAAO,IAAAjC,OAAT,EAAlBA,EAA6BqC,MACpCZ,iBAAkBC,SAA2B,OAAlBrH,SAAkB,IAAlBA,IAA2B,QAAT4F,EAAlB5F,GAAoB4H,eAAO,IAAAhC,OAAT,EAAlBA,EAA6BoC,OAAS,EACjEV,wBAAyB,oCAK/B,GAAuB,QAAnBlJ,GACFkH,EAAoB,GAAAiC,QAAAC,EAAAA,EAAAA,GACflC,GAAoB,CACvB,CACE6B,SAAU,eACV1U,UAAU,EACV5D,MAAuB,OAAhBuR,SAAgB,IAAhBA,IAAgC,QAAhByF,EAAhBzF,GAAkB6H,sBAAc,IAAApC,OAAhB,EAAhBA,EAAkC8B,UAE3C,CACER,SAAU,aACV1U,UAAU,EACV5D,MAAuB,OAAhBuR,SAAgB,IAAhBA,IAAgC,QAAhB0F,EAAhB1F,GAAkB6H,sBAAc,IAAAnC,OAAhB,EAAhBA,EAAkCoC,QAE3C,CACEf,SAAU,gBACV1U,UAAU,EACV5D,MAAuB,OAAhBuR,SAAgB,IAAhBA,IAAgC,QAAhB2F,EAAhB3F,GAAkB6H,sBAAc,IAAAlC,GAAa,QAAbC,EAAhCD,EAAkCoC,mBAAW,IAAAnC,OAA7B,EAAhBA,EAA+CoC,WAExD,CACEjB,SAAU,gBACV1U,UAAU,EACV5D,MAAuB,OAAhBuR,SAAgB,IAAhBA,IAAgC,QAAhB6F,EAAhB7F,GAAkB6H,sBAAc,IAAAhC,GAAa,QAAbC,EAAhCD,EAAkCkC,mBAAW,IAAAjC,OAA7B,EAAhBA,EAA+CmC,aAK5D,GAAuB,YAAnBjK,GACFkH,EAAoB,GAAAiC,QAAAC,EAAAA,EAAAA,GACflC,GAAoB,CACvB,CACE6B,SAAU,mBACV1U,UAAU,EACV5D,MAA2B,OAApB2R,SAAoB,IAApBA,IAA+B,QAAX2F,EAApB3F,GAAsB8H,iBAAS,IAAAnC,OAAX,EAApBA,EAAiCwB,UAE1C,CACER,SAAU,gBACV1U,UAAU,EACV5D,MAA2B,OAApB2R,SAAoB,IAApBA,IAA+B,QAAX4F,EAApB5F,GAAsB8H,iBAAS,IAAAlC,GAAa,QAAbC,EAA/BD,EAAiC+B,mBAAW,IAAA9B,OAAxB,EAApBA,EAA8CkC,OAEvD,CACEpB,SAAU,iBACV1U,UAAU,EACV5D,MAA2B,OAApB2R,SAAoB,IAApBA,IAA+B,QAAX8F,EAApB9F,GAAsB8H,iBAAS,IAAAhC,GAAa,QAAbC,EAA/BD,EAAiC6B,mBAAW,IAAA5B,OAAxB,EAApBA,EAA8CiC,QAEvD,CACErB,SAAU,gBACV1U,UAAU,EACV5D,MAA2B,OAApB2R,SAAoB,IAApBA,IAA+B,QAAXgG,EAApBhG,GAAsB8H,iBAAS,IAAA9B,GAAa,QAAbC,EAA/BD,EAAiC2B,mBAAW,IAAA1B,OAAxB,EAApBA,EAA8CuB,MACrDZ,iBACEC,SAA6B,OAApB7G,SAAoB,IAApBA,IAA+B,QAAXkG,EAApBlG,GAAsB8H,iBAAS,IAAA5B,GAAa,QAAbC,EAA/BD,EAAiCyB,mBAAW,IAAAxB,OAAxB,EAApBA,EAA8CqB,OAAS,EAClEV,wBAAyB,oCAK/B,GAAuB,UAAnBlJ,GACFkH,EAAoB,GAAAiC,QAAAC,EAAAA,EAAAA,GACflC,GAAoB,CACvB,CACE6B,SAAU,iBACV1U,UAAU,EACV5D,MAAyB,OAAlB+R,SAAkB,IAAlBA,IAA4B,QAAVgG,EAAlBhG,GAAoB6H,gBAAQ,IAAA7B,OAAV,EAAlBA,EAA8Be,UAEvC,CACER,SAAU,kBACV1U,UAAU,EACV5D,MAAyB,OAAlB+R,SAAkB,IAAlBA,IAA4B,QAAViG,EAAlBjG,GAAoB6H,gBAAQ,IAAA5B,GAAa,QAAbC,EAA5BD,EAA8BsB,mBAAW,IAAArB,OAAvB,EAAlBA,EAA2C4B,WAEpD,CACEvB,SAAU,kBACV1U,UAAU,EACV5D,MAAyB,OAAlB+R,SAAkB,IAAlBA,IAA4B,QAAVmG,EAAlBnG,GAAoB6H,gBAAQ,IAAA1B,GAAa,QAAbC,EAA5BD,EAA8BoB,mBAAW,IAAAnB,OAAvB,EAAlBA,EAA2C2B,WAEpD,CACExB,SAAU,sBACV1U,UAAU,EACV5D,MAAyB,OAAlB+R,SAAkB,IAAlBA,IAA4B,QAAVqG,EAAlBrG,GAAoB6H,gBAAQ,IAAAxB,GAAa,QAAbC,EAA5BD,EAA8BkB,mBAAW,IAAAjB,OAAvB,EAAlBA,EAA2C0B,gBAI1D,CAEA,IAAMC,GAAYC,EAAAA,EAAAA,GAAqBxD,GAEvCrC,GAAiD,IAAlC1J,OAAOC,KAAKqP,GAAWtU,QAEtCsQ,GAAoBgE,EACtB,GAAG,CACDzH,GACApD,GACAI,GACoB,OAApBgG,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBqD,YACF,OAApBrD,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBsD,aACF,OAApBtF,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBqF,YACF,OAApBrF,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBsF,aACJ,OAAlB1D,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoByD,YACF,OAAlBzD,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB0D,aACJ,OAAhBlD,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBiD,YACF,OAAhBjD,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkD,aAClBjI,GACAO,GACAI,GACAI,GACAI,GACAI,GACAxC,KAGF,IAAMuK,GAAsB,YACrB/J,IAA+B,OAANhC,SAAM,IAANA,IAAAA,GAAQgM,WAAmB,OAANhM,SAAM,IAANA,IAAAA,GAAQzK,OACzD0M,IAAyB,GACzBgK,EAAAA,EAAAA,OAEI,MAAM,sBAAD1B,OACuB,OAANvK,SAAM,IAANA,QAAM,EAANA,GAAQgM,UAAS,aAAAzB,OAAkB,OAANvK,SAAM,IAANA,QAAM,EAANA,GAAQzK,KAAI,gBAEhE2W,MAAK,SAACC,GACLtL,GAA8BsL,EAAKC,KAC/BD,EAAKjQ,UACP2G,GAAYsJ,EAAKjQ,UAEfiQ,EAAKE,OACPhL,GAAkB,SAClB4B,GAAsBkJ,EAAKE,QAClBF,EAAKG,KACdjL,GAAkB,OAClBgC,GAAoB8I,EAAKG,MAChBH,EAAKI,SACdlL,GAAkB,WAClBoC,GAAwB0I,EAAKI,UACpBJ,EAAKK,KACdnL,GAAkB,OAClB4C,GAAoBkI,EAAKK,MAChBL,EAAKM,QACdpL,GAAkB,SAClBwC,GAAsBsI,EAAKM,QAG7BxL,IAAqB,GACrBY,GAASsK,EAAKvK,OACdH,GAAY0K,EAAK3K,UACb2K,EAAK1J,iBACPC,GAAmByJ,EAAK1J,kBAEtB0J,EAAKO,YAAcP,EAAKQ,YAAcR,EAAKS,WAC7CvI,IAA6B,GAE3B8H,EAAKO,YACP7H,GAAiCsH,EAAKO,YAEpCP,EAAKQ,YACP1H,GAA8BkH,EAAKQ,YAEjCR,EAAKS,WACPnG,GAA4B0F,EAAKS,SAASC,KAC1ChG,GAA0BsF,EAAKS,SAASE,KAE1C7K,IAAyB,EAC3B,IACC8K,OAAM,SAACC,GACNC,QAAQvX,MAAMsX,GACd/K,IAAyB,EAC3B,IAEN,GAEAoG,EAAAA,EAAAA,YAAU,WACR0D,IAEF,GAAG,CAAC/L,KAEJ,IAAMkN,GAAoB,SAACxU,GACzB+M,GAA2B,GAAD8E,QAAAC,EAAAA,EAAAA,GACrBhF,IAAuB,CAC1B9M,EAAgBnD,QAEdmD,EAAgBnD,QAAsC,OAA7BqP,SAA6B,IAA7BA,QAA6B,EAA7BA,GAA+BrP,OAC1DsP,GAAiC,MAE/BnM,EAAgBnD,QAAmC,OAA1ByP,SAA0B,IAA1BA,QAA0B,EAA1BA,GAA4BzP,OACvD0P,GAA8B,MAE5BvM,EAAgBnD,QAAiC,OAAxBiR,SAAwB,IAAxBA,QAAwB,EAAxBA,GAA0BjR,OACrDkR,GAA4B,MAE1B/N,EAAgBnD,QAA+B,OAAtBqR,SAAsB,IAAtBA,QAAsB,EAAtBA,GAAwBrR,OACnDsR,GAA0B,KAE9B,EAoNA,OACEnL,EAAAA,EAAAA,MAACyR,EAAAA,SAAc,CAAAvR,SAAA,CACZuM,KACCtM,EAAAA,EAAAA,KAACuR,EAAAA,EAAa,CACZC,OAAQlF,GACRvV,MACEoO,GACI,wCACA,yCAENsM,YAAatM,GAAoB,SAAW,UAC5CuM,WAAW,SACXC,QAAS,kBAAMpF,IAAe,EAAM,EACpCqF,UA/N8B,WAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAC1C,GAAI/O,GAAmB,CACrB,IAAIgP,EAAgB,CAAC,EACrB,OAAQ5O,IACN,IAAK,UACH4O,EAAgB,CACdzD,QAAS,CACPjB,UAAW,CACTX,UAA8B,OAApBnH,SAAoB,IAApBA,IAA+B,QAAXkK,EAApBlK,GAAsB8H,iBAAS,IAAAoC,OAAX,EAApBA,EAAiC/C,WAAY,GACvDQ,YAAa,CACXI,OACsB,OAApB/H,SAAoB,IAApBA,IAA+B,QAAXmK,EAApBnK,GAAsB8H,iBAAS,IAAAqC,GAAa,QAAbC,EAA/BD,EAAiCxC,mBAAW,IAAAyC,OAAxB,EAApBA,EAA8CrC,QAAS,GACzDC,QACsB,OAApBhI,SAAoB,IAApBA,IAA+B,QAAXqK,EAApBrK,GAAsB8H,iBAAS,IAAAuC,GAAa,QAAbC,EAA/BD,EAAiC1C,mBAAW,IAAA2C,OAAxB,EAApBA,EAA8CtC,SAAU,GAC1DR,MAAOX,SACe,OAApB7G,SAAoB,IAApBA,IAA+B,QAAXuK,EAApBvK,GAAsB8H,iBAAS,IAAAyC,GAAa,QAAbC,EAA/BD,EAAiC5C,mBAAW,IAAA6C,OAAxB,EAApBA,EAA8ChD,WAMxD,MACF,IAAK,MACHgF,EAAgB,CACd1D,IAAK,CACHrB,eAAgB,CACdN,UAA0B,OAAhBvH,SAAgB,IAAhBA,IAAgC,QAAhB6K,EAAhB7K,GAAkB6H,sBAAc,IAAAgD,OAAhB,EAAhBA,EAAkCtD,WAAY,GACxDO,QAAwB,OAAhB9H,SAAgB,IAAhBA,IAAgC,QAAhB8K,EAAhB9K,GAAkB6H,sBAAc,IAAAiD,OAAhB,EAAhBA,EAAkChD,SAAU,GACpD+E,QAAwB,OAAhB7M,SAAgB,IAAhBA,IAAgC,QAAhB+K,EAAhB/K,GAAkB6H,sBAAc,IAAAkD,OAAhB,EAAhBA,EAAkC8B,SAAU,GACpD9E,YAAa,CACXC,WACkB,OAAhBhI,SAAgB,IAAhBA,IAAgC,QAAhBgL,EAAhBhL,GAAkB6H,sBAAc,IAAAmD,GAAa,QAAbC,EAAhCD,EAAkCjD,mBAAW,IAAAkD,OAA7B,EAAhBA,EAA+CjD,YAC/C,GACFC,WACkB,OAAhBjI,SAAgB,IAAhBA,IAAgC,QAAhBkL,EAAhBlL,GAAkB6H,sBAAc,IAAAqD,GAAa,QAAbC,EAAhCD,EAAkCnD,mBAAW,IAAAoD,OAA7B,EAAhBA,EAA+ClD,YAC/C,GACFE,OACkB,OAAhBnI,SAAgB,IAAhBA,IAAgC,QAAhBoL,EAAhBpL,GAAkB6H,sBAAc,IAAAuD,GAAa,QAAbC,EAAhCD,EAAkCrD,mBAAW,IAAAsD,OAA7B,EAAhBA,EAA+ClD,QAAS,OAKlE,MACF,IAAK,QACHyE,EAAgB,CACdvD,MAAO,CACLhB,SAAU,CACRd,UAA4B,OAAlB/G,SAAkB,IAAlBA,IAA4B,QAAV8K,EAAlB9K,GAAoB6H,gBAAQ,IAAAiD,OAAV,EAAlBA,EAA8B/D,WAAY,GACpDQ,YAAa,CACXO,WACoB,OAAlB9H,SAAkB,IAAlBA,IAA4B,QAAV+K,EAAlB/K,GAAoB6H,gBAAQ,IAAAkD,GAAa,QAAbC,EAA5BD,EAA8BxD,mBAAW,IAAAyD,OAAvB,EAAlBA,EAA2ClD,YAAa,GAC1DC,WACoB,OAAlB/H,SAAkB,IAAlBA,IAA4B,QAAViL,EAAlBjL,GAAoB6H,gBAAQ,IAAAoD,GAAa,QAAbC,EAA5BD,EAA8B1D,mBAAW,IAAA2D,OAAvB,EAAlBA,EAA2CnD,YAAa,GAC1DC,eACoB,OAAlBhI,SAAkB,IAAlBA,IAA4B,QAAVmL,EAAlBnL,GAAoB6H,gBAAQ,IAAAsD,GAAa,QAAbC,EAA5BD,EAA8B5D,mBAAW,IAAA6D,OAAvB,EAAlBA,EAA2CpD,gBAC3C,OAKV,MACF,IAAK,MACHoE,EAAgB,CACdxD,IAAK,CACH0D,cAAe,CACbC,YAA4B,OAAhBnM,SAAgB,IAAhBA,IAA+B,QAAfiL,EAAhBjL,GAAkBkM,qBAAa,IAAAjB,OAAf,EAAhBA,EAAiCkB,aAAc,GAC3DxF,UAA0B,OAAhB3G,SAAgB,IAAhBA,IAA+B,QAAfkL,EAAhBlL,GAAkBkM,qBAAa,IAAAhB,OAAf,EAAhBA,EAAiCvE,WAAY,GACvDQ,YAAa,CACXiF,cACkB,OAAhBpM,SAAgB,IAAhBA,IAA+B,QAAfmL,EAAhBnL,GAAkBkM,qBAAa,IAAAf,GAAa,QAAbC,EAA/BD,EAAiChE,mBAAW,IAAAiE,OAA5B,EAAhBA,EACIgB,eAAgB,GACtBzE,WACkB,OAAhB3H,SAAgB,IAAhBA,IAA+B,QAAfqL,EAAhBrL,GAAkBkM,qBAAa,IAAAb,GAAa,QAAbC,EAA/BD,EAAiClE,mBAAW,IAAAmE,OAA5B,EAAhBA,EAA8C3D,YAC9C,GACF0E,gBACkB,OAAhBrM,SAAgB,IAAhBA,IAA+B,QAAfuL,EAAhBvL,GAAkBkM,qBAAa,IAAAX,GAAa,QAAbC,EAA/BD,EAAiCpE,mBAAW,IAAAqE,OAA5B,EAAhBA,EACIa,iBAAkB,GACxBC,aACkB,OAAhBtM,SAAgB,IAAhBA,IAA+B,QAAfyL,EAAhBzL,GAAkBkM,qBAAa,IAAAT,GAAa,QAAbC,EAA/BD,EAAiCtE,mBAAW,IAAAuE,OAA5B,EAAhBA,EAA8CY,cAC9C,OAKV,MACF,IAAK,QACHN,EAAgB,CACd3D,MAAO,CACL1B,UAA4B,OAAlB3H,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB2H,WAAY,GAC1C4F,QAA0B,OAAlBvN,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoBuN,SAAU,GACtCvE,WAA6B,OAAlBhJ,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoBgJ,YAAa,GAC5CwE,QAA0B,OAAlBxN,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoBwN,SAAU,GACtC5F,QAAS,CACP2F,QAA0B,OAAlBvN,SAAkB,IAAlBA,IAA2B,QAAT2M,EAAlB3M,GAAoB4H,eAAO,IAAA+E,OAAT,EAAlBA,EAA6BY,SAAU,GAC/Cjd,IAAsB,OAAlB0P,SAAkB,IAAlBA,IAA2B,QAAT4M,EAAlB5M,GAAoB4H,eAAO,IAAAgF,OAAT,EAAlBA,EAA6Btc,KAAM,GACvCuX,QAA0B,OAAlB7H,SAAkB,IAAlBA,IAA2B,QAAT6M,EAAlB7M,GAAoB4H,eAAO,IAAAiF,OAAT,EAAlBA,EAA6BhF,SAAU,GAC/CG,MAAOX,SAA2B,OAAlBrH,SAAkB,IAAlBA,IAA2B,QAAT8M,EAAlB9M,GAAoB4H,eAAO,IAAAkF,OAAT,EAAlBA,EAA6B9E,QAE/CF,OAAQ,CACNC,KAAMV,SAA2B,OAAlBrH,SAAkB,IAAlBA,IAA0B,QAAR+M,EAAlB/M,GAAoB8H,cAAM,IAAAiF,OAAR,EAAlBA,EAA4BhF,SAOrD,IAAI0F,EAA+B,CAAC,EAChCC,EAA+B,CAAC,EAChCC,EAAiC,CAAC,EAIhB,OAApBvL,SAAoB,IAApBA,IAAAA,GAAsBqF,aACF,OAApBrF,SAAoB,IAApBA,IAAAA,GAAsBsF,eAEtBgG,EAA0B,CACxB/D,WAAY,CACViE,IAAyB,OAApBxL,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBqF,YAC3BoC,IAAyB,OAApBzH,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBsF,gBAOX,OAApBtD,SAAoB,IAApBA,IAAAA,GAAsBqD,aACF,OAApBrD,SAAoB,IAApBA,IAAAA,GAAsBsD,eAEtB+F,EAA0B,CACxB/D,WAAY,CACVkE,IAAyB,OAApBxJ,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBqD,YAC3BoC,IAAyB,OAApBzF,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBsD,gBAMjC,IAAImG,EAAiB,KACjBC,EAAc,KACI,OAAlB9J,SAAkB,IAAlBA,IAAAA,GAAoByD,aAAiC,OAAlBzD,SAAkB,IAAlBA,IAAAA,GAAoB0D,eACzDmG,EAAiB,CACfD,IAAuB,OAAlB5J,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoByD,YACzBoC,IAAuB,OAAlB7F,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB0D,eAGT,OAAhBlD,SAAgB,IAAhBA,IAAAA,GAAkBkD,eACpBoG,EAAc,CACZhE,GAAoB,OAAhBtF,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkD,gBAGtBmG,GAAkBC,KACpBH,EAA4B,CAC1B/D,UAAQvP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHwT,GACAC,KAKT,IAAMC,GAAQ1T,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACZ+O,IAAK5L,GAAuBI,GAA6B,GACzDoQ,mBAAoBxL,IAA2B,GAC/ChE,SAAUA,GACViB,gBAAiBA,GACjBb,MAAOA,IACJ8O,GACAD,GACAE,GACAX,GAEAxL,KACHC,IAAsB,GACtBwH,EAAAA,EAAAA,OAEI,MAAM,sBAAD1B,OACuB,OAANvK,SAAM,IAANA,QAAM,EAANA,GAAQgM,UAAS,aAAAzB,OAAkB,OAANvK,SAAM,IAANA,QAAM,EAANA,GAAQzK,KAAI,eAC/Dwb,GAED7E,MAAK,WACJ9D,IAAe,GACf3D,IAAsB,GACtBsH,IACF,IACCgB,OAAM,SAACC,GACNvI,IAAsB,GACtB3E,IAASmR,EAAAA,EAAAA,IAAqBjE,GAChC,IAEN,MACOxI,KACHC,IAAsB,GACtBwH,EAAAA,EAAAA,OAEI,SAAS,sBAAD1B,OACoB,OAANvK,SAAM,IAANA,QAAM,EAANA,GAAQgM,UAAS,aAAAzB,OAAkB,OAANvK,SAAM,IAANA,QAAM,EAANA,GAAQzK,KAAI,eAC/D,CAAC,GAEF2W,MAAK,WACJ9D,IAAe,GACf3D,IAAsB,GACtBsH,IACF,IACCgB,OAAM,SAACC,GACNvI,IAAsB,GACtB3E,IAASmR,EAAAA,EAAAA,IAAqBjE,GAChC,IAGR,EAgBQkE,qBACExV,EAAAA,EAAAA,MAACyV,EAAAA,EAAiB,CAAAvV,SAAA,CACfoF,GACG,gDACA,uDACHA,KACCtF,EAAAA,EAAAA,MAAA,OAAKjJ,UAAWR,GAAQ4L,aAAajC,SAAA,EACnCC,EAAAA,EAAAA,KAACuV,EAAAA,IAAQ,KACTvV,EAAAA,EAAAA,KAAA,QAAAD,SAAM,uEASlBF,EAAAA,EAAAA,MAAC3F,EAAAA,GAAI,CAACsb,WAAS,EAACC,QAAS,EAAE1V,SAAA,EACzBC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,IAAE,EAAAsJ,UACXC,EAAAA,EAAAA,KAAC0V,EAAAA,IAAY,CAAA3V,SAAC,kBAEhBC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,EAAG4B,eAAgB,MAAOsd,UAAW,QAAQ5V,UAC1DC,EAAAA,EAAAA,KAAC4V,EAAAA,EAAiB,CAChB3f,MAAO,GACP4f,gBAAiB,CAAC,UAAW,YAC7BC,QAAS3Q,GACTnP,MAAO,oBACPyB,GAAG,oBACHiC,KAAK,oBACLpC,SAAU,WACR8N,IAAsBD,GACxB,EACA4Q,YAAY,QAGhB/V,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAACzD,GAAI,GAAGsJ,UACXC,EAAAA,EAAAA,KAACxD,EAAAA,EAAM,MAER2I,KACCtF,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBF,EAAAA,EAAAA,MAACmW,EAAAA,EAAI,CACHhgB,MAAO2O,GACPrN,SAAU,SAACoD,EAA0Bub,GACnCrR,GAAwBqR,EAC1B,EACAC,eAAe,UACfC,UAAU,UACV,aAAW,eACXvd,QAAQ,aACRwd,cAAc,OAAMrW,SAAA,EAEpBC,EAAAA,EAAAA,KAACqW,EAAAA,EAAG,CAAC5e,GAAG,cAAcxB,MAAM,aAC5B+J,EAAAA,EAAAA,KAACqW,EAAAA,EAAG,CAAC5e,GAAG,wBAAwBxB,MAAM,kBAIzC0O,IACC3E,EAAAA,EAAAA,KAACF,EAAAA,SAAQ,CAAAC,UACPC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAACsW,EAAAA,EAAiB,CAChBtgB,MAAO+O,GACP5O,KAAM,OACNE,eAAgB,SAACkgB,EAAQ3a,EAAM5F,GAC7BgP,GAA8BhP,EAChC,EACAO,aAAc,eAKpBsJ,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACwW,EAAa,CAACnW,SAAUA,MACzBL,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQqgB,sBAAsB1W,UAC1DC,EAAAA,EAAAA,KAAC0W,EAAAA,EAAkB,CACjBC,iBAAkBpR,GAClB9N,GAAG,iBACHiC,KAAK,iBACLzD,MAAM,MACNqB,SAAU,SAACoD,GACT8K,GAAkB9K,EAAElD,OAAOxB,MAC7B,EACA4gB,gBAAiB,CACf,CAAE3gB,MAAO,QAASD,MAAO,SACzB,CAAEC,MAAO,MAAOD,MAAO,OACvB,CAAEC,MAAO,UAAWD,MAAO,WAC3B,CAAEC,MAAO,MAAOD,MAAO,OACvB,CAAEC,MAAO,QAASD,MAAO,cAKX,UAAnBuP,KACC1F,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,iBACHiC,KAAK,iBACLpC,SAAU,SAACoD,GAAsC,OAC/C0M,IAAqB5F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClB2F,IAAkB,IACrB2H,SAAUpU,EAAElD,OAAOxB,QACnB,EAEJC,MAAM,WACNC,QAAQ,2CACRF,OAAyB,OAAlBmR,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB2H,WAAY,GACvCjV,MAAOkS,GAA6B,YAAK,GACzCnS,UAAQ,OAGZoG,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,eACHiC,KAAK,eACLpC,SAAU,SAACoD,GAAsC,OAC/C0M,IAAqB5F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClB2F,IAAkB,IACrBuN,OAAQha,EAAElD,OAAOxB,QACjB,EAEJC,MAAM,SACNC,QAAQ,4EACRF,OAAyB,OAAlBmR,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoBuN,SAAU,QAGzC1U,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,kBACHiC,KAAK,kBACLpC,SAAU,SAACoD,GAAsC,OAC/C0M,IAAqB5F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClB2F,IAAkB,IACrBgJ,UAAWzV,EAAElD,OAAOxB,QACpB,EAEJC,MAAM,YACNC,QAAQ,gHACRF,OAAyB,OAAlBmR,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoBgJ,YAAa,QAG5CnQ,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,eACHiC,KAAK,eACLpC,SAAU,SAACoD,GAAsC,OAC/C0M,IAAqB5F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClB2F,IAAkB,IACrBwN,OAAQja,EAAElD,OAAOxB,QACjB,EAEJC,MAAM,SACNC,QAAQ,4HACRF,OAAyB,OAAlBmR,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoBwN,SAAU,QAGzC3U,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC0V,EAAAA,IAAY,CAAA3V,SAAC,gBAEhBC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBF,EAAAA,EAAAA,MAAA,YAAUjJ,UAAWR,GAAQ0gB,WAAW/W,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UAAQpJ,UAAWR,GAAQ2gB,gBAAgBhX,SAAC,cAG5CC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,uBACHiC,KAAK,uBACLpC,SAAU,SACRoD,GAAsC,OAEtC0M,IAAqB5F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClB2F,IAAkB,IACrB4H,SAAOvN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACgB,OAAlB2F,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB4H,SAAO,IAC9B2F,OAAQha,EAAElD,OAAOxB,UAEnB,EAEJC,MAAM,SACNC,QAAQ,2FACRF,OAAyB,OAAlBmR,SAAkB,IAAlBA,IAA2B,QAATlF,EAAlBkF,GAAoB4H,eAAO,IAAA9M,OAAT,EAAlBA,EAA6ByS,SAAU,QAGlD1U,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdne,KAAMqR,GAAqB,OAAS,WACpCtS,GAAG,WACHiC,KAAK,WACLpC,SAAU,SACRoD,GAAsC,OAEtC0M,IAAqB5F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClB2F,IAAkB,IACrB4H,SAAOvN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACgB,OAAlB2F,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB4H,SAAO,IAC9BtX,GAAIiD,EAAElD,OAAOxB,UAEf,EAEJC,MAAM,aACNC,QAAQ,0GACRF,OAAyB,OAAlBmR,SAAkB,IAAlBA,IAA2B,QAATjF,EAAlBiF,GAAoB4H,eAAO,IAAA7M,OAAT,EAAlBA,EAA6BzK,KAAM,GAC1CmC,UAAQ,EACRC,MAAOkS,GAA2B,UAAK,GACvCkL,YACElN,IACE/J,EAAAA,EAAAA,KAACkX,EAAAA,EAAiB,KAElBlX,EAAAA,EAAAA,KAACmX,EAAAA,EAAgB,IAGrBC,cAAe,kBACbpN,IAAuBD,GAAmB,OAIhD/J,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdne,KAAM6R,GAAyB,OAAS,WACxC9S,GAAG,eACHiC,KAAK,eACLpC,SAAU,SACRoD,GAAsC,OAEtC0M,IAAqB5F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClB2F,IAAkB,IACrB4H,SAAOvN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACgB,OAAlB2F,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB4H,SAAO,IAC9BC,OAAQtU,EAAElD,OAAOxB,UAEnB,EAEJC,MAAM,iBACNC,QAAQ,0GACRF,OAAyB,OAAlBmR,SAAkB,IAAlBA,IAA2B,QAAThF,EAAlBgF,GAAoB4H,eAAO,IAAA5M,OAAT,EAAlBA,EAA6B6M,SAAU,GAC9CpV,UAAQ,EACRC,MAAOkS,GAA+B,cAAK,GAC3CkL,YACE1M,IACEvK,EAAAA,EAAAA,KAACkX,EAAAA,EAAiB,KAElBlX,EAAAA,EAAAA,KAACmX,EAAAA,EAAgB,IAGrBC,cAAe,kBACb5M,IAA2BD,GAAuB,OAIxDvK,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAACzD,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UAC5CC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdne,KAAK,SACL2e,IAAI,IACJ5f,GAAG,cACHiC,KAAK,cACLpC,SAAU,SACRoD,GAAsC,OAEtC0M,IAAqB5F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClB2F,IAAkB,IACrB4H,SAAOvN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACgB,OAAlB2F,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB4H,SAAO,IAC9BI,MAAOzU,EAAElD,OAAOxB,UAElB,EAEJC,MAAM,kBACN4D,MAAOkS,GAA8B,aAAK,GAC1C/V,OAAyB,OAAlBmR,SAAkB,IAAlBA,IAA2B,QAAT/E,EAAlB+E,GAAoB4H,eAAO,IAAA3M,OAAT,EAAlBA,EAA6B+M,QAAS,aAKrDnP,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CACH1D,MAAI,EACJC,GAAI,GACJG,UAAWR,GAAQ4gB,aACnB/f,MAAO,CAAEiC,UAAW,IAAK6G,UAEzBF,EAAAA,EAAAA,MAAA,YAAUjJ,UAAWR,GAAQ0gB,WAAW/W,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UAAQpJ,UAAWR,GAAQ2gB,gBAAgBhX,SAAC,YAG5CC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdne,KAAK,SACL2e,IAAI,IACJ5f,GAAG,aACHiC,KAAK,aACLpC,SAAU,SAACoD,GAAsC,OAC/C0M,IAAqB5F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClB2F,IAAkB,IACrB8H,QAAMzN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACiB,OAAlB2F,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB8H,QAAM,IAC7BC,KAAMxU,EAAElD,OAAOxB,UAEjB,EAEJC,MAAM,iBACNC,QAAQ,oFACR2D,MAAOkS,GAA6B,YAAK,GACzC/V,OAAyB,OAAlBmR,SAAkB,IAAlBA,IAA0B,QAAR9E,EAAlB8E,GAAoB8H,cAAM,IAAA5M,OAAR,EAAlBA,EAA4B6M,OAAQ,aAMjC,UAAnB3J,KACC1F,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,iBACHiC,KAAK,iBACLpC,SAAU,SAACoD,GAAsC,OAC/CsN,IAAqBxG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClBuG,IAAkB,IACrB6H,UAAQpO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACe,OAAlBuG,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB6H,UAAQ,IAC/Bd,SAAUpU,EAAElD,OAAOxB,UAErB,EAEJC,MAAM,WACNC,QAAQ,0CACR2D,MAAOkS,GAAiC,gBAAK,GAC7C/V,OAAyB,OAAlB+R,SAAkB,IAAlBA,IAA4B,QAAVzF,EAAlByF,GAAoB6H,gBAAQ,IAAAtN,OAAV,EAAlBA,EAA8BwM,WAAY,QAGrD9O,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBF,EAAAA,EAAAA,MAAA,YAAUjJ,UAAWR,GAAQ0gB,WAAW/W,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UAAQpJ,UAAWR,GAAQ2gB,gBAAgBhX,SAAC,iBAG5CC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,kBACHiC,KAAK,kBACLpC,SAAU,SACRoD,GAAsC,IAAA4c,EAAA,OAEtCtP,IAAqBxG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClBuG,IAAkB,IACrB6H,UAAQpO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACe,OAAlBuG,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB6H,UAAQ,IAC/BN,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACY,OAAlBuG,SAAkB,IAAlBA,IAA4B,QAAVuP,EAAlBvP,GAAoB6H,gBAAQ,IAAA0H,OAAV,EAAlBA,EACChI,aAAW,IACfO,UAAWnV,EAAElD,OAAOxB,YAGxB,EAEJC,MAAM,YACNC,QAAQ,kDACRF,OACoB,OAAlB+R,SAAkB,IAAlBA,IAA4B,QAAVxF,EAAlBwF,GAAoB6H,gBAAQ,IAAArN,GAAa,QAAbC,EAA5BD,EAA8B+M,mBAAW,IAAA9M,OAAvB,EAAlBA,EACIqN,YAAa,GAEnBhW,MAAOkS,GAAkC,iBAAK,QAGlD/L,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,kBACHiC,KAAK,kBACLpC,SAAU,SACRoD,GAAsC,IAAA6c,EAAA,OAEtCvP,IAAqBxG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClBuG,IAAkB,IACrB6H,UAAQpO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACe,OAAlBuG,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB6H,UAAQ,IAC/BN,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACY,OAAlBuG,SAAkB,IAAlBA,IAA4B,QAAVwP,EAAlBxP,GAAoB6H,gBAAQ,IAAA2H,OAAV,EAAlBA,EACCjI,aAAW,IACfQ,UAAWpV,EAAElD,OAAOxB,YAGxB,EAEJC,MAAM,YACNC,QAAQ,4DACRF,OACoB,OAAlB+R,SAAkB,IAAlBA,IAA4B,QAAVtF,EAAlBsF,GAAoB6H,gBAAQ,IAAAnN,GAAa,QAAbC,EAA5BD,EAA8B6M,mBAAW,IAAA5M,OAAvB,EAAlBA,EACIoN,YAAa,GAEnBjW,MAAOkS,GAAkC,iBAAK,QAGlD/L,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,sBACHiC,KAAK,sBACLpC,SAAU,SACRoD,GAAsC,IAAA8c,EAAA,OAEtCxP,IAAqBxG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClBuG,IAAkB,IACrB6H,UAAQpO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACe,OAAlBuG,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB6H,UAAQ,IAC/BN,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACY,OAAlBuG,SAAkB,IAAlBA,IAA4B,QAAVyP,EAAlBzP,GAAoB6H,gBAAQ,IAAA4H,OAAV,EAAlBA,EACClI,aAAW,IACfS,cAAerV,EAAElD,OAAOxB,YAG5B,EAEJC,MAAM,gBACNC,QAAQ,iEACRF,OACoB,OAAlB+R,SAAkB,IAAlBA,IAA4B,QAAVpF,EAAlBoF,GAAoB6H,gBAAQ,IAAAjN,GAAa,QAAbC,EAA5BD,EAA8B2M,mBAAW,IAAA1M,OAAvB,EAAlBA,EACImN,gBAAiB,GAEvBlW,MACEkS,GAAsC,qBAAK,eAQrC,QAAnBxG,KACC1F,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,iBACHiC,KAAK,iBACLpC,SAAU,SAACoD,GAAsC,OAC/C0N,IAAmB5G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB2G,IAAgB,IACnBkM,eAAa7S,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACQ,OAAhB2G,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,eAAa,IAClCC,WAAY5Z,EAAElD,OAAOxB,UAEvB,EAEJC,MAAM,aACNC,QAAQ,kCACRF,OAAuB,OAAhBmS,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,cAAcC,aAAc,QAGzDtU,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,eACHiC,KAAK,eACLpC,SAAU,SAACoD,GAAsC,OAC/C0N,IAAmB5G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB2G,IAAgB,IACnBkM,eAAa7S,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACQ,OAAhB2G,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,eAAa,IAClCvF,SAAUpU,EAAElD,OAAOxB,UAErB,EAEJC,MAAM,WACNC,QAAQ,yFACRF,OAAuB,OAAhBmS,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,cAAcvF,WAAY,QAGvD9O,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBF,EAAAA,EAAAA,MAAA,YAAUjJ,UAAWR,GAAQ0gB,WAAW/W,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UAAQpJ,UAAWR,GAAQ2gB,gBAAgBhX,SAAC,iBAG5CC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,mBACHiC,KAAK,mBACLpC,SAAU,SACRoD,GAAsC,OAEtC0N,IAAmB5G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB2G,IAAgB,IACnBkM,eAAa7S,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACQ,OAAhB2G,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,eAAa,IAClC/E,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACU,OAAhB2G,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,cAClB/E,aAAW,IACdiF,aAAc7Z,EAAElD,OAAOxB,YAG3B,EAEJC,MAAM,eACNC,QAAQ,kFACRF,OACkB,OAAhBmS,SAAgB,IAAhBA,IAA2C,QAA3BtF,EAAhBsF,GAAkBkM,cAAc/E,mBAAW,IAAAzM,OAA3B,EAAhBA,EACI0R,eAAgB,QAI1BvU,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,gBACHiC,KAAK,gBACLpC,SAAU,SACRoD,GAAsC,OAEtC0N,IAAmB5G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB2G,IAAgB,IACnBkM,eAAa7S,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACQ,OAAhB2G,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,eAAa,IAClC/E,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACU,OAAhB2G,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,cAClB/E,aAAW,IACdQ,UAAWpV,EAAElD,OAAOxB,YAGxB,EAEJC,MAAM,YACNC,QAAQ,+EACRF,OACkB,OAAhBmS,SAAgB,IAAhBA,IAA2C,QAA3BrF,EAAhBqF,GAAkBkM,cAAc/E,mBAAW,IAAAxM,OAA3B,EAAhBA,EACIgN,YAAa,QAIvB9P,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,qBACHiC,KAAK,qBACLpC,SAAU,SACRoD,GAAsC,OAEtC0N,IAAmB5G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB2G,IAAgB,IACnBkM,eAAa7S,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACQ,OAAhB2G,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,eAAa,IAClC/E,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACU,OAAhB2G,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,cAClB/E,aAAW,IACdkF,eAAgB9Z,EAAElD,OAAOxB,YAG7B,EAEJC,MAAM,iBACNC,QAAQ,oFACRF,OACkB,OAAhBmS,SAAgB,IAAhBA,IAA2C,QAA3BpF,EAAhBoF,GAAkBkM,cAAc/E,mBAAW,IAAAvM,OAA3B,EAAhBA,EACIyR,iBAAkB,QAI5BxU,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,kBACHiC,KAAK,kBACLpC,SAAU,SACRoD,GAAsC,OAEtC0N,IAAmB5G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB2G,IAAgB,IACnBkM,eAAa7S,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACQ,OAAhB2G,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,eAAa,IAClC/E,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACU,OAAhB2G,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkM,cAClB/E,aAAW,IACdmF,YAAa/Z,EAAElD,OAAOxB,YAG1B,EAEJC,MAAM,cACNC,QAAQ,iFACRF,OACkB,OAAhBmS,SAAgB,IAAhBA,IAA2C,QAA3BnF,EAAhBmF,GAAkBkM,cAAc/E,mBAAW,IAAAtM,OAA3B,EAAhBA,EACIyR,cAAe,eAQb,QAAnBlP,KACC1F,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,eACHiC,KAAK,eACLpC,SAAU,SAACoD,GAAsC,OAC/C8M,IAAmBhG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB+F,IAAgB,IACnB6H,gBAAc5N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO,OAAhB+F,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkB6H,gBAAc,IACnCN,SAAUpU,EAAElD,OAAOxB,UAErB,EAEJC,MAAM,WACNC,QAAQ,qJACRF,OAAuB,OAAhBuR,SAAgB,IAAhBA,IAAgC,QAAhBtE,EAAhBsE,GAAkB6H,sBAAc,IAAAnM,OAAhB,EAAhBA,EAAkC6L,WAAY,GACrDlV,UAAQ,EACRC,MAAOkS,GAA+B,cAAK,QAG/C/L,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,aACHiC,KAAK,aACLpC,SAAU,SAACoD,GAAsC,OAC/C8M,IAAmBhG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB+F,IAAgB,IACnB6H,gBAAc5N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO,OAAhB+F,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkB6H,gBAAc,IACnCC,OAAQ3U,EAAElD,OAAOxB,UAEnB,EAEJC,MAAM,SACNC,QAAQ,yDACRF,OAAuB,OAAhBuR,SAAgB,IAAhBA,IAAgC,QAAhBrE,EAAhBqE,GAAkB6H,sBAAc,IAAAlM,OAAhB,EAAhBA,EAAkCmM,SAAU,GACnDxV,MAAOkS,GAA6B,YAAK,GACzCnS,UAAQ,OAGZoG,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,aACHiC,KAAK,aACLpC,SAAU,SAACoD,GAAsC,OAC/C8M,IAAmBhG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB+F,IAAgB,IACnB6H,gBAAc5N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO,OAAhB+F,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkB6H,gBAAc,IACnCgF,OAAQ1Z,EAAElD,OAAOxB,UAEnB,EAEJC,MAAM,UACNC,QAAQ,4IACRF,OAAuB,OAAhBuR,SAAgB,IAAhBA,IAAgC,QAAhBpE,EAAhBoE,GAAkB6H,sBAAc,IAAAjM,OAAhB,EAAhBA,EAAkCiR,SAAU,QAGvDpU,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBF,EAAAA,EAAAA,MAAA,YAAUjJ,UAAWR,GAAQ0gB,WAAW/W,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UAAQpJ,UAAWR,GAAQ2gB,gBAAgBhX,SAAC,iBAG5CC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,gBACHiC,KAAK,gBACLpC,SAAU,SACRoD,GAAsC,IAAA+c,EAAA,OAEtCjQ,IAAmBhG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB+F,IAAgB,IACnB6H,gBAAc5N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO,OAAhB+F,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkB6H,gBAAc,IACnCE,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACU,OAAhB+F,SAAgB,IAAhBA,IAAgC,QAAhBkQ,EAAhBlQ,GAAkB6H,sBAAc,IAAAqI,OAAhB,EAAhBA,EACCnI,aAAW,IACfC,UAAW7U,EAAElD,OAAOxB,YAGxB,EAEJC,MAAM,aACNC,QAAQ,wDACRF,OACkB,OAAhBuR,SAAgB,IAAhBA,IAAgC,QAAhBnE,EAAhBmE,GAAkB6H,sBAAc,IAAAhM,GAAa,QAAbC,EAAhCD,EAAkCkM,mBAAW,IAAAjM,OAA7B,EAAhBA,EACIkM,YAAa,GAEnB1V,MAAOkS,GAAgC,eAAK,GAC5CnS,UAAQ,OAGZoG,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,gBACHiC,KAAK,gBACLpC,SAAU,SACRoD,GAAsC,IAAAgd,EAAA,OAEtClQ,IAAmBhG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB+F,IAAgB,IACnB6H,gBAAc5N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO,OAAhB+F,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkB6H,gBAAc,IACnCE,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACU,OAAhB+F,SAAgB,IAAhBA,IAAgC,QAAhBmQ,EAAhBnQ,GAAkB6H,sBAAc,IAAAsI,OAAhB,EAAhBA,EACCpI,aAAW,IACfE,UAAW9U,EAAElD,OAAOxB,YAGxB,EAEJC,MAAM,aACNC,QAAQ,wDACRF,OACkB,OAAhBuR,SAAgB,IAAhBA,IAAgC,QAAhBjE,EAAhBiE,GAAkB6H,sBAAc,IAAA9L,GAAa,QAAbC,EAAhCD,EAAkCgM,mBAAW,IAAA/L,OAA7B,EAAhBA,EACIiM,YAAa,GAEnB3V,MAAOkS,GAAgC,eAAK,GAC5CnS,UAAQ,OAGZoG,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,YACHiC,KAAK,YACLpC,SAAU,SACRoD,GAAsC,IAAAid,EAAA,OAEtCnQ,IAAmBhG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAChB+F,IAAgB,IACnB6H,gBAAc5N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO,OAAhB+F,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkB6H,gBAAc,IACnCE,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACU,OAAhB+F,SAAgB,IAAhBA,IAAgC,QAAhBoQ,EAAhBpQ,GAAkB6H,sBAAc,IAAAuI,OAAhB,EAAhBA,EACCrI,aAAW,IACfI,MAAOhV,EAAElD,OAAOxB,YAGpB,EAEJC,MAAM,QACNC,QAAQ,qFACRF,OACkB,OAAhBuR,SAAgB,IAAhBA,IAAgC,QAAhB/D,EAAhB+D,GAAkB6H,sBAAc,IAAA5L,GAAa,QAAbC,EAAhCD,EAAkC8L,mBAAW,IAAA7L,OAA7B,EAAhBA,EACIiM,QAAS,eAQP,YAAnBnK,KACC1F,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,mBACHiC,KAAK,mBACLpC,SAAU,SAACoD,GAAsC,OAC/CkN,IAAuBpG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACpBmG,IAAoB,IACvB8H,WAASjO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACgB,OAApBmG,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB8H,WAAS,IAClCX,SAAUpU,EAAElD,OAAOxB,UAErB,EAEJC,MAAM,WACNC,QAAQ,mDACRF,OAA2B,OAApB2R,SAAoB,IAApBA,IAA+B,QAAXjE,EAApBiE,GAAsB8H,iBAAS,IAAA/L,OAAX,EAApBA,EAAiCoL,WAAY,GACpDjV,MAAOkS,GAAmC,kBAAK,GAC/CnS,UAAQ,OAGZoG,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CACH1D,MAAI,EACJC,GAAI,GACJQ,MAAO,CACLN,aAAc,IACdoJ,UAEFF,EAAAA,EAAAA,MAAA,YAAUjJ,UAAWR,GAAQ0gB,WAAW/W,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UAAQpJ,UAAWR,GAAQ2gB,gBAAgBhX,SAAC,iBAG5CC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,gBACHiC,KAAK,gBACLpC,SAAU,SACRoD,GAAsC,IAAAkd,EAAA,OAEtChQ,IAAuBpG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACpBmG,IAAoB,IACvB8H,WAASjO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACgB,OAApBmG,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB8H,WAAS,IAClCH,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACc,OAApBmG,SAAoB,IAApBA,IAA+B,QAAXiQ,EAApBjQ,GAAsB8H,iBAAS,IAAAmI,OAAX,EAApBA,EACCtI,aAAW,IACfI,MAAOhV,EAAElD,OAAOxB,YAGpB,EAEJC,MAAM,QACNC,QAAQ,2EACRF,OACsB,OAApB2R,SAAoB,IAApBA,IAA+B,QAAXhE,GAApBgE,GAAsB8H,iBAAS,IAAA9L,IAAa,QAAbC,GAA/BD,GAAiC2L,mBAAW,IAAA1L,QAAxB,EAApBA,GACI8L,QAAS,GAEf7V,MAAOkS,GAAgC,eAAK,GAC5CnS,UAAQ,OAGZoG,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdpf,GAAG,iBACHiC,KAAK,iBACLpC,SAAU,SACRoD,GAAsC,IAAAmd,EAAA,OAEtCjQ,IAAuBpG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACpBmG,IAAoB,IACvB8H,WAASjO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACgB,OAApBmG,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB8H,WAAS,IAClCH,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACc,OAApBmG,SAAoB,IAApBA,IAA+B,QAAXkQ,EAApBlQ,GAAsB8H,iBAAS,IAAAoI,OAAX,EAApBA,EACCvI,aAAW,IACfK,OAAQjV,EAAElD,OAAOxB,YAGrB,EAEJC,MAAM,SACNC,QAAQ,kHACRF,OACsB,OAApB2R,SAAoB,IAApBA,IAA+B,QAAX9D,GAApB8D,GAAsB8H,iBAAS,IAAA5L,IAAa,QAAbC,GAA/BD,GAAiCyL,mBAAW,IAAAxL,QAAxB,EAApBA,GACI6L,SAAU,GAEhB9V,MAAOkS,GAAiC,gBAAK,GAC7CnS,UAAQ,OAGZoG,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIG,UAAWR,GAAQ4gB,aAAajX,UACjDC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdne,KAAK,SACL2e,IAAI,IACJ5f,GAAG,gBACHiC,KAAK,gBACLpC,SAAU,SACRoD,GAAsC,IAAAod,EAAA,OAEtClQ,IAAuBpG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACpBmG,IAAoB,IACvB8H,WAASjO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACgB,OAApBmG,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB8H,WAAS,IAClCH,aAAW9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACc,OAApBmG,SAAoB,IAApBA,IAA+B,QAAXmQ,EAApBnQ,GAAsB8H,iBAAS,IAAAqI,OAAX,EAApBA,EACCxI,aAAW,IACfH,MAAOzU,EAAElD,OAAOxB,YAGpB,EAEJC,MAAM,kBACND,OACsB,OAApB2R,SAAoB,IAApBA,IAA+B,QAAX5D,GAApB4D,GAAsB8H,iBAAS,IAAA1L,IAAa,QAAbC,GAA/BD,GAAiCuL,mBAAW,IAAAtL,QAAxB,EAApBA,GACImL,QAAS,GAEftV,MAAOkS,GAAgC,eAAK,mBAU5D/L,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC0V,EAAAA,IAAY,CAAA3V,SAAC,wCAEhBC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC4V,EAAAA,EAAiB,CAChB5f,MAAM,0BACNyB,GAAG,0BACHiC,KAAK,0BACLoc,QAASvN,GACTjR,SAAU,kBACRkR,IAA8BD,GAA0B,EAE1DtS,MAAO,0BAGVsS,KACC1I,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBF,EAAAA,EAAAA,MAAA,YAAUjJ,UAAWR,GAAQ0gB,WAAW/W,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UAAQpJ,UAAWR,GAAQ2gB,gBAAgBhX,SAAC,mCAG3CgJ,IACC/I,EAAAA,EAAAA,KAAC+X,EAAAA,EAAc,CACblb,gBAAiBkM,GACjBjL,SAAU,kBACRuT,GAAkBtI,GAA8B,KAIpDlJ,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACgY,EAAAA,EAAY,CACX1gB,SAAU,SAAC2gB,EAActd,GACvB6Q,GAAwB,CACtBoD,YAAaqJ,GAAgB,GAC7BxgB,IAAwB,OAApB8T,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB9T,KAAM,GAChCsd,IAAKpa,GAAY,GACjBud,MAA0B,OAApB3M,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB2M,OAAQ,GACpCrJ,cACsB,OAApBtD,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBsD,eAAgB,KAE1C5C,GAAgB,YAClB,EACAnS,OAAO,YACPrC,GAAG,YACHiC,KAAK,YACLzD,MAAM,MACND,MAA2B,OAApBuV,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBwJ,OAE/B/U,EAAAA,EAAAA,KAACgY,EAAAA,EAAY,CACX1gB,SAAU,SAAC2gB,EAActd,GACvB6Q,GAAwB,CACtBoD,aACsB,OAApBrD,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBqD,cAAe,GACvCnX,IAAwB,OAApB8T,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB9T,KAAM,GAChCsd,KAAyB,OAApBxJ,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBwJ,MAAO,GAClCmD,KAAMvd,GAAY,GAClBkU,aAAcoJ,GAAgB,KAEhChM,GAAgB,aAClB,EACAnS,OAAO,uBACPrC,GAAG,aACHiC,KAAK,aACLzD,MAAM,OACND,MAA2B,OAApBuV,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB2M,gBAMvClY,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBF,EAAAA,EAAAA,MAAA,YAAUjJ,UAAWR,GAAQ0gB,WAAW/W,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UAAQpJ,UAAWR,GAAQ2gB,gBAAgBhX,SAAC,iFAI3CoJ,IACCnJ,EAAAA,EAAAA,KAAC+X,EAAAA,EAAc,CACblb,gBAAiBsM,GACjBrL,SAAU,kBACRuT,GAAkBlI,GAA2B,KAIjDtJ,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACgY,EAAAA,EAAY,CACX1gB,SAAU,SAAC2gB,EAActd,GACvB6O,GAAwB,CACtBoF,YAAaqJ,GAAgB,GAC7BxgB,IAAwB,OAApB8R,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB9R,KAAM,GAChCsd,IAAKpa,GAAY,GACjBud,MAA0B,OAApB3O,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB2O,OAAQ,GACpCrJ,cACsB,OAApBtF,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBsF,eAAgB,KAE1C5C,GAAgB,YAClB,EACAnS,OAAO,YACPrC,GAAG,YACHiC,KAAK,YACLzD,MAAM,MACND,MAA2B,OAApBuT,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBwL,OAE/B/U,EAAAA,EAAAA,KAACgY,EAAAA,EAAY,CACX1gB,SAAU,SAAC2gB,EAActd,GACvB6O,GAAwB,CACtBoF,aACsB,OAApBrF,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBqF,cAAe,GACvCnX,IAAwB,OAApB8R,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB9R,KAAM,GAChCsd,KAAyB,OAApBxL,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBwL,MAAO,GAClCmD,KAAMvd,GAAY,GAClBkU,aAAcoJ,GAAgB,KAEhChM,GAAgB,aAClB,EACAnS,OAAO,uBACPrC,GAAG,aACHiC,KAAK,aACLzD,MAAM,OACND,MAA2B,OAApBuT,SAAoB,IAApBA,QAAoB,EAApBA,GAAsB2O,gBAMvClY,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBF,EAAAA,EAAAA,MAAA,YAAUjJ,UAAWR,GAAQ0gB,WAAW/W,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UAAQpJ,UAAWR,GAAQ2gB,gBAAgBhX,SAAC,iFAI3C4K,IACC3K,EAAAA,EAAAA,KAAC+X,EAAAA,EAAc,CACblb,gBAAiB8N,GACjB7M,SAAU,kBACRuT,GAAkB1G,GAAyB,KAI/C9K,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACgY,EAAAA,EAAY,CACX1gB,SAAU,SAAC2gB,EAActd,GACvByQ,GAAsB,CACpBwD,YAAaqJ,GAAgB,GAC7BxgB,IAAsB,OAAlB0T,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB1T,KAAM,GAC9Bsd,IAAKpa,GAAY,GACjBud,MAAwB,OAAlB/M,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB+M,OAAQ,GAClCrJ,cACoB,OAAlB1D,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB0D,eAAgB,IAE1C,EACA/U,OAAO,YACPrC,GAAG,eACHiC,KAAK,eACLzD,MAAM,MACND,MAAyB,OAAlBmV,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB4J,OAE7B/U,EAAAA,EAAAA,KAACgY,EAAAA,EAAY,CACX1gB,SAAU,SAAC2gB,EAActd,GAAQ,OAC/ByQ,GAAsB,CACpBwD,aACoB,OAAlBzD,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoByD,cAAe,GACrCnX,IAAsB,OAAlB0T,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB1T,KAAM,GAC9Bsd,KAAuB,OAAlB5J,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB4J,MAAO,GAChCmD,KAAMvd,GAAY,GAClBkU,aAAcoJ,GAAgB,IAC9B,EAEJne,OAAO,uBACPrC,GAAG,gBACHiC,KAAK,gBACLzD,MAAM,OACND,OAAyB,OAAlBmV,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoB+M,OAAQ,QAIxCnN,IACC/K,EAAAA,EAAAA,KAAC+X,EAAAA,EAAc,CACblb,gBAAiBkO,GACjBjN,SAAU,kBACRuT,GAAkBtG,GAAuB,KAI7C/K,EAAAA,EAAAA,KAACgY,EAAAA,EAAY,CACX1gB,SAAU,SAAC2gB,EAActd,GAAQ,OAC/BiR,GAAoB,CAClBgD,aAA6B,OAAhBjD,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBiD,cAAe,GAC9CnX,IAAoB,OAAhBkU,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBlU,KAAM,GAC5Bsd,KAAqB,OAAhBpJ,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBoJ,MAAO,GAC9BmD,KAAMvd,GAAY,GAClBkU,aAAcoJ,GAAgB,IAC9B,EAEJne,OAAO,uBACPrC,GAAG,cACHiC,KAAK,cACLzD,MAAM,KACND,OAAuB,OAAhB2V,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBuM,OAAQ,cAO7ClY,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdne,KAAK,OACLjB,GAAG,QACHiC,KAAK,QACLpC,SAAU,SAACoD,GAAsC,OAC/CsL,GAAStL,EAAElD,OAAOxB,MAAM,EAE1BC,MAAM,QACNC,QAAQ,sBACRiiB,YAAY,iCACZniB,MAAO+P,QAGX/F,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdne,KAAK,SACL2e,IAAI,IACJ5f,GAAG,WACHiC,KAAK,WACLpC,SAAU,SAACoD,GAAsC,OAC/CkL,GAAYlL,EAAElD,OAAOxB,MAAM,EAE7BC,MAAM,WACNC,QAAQ,4BACRF,MAAO2P,GACP/L,UAAQ,EACRC,MAAOkS,GAA2B,UAAK,QAG3C/L,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC0V,EAAAA,IAAY,CAAA3V,SAAC,+BAEhBC,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBF,EAAAA,EAAAA,MAAA,OACEjJ,UAAS,GAAA8X,OAAKtY,GAAQgiB,eAAc,KAAA1J,OAAItY,GAAQiiB,qBAAsBtY,SAAA,EAEtEC,EAAAA,EAAAA,KAAA,OACEpJ,UAAS,GAAA8X,OAAKtY,GAAQ4gB,aAAY,KAAAtI,OAAItY,GAAQkiB,aAAcvY,UAE5DC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdne,KAAK,SACLjB,GAAG,gCACHiC,KAAK,gCACLpC,SAAU,SAACoD,GACTmM,IAAkBrF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACfoF,IAAe,IAClBF,UAAWhM,EAAElD,OAAOxB,QAExB,EACAC,MAAM,cACND,MAAO4Q,GAAgBF,UACvB9M,UAAQ,EACRC,MACEkS,GAAgD,+BAAK,GAEvDsL,IAAI,SAGRrX,EAAAA,EAAAA,KAAA,OACEpJ,UAAS,GAAA8X,OAAKtY,GAAQ4gB,aAAY,KAAAtI,OAAItY,GAAQkiB,aAAcvY,UAE5DC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdne,KAAK,SACLjB,GAAG,iCACHiC,KAAK,iCACLpC,SAAU,SAACoD,GACTmM,IAAkBrF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACfoF,IAAe,IAClBJ,WAAY9L,EAAElD,OAAOxB,QAEzB,EACAC,MAAM,eACND,MAAO4Q,GAAgBJ,WACvB5M,UAAQ,EACRC,MACEkS,GAAiD,gCAAK,GAExDsL,IAAI,SAGRrX,EAAAA,EAAAA,KAAA,OACEpJ,UAAS,GAAA8X,OAAKtY,GAAQ4gB,aAAY,KAAAtI,OAAItY,GAAQkiB,aAAcvY,UAE5DC,EAAAA,EAAAA,KAAC6W,EAAAA,EAAe,CACdne,KAAK,SACLjB,GAAG,8BACHiC,KAAK,8BACLpC,SAAU,SAACoD,GACTmM,IAAkBrF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACfoF,IAAe,IAClBN,QAAS5L,EAAElD,OAAOxB,QAEtB,EACAC,MAAM,UACND,MAAO4Q,GAAgBN,QACvB1M,UAAQ,EACRC,MACEkS,GAA8C,6BAAK,GAErDsL,IAAI,cAKZrX,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAGsJ,UAChBC,EAAAA,EAAAA,KAAC4V,EAAAA,EAAiB,CAChB5f,MAAM,iCACNyB,GAAG,mCACHiC,KAAK,mCACLoc,QAASlP,GAAgBH,aACzBnP,SAAU,SAACoD,GACT,IACMob,EADUpb,EAAElD,OACMse,QACxBjP,IAAkBrF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACfoF,IAAe,IAClBH,aAAcqP,IAElB,EACA7f,MAAO,6BAKf+J,EAAAA,EAAAA,KAAC9F,EAAAA,GAAI,CAAC1D,MAAI,EAACC,GAAI,GAAIC,GAAI,CAAEwB,QAAS,OAAQG,eAAgB,YAAa0H,UACrEC,EAAAA,EAAAA,KAACuY,EAAAA,IAAM,CACL9gB,GAAI,kBACJiB,KAAK,SACLE,QAAQ,aACRe,UAAWwQ,GACXpO,QAAS,kBAAMwQ,IAAe,EAAK,EACnCtW,MAAO,gBAMnB,G,mFCvyDA,KAAeL,EAAAA,EAAAA,IA5BA,SAACC,GAAY,aAC1BC,EAAAA,EAAAA,GAAa,CACX0iB,WAAY,CACVzgB,OAAoB,QAAb,EAAAlC,EAAM4iB,eAAO,aAAb,EAAe5e,MAAM6e,OAAQ,YAErC,GAuBL,EAfmB,SAAH,GAIS,IAHvBtiB,EAAO,EAAPA,QACAiG,EAAY,EAAZA,aAAa,EAAD,EACZsc,UAAAA,OAAS,OAAO,EAEhB,OACE,UAAC,WAAc,WACZA,IAAa,mBACd,SAAC,IAAU,CAAC7c,UAAU,IAAIlD,QAAQ,QAAQhC,UAAWR,EAAQoiB,WAAW,SACrEnc,MAIT,G","sources":["screens/Console/Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/FormHr.tsx","screens/Console/Common/TLSCertificate/TLSCertificate.tsx","screens/Console/Tenants/TenantDetails/KMSPolicyInfo.tsx","screens/Console/Tenants/TenantDetails/TenantEncryption.tsx","screens/shared/ErrorBlock.tsx"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Box, InputLabel, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Button, CopyIcon, HelpIcon } from \"mds\";\nimport { fieldBasic } from \"../common/styleLibrary\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\nimport TooltipWrapper from \"../../TooltipWrapper/TooltipWrapper\";\n\ninterface ICodeWrapper {\n  value: string;\n  label?: string;\n  mode?: string;\n  tooltip?: string;\n  classes: any;\n  onChange?: (editor: any, data: any, value: string) => any;\n  onBeforeChange: (editor: any, data: any, value: string) => any;\n  readOnly?: boolean;\n  editorHeight?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n  });\n\nconst CodeMirrorWrapper = ({\n  value,\n  label = \"\",\n  tooltip = \"\",\n  mode = \"json\",\n  classes,\n  onBeforeChange,\n  readOnly = false,\n  editorHeight = \"250px\",\n}: ICodeWrapper) => {\n  return (\n    <React.Fragment>\n      <Grid item xs={12} sx={{ marginBottom: \"10px\" }}>\n        <InputLabel className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div className={classes.tooltip}>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n      </Grid>\n\n      <Grid\n        item\n        xs={12}\n        style={{\n          maxHeight: editorHeight,\n          overflow: \"auto\",\n          border: \"1px solid #eaeaea\",\n        }}\n      >\n        <CodeEditor\n          value={value}\n          language={mode}\n          onChange={(evn) => {\n            onBeforeChange(null, null, evn.target.value);\n          }}\n          id={\"code_wrapper\"}\n          padding={15}\n          style={{\n            fontSize: 12,\n            backgroundColor: \"#fefefe\",\n            fontFamily:\n              \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\n            minHeight: editorHeight || \"initial\",\n            color: \"#000000\",\n          }}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sx={{\n          background: \"#f7f7f7\",\n          border: \"1px solid #eaeaea\",\n          borderTop: 0,\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: \"2px\",\n            paddingRight: \"5px\",\n            justifyContent: \"flex-end\",\n            \"& button\": {\n              height: \"26px\",\n              width: \"26px\",\n              padding: \"2px\",\n              \" .min-icon\": {\n                marginLeft: \"0\",\n              },\n            },\n          }}\n        >\n          <TooltipWrapper tooltip={\"Copy to Clipboard\"}>\n            <CopyToClipboard text={value}>\n              <Button\n                type={\"button\"}\n                id={\"copy-code-mirror\"}\n                icon={<CopyIcon />}\n                color={\"primary\"}\n                variant={\"regular\"}\n              />\n            </CopyToClipboard>\n          </TooltipWrapper>\n        </Box>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(CodeMirrorWrapper);\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport { HelpIcon } from \"mds\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Operator\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport styled from \"@emotion/styled\";\n\nconst FormHr = styled(\"hr\")`\n  border-top: 0;\n  border-left: 0;\n  border-right: 0;\n  border-color: #999999;\n  background-color: transparent;\n`;\n\nexport default FormHr;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { DateTime, Duration } from \"luxon\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { ICertificateInfo } from \"../../Tenants/types\";\nimport LanguageIcon from \"@mui/icons-material/Language\";\nimport Chip from \"@mui/material/Chip\";\nimport {\n  Box,\n  Container,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from \"@mui/material\";\nimport EventBusyIcon from \"@mui/icons-material/EventBusy\";\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\nimport { CertificateIcon } from \"mds\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    certificateIcon: {\n      float: \"left\",\n      paddingTop: \"5px !important\",\n      paddingRight: \"10px !important\",\n    },\n    certificateInfo: { float: \"right\" },\n    certificateWrapper: {\n      height: \"auto\",\n      margin: 5,\n      border: \"1px solid #E2E2E2\",\n      userSelect: \"text\",\n      borderRadius: 4,\n      \"& h6\": {\n        fontWeight: \"bold\",\n      },\n      \"& div\": {\n        padding: 0,\n      },\n    },\n    certificateExpiry: {\n      color: \"#616161\",\n      display: \"flex\",\n      alignItems: \"center\",\n      flexWrap: \"wrap\",\n      marginBottom: 5,\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificateDomains: {\n      color: \"#616161\",\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificatesList: {\n      border: \"1px solid #E2E2E2\",\n      borderRadius: 4,\n      color: \"#616161\",\n      textTransform: \"lowercase\",\n      overflowY: \"scroll\",\n      maxHeight: 145,\n      marginBottom: 10,\n    },\n    certificatesListItem: {\n      padding: \"0px 16px\",\n      borderBottom: \"1px solid #E2E2E2\",\n      \"& div\": {\n        minWidth: 0,\n      },\n      \"& svg\": {\n        fontSize: 12,\n        marginRight: 10,\n        opacity: 0.5,\n      },\n      \"& span\": {\n        fontSize: 12,\n      },\n    },\n    certificateExpiring: {\n      color: \"orange\",\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificateExpired: {\n      color: \"red\",\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n  });\n\ninterface ITLSCertificate {\n  classes: any;\n  certificateInfo: ICertificateInfo;\n  onDelete: any;\n}\n\nconst TLSCertificate = ({\n  classes,\n  certificateInfo,\n  onDelete = () => {},\n}: ITLSCertificate) => {\n  const certificates = certificateInfo.domains || [];\n\n  const expiry = DateTime.fromISO(certificateInfo.expiry);\n  const now = DateTime.utc();\n  // Expose error on Tenant if certificate is near expiration or expired\n  let daysToExpiry: number = 0;\n  let daysToExpiryHuman: string = \"\";\n  let certificateExpiration: string = \"\";\n  if (expiry) {\n    let durationToExpiry = expiry.diff(now);\n    daysToExpiry = durationToExpiry.as(\"days\");\n    daysToExpiryHuman = durationToExpiry\n      .minus(Duration.fromObject({ days: 1 }))\n      .shiftTo(\"days\")\n      .toHuman({ listStyle: \"long\", maximumFractionDigits: 0 });\n    if (daysToExpiry >= 10 && daysToExpiry < 30) {\n      certificateExpiration = classes.certificateExpiring;\n    }\n    if (daysToExpiry < 10) {\n      certificateExpiration = classes.certificateExpired;\n      if (daysToExpiry < 2) {\n        daysToExpiryHuman = durationToExpiry\n          .minus(Duration.fromObject({ minutes: 1 }))\n          .shiftTo(\"hours\", \"minutes\")\n          .toHuman({ listStyle: \"long\", maximumFractionDigits: 0 });\n        if (durationToExpiry.as(\"minutes\") <= 1) {\n          daysToExpiryHuman = \"EXPIRED\";\n        }\n      }\n    }\n  }\n\n  return (\n    <Chip\n      key={certificateInfo.name}\n      variant=\"outlined\"\n      color=\"primary\"\n      className={classes.certificateWrapper}\n      label={\n        <Container>\n          <Grid item xs={1} className={classes.certificateIcon}>\n            <CertificateIcon />\n          </Grid>\n          <Grid item xs={11} className={classes.certificateInfo}>\n            <Typography variant=\"subtitle1\" display=\"block\" gutterBottom>\n              {certificateInfo.name}\n            </Typography>\n            <Box className={classes.certificateExpiry}>\n              <EventBusyIcon color=\"inherit\" fontSize=\"small\" />\n              &nbsp;\n              <span className={\"label\"}>Expiry:&nbsp;</span>\n              <span>{expiry.toFormat(\"yyyy/MM/dd\")}</span>\n            </Box>\n            <Box className={classes.certificateExpiry}>\n              <AccessTimeIcon color=\"inherit\" fontSize=\"small\" />\n              &nbsp;\n              <span className={\"label\"}>Expires in:&nbsp;</span>\n              <span className={certificateExpiration}>{daysToExpiryHuman}</span>\n            </Box>\n            <Divider />\n            <br />\n            <Box className={classes.certificateDomains}>\n              <span className=\"label\">{`${certificates.length} Domain (s):`}</span>\n            </Box>\n            <List className={classes.certificatesList}>\n              {certificates.map((dom, index) => (\n                <ListItem\n                  key={`${dom}-${index}`}\n                  className={classes.certificatesListItem}\n                >\n                  <ListItemAvatar>\n                    <LanguageIcon />\n                  </ListItemAvatar>\n                  <ListItemText primary={dom} />\n                </ListItem>\n              ))}\n            </List>\n          </Grid>\n        </Container>\n      }\n      onDelete={onDelete}\n    />\n  );\n};\n\nexport default withStyles(styles)(TLSCertificate);\n","// This file is part of MinIO Operator\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Box } from \"mds\";\n\nconst getPolicyData = (policies: Record<string, any> = {}) => {\n  const policyNames = Object.keys(policies);\n  return policyNames.map((polName: string) => {\n    const policyConfig = policies[polName] || {};\n    return {\n      name: polName || \"\",\n      identities: policyConfig.identities || [],\n      // v1 specific\n      paths: policyConfig.paths || [],\n      // v2 specific\n      allow: policyConfig.allow || [],\n      deny: policyConfig.deny || [],\n    };\n  });\n};\n\nconst PolicyItem = ({\n  items = [],\n  title = \"\",\n}: {\n  items: string[];\n  title: string;\n}) => {\n  return items?.length ? (\n    <Fragment>\n      <div\n        style={{\n          fontSize: \"0.83em\",\n          fontWeight: \"bold\",\n        }}\n      >\n        {title}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          gap: \"2px\",\n          flexFlow: \"column\",\n          marginLeft: \"8px\",\n        }}\n      >\n        {items.map((iTxt: string) => {\n          return <span style={{ fontSize: \"12px\" }}>- {iTxt}</span>;\n        })}\n      </div>\n    </Fragment>\n  ) : null;\n};\n\nconst KMSPolicyInfo = ({\n  policies = {},\n}: {\n  policies: Record<string, any>;\n}) => {\n  const fmtPolicies = getPolicyData(policies);\n  return fmtPolicies.length ? (\n    <Grid xs={12} marginBottom={\"5px\"}>\n      <h4>Policies</h4>\n      <Box\n        withBorders\n        sx={{\n          maxHeight: \"200px\",\n          overflow: \"auto\",\n          padding: 0,\n        }}\n      >\n        {fmtPolicies.map((pConf: Record<string, any>) => {\n          return (\n            <Box\n              withBorders\n              sx={{\n                display: \"flex\",\n                flexFlow: \"column\",\n                gap: \"2px\",\n                borderLeft: 0,\n                borderRight: 0,\n                borderTop: 0,\n              }}\n            >\n              <div>\n                <b\n                  style={{\n                    fontSize: \"0.83em\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Policy Name:\n                </b>{\" \"}\n                {pConf.name}\n              </div>\n              <PolicyItem title={\"Allow\"} items={pConf?.allow} />\n              <PolicyItem title={\"Deny\"} items={pConf?.deny} />\n              <PolicyItem title={\"Paths\"} items={pConf?.paths} />\n              <PolicyItem title={\"Identities\"} items={pConf?.identities} />\n            </Box>\n          );\n        })}\n      </Box>\n    </Grid>\n  ) : null;\n};\n\nexport default KMSPolicyInfo;\n","// This file is part of MinIO Operator\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ICertificateInfo, ITenantEncryptionResponse } from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button, WarnIcon, SectionTitle } from \"mds\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport { DialogContentText } from \"@mui/material\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport { KeyPair } from \"../ListTenants/utils\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport TLSCertificate from \"../../Common/TLSCertificate/TLSCertificate\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport CodeMirrorWrapper from \"../../Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper\";\nimport FormHr from \"../../Common/FormHr\";\nimport { SecurityContext } from \"../../../../api/operatorApi\";\nimport KMSPolicyInfo from \"./KMSPolicyInfo\";\n\ninterface ITenantEncryption {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    ...containerForHeader,\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n    warningBlock: {\n      color: \"red\",\n      fontSize: \".85rem\",\n      margin: \".5rem 0 .5rem 0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg \": {\n        marginRight: \".3rem\",\n        height: 16,\n        width: 16,\n      },\n    },\n  });\n\nconst TenantEncryption = ({ classes }: ITenantEncryption) => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const [editRawConfiguration, setEditRawConfiguration] = useState<number>(0);\n  const [encryptionRawConfiguration, setEncryptionRawConfiguration] =\n    useState<string>(\"\");\n  const [encryptionEnabled, setEncryptionEnabled] = useState<boolean>(false);\n  const [encryptionType, setEncryptionType] = useState<string>(\"vault\");\n  const [replicas, setReplicas] = useState<string>(\"1\");\n  const [image, setImage] = useState<string>(\"\");\n  const [refreshEncryptionInfo, setRefreshEncryptionInfo] =\n    useState<boolean>(false);\n  const [securityContext, setSecurityContext] = useState<SecurityContext>({\n    fsGroup: \"1000\",\n    fsGroupChangePolicy: \"Always\",\n    runAsGroup: \"1000\",\n    runAsNonRoot: true,\n    runAsUser: \"1000\",\n  });\n  const [policies, setPolicies] = useState<any>([]);\n  const [vaultConfiguration, setVaultConfiguration] = useState<any>(null);\n  const [awsConfiguration, setAWSConfiguration] = useState<any>(null);\n  const [gemaltoConfiguration, setGemaltoConfiguration] = useState<any>(null);\n  const [azureConfiguration, setAzureConfiguration] = useState<any>(null);\n  const [gcpConfiguration, setGCPConfiguration] = useState<any>(null);\n  const [enabledCustomCertificates, setEnabledCustomCertificates] =\n    useState<boolean>(false);\n  const [updatingEncryption, setUpdatingEncryption] = useState<boolean>(false);\n  const [kesServerTLSCertificateSecret, setKesServerTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [minioMTLSCertificateSecret, setMinioMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [minioMTLSCertificate, setMinioMTLSCertificate] =\n    useState<KeyPair | null>(null);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  const [showVaultAppRoleID, setShowVaultAppRoleID] = useState<boolean>(false);\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [showVaultAppRoleSecret, setShowVaultAppRoleSecret] =\n    useState<boolean>(false);\n  const [kmsMTLSCertificateSecret, setKmsMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [kmsCACertificateSecret, setKMSCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [kmsMTLSCertificate, setKmsMTLSCertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [kesServerCertificate, setKESServerCertificate] =\n    useState<KeyPair | null>(null);\n  const [kmsCACertificate, setKmsCACertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [confirmOpen, setConfirmOpen] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (encryptionEnabled) {\n      encryptionValidation = [\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: securityContext.runAsUser,\n          customValidation:\n            securityContext.runAsUser === \"\" ||\n            parseInt(securityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: securityContext.runAsGroup,\n          customValidation:\n            securityContext.runAsGroup === \"\" ||\n            parseInt(securityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: securityContext.fsGroup!,\n          customValidation:\n            securityContext.fsGroup === \"\" ||\n            parseInt(securityContext.fsGroup!) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enabledCustomCertificates) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: false,\n            value: kesServerCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: false,\n            value: kesServerCertificate?.encoded_cert || \"\",\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: false,\n            value: minioMTLSCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: false,\n            value: minioMTLSCertificate?.encoded_cert || \"\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultConfiguration?.endpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultConfiguration?.approle?.id,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultConfiguration?.approle?.secret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultConfiguration?.status?.ping,\n            customValidation: parseInt(vaultConfiguration?.status?.ping) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultConfiguration?.approle?.retry,\n            customValidation: parseInt(vaultConfiguration?.approle?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.endpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.region,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.accesskey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.secretkey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.endpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.token,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.domain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoConfiguration?.keysecure?.credentials?.retry,\n            customValidation:\n              parseInt(gemaltoConfiguration?.keysecure?.credentials?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureConfiguration?.keyvault?.endpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.tenant_id,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_id,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_secret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enabledCustomCertificates,\n    encryptionEnabled,\n    encryptionType,\n    kesServerCertificate?.encoded_key,\n    kesServerCertificate?.encoded_cert,\n    minioMTLSCertificate?.encoded_key,\n    minioMTLSCertificate?.encoded_cert,\n    kmsMTLSCertificate?.encoded_key,\n    kmsMTLSCertificate?.encoded_cert,\n    kmsCACertificate?.encoded_key,\n    kmsCACertificate?.encoded_cert,\n    securityContext,\n    vaultConfiguration,\n    awsConfiguration,\n    gemaltoConfiguration,\n    azureConfiguration,\n    gcpConfiguration,\n    replicas,\n  ]);\n\n  const fetchEncryptionInfo = () => {\n    if (!refreshEncryptionInfo && tenant?.namespace && tenant?.name) {\n      setRefreshEncryptionInfo(true);\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`\n        )\n        .then((resp: ITenantEncryptionResponse) => {\n          setEncryptionRawConfiguration(resp.raw);\n          if (resp.policies) {\n            setPolicies(resp.policies);\n          }\n          if (resp.vault) {\n            setEncryptionType(\"vault\");\n            setVaultConfiguration(resp.vault);\n          } else if (resp.aws) {\n            setEncryptionType(\"aws\");\n            setAWSConfiguration(resp.aws);\n          } else if (resp.gemalto) {\n            setEncryptionType(\"gemalto\");\n            setGemaltoConfiguration(resp.gemalto);\n          } else if (resp.gcp) {\n            setEncryptionType(\"gcp\");\n            setGCPConfiguration(resp.gcp);\n          } else if (resp.azure) {\n            setEncryptionType(\"azure\");\n            setAzureConfiguration(resp.azure);\n          }\n\n          setEncryptionEnabled(true);\n          setImage(resp.image);\n          setReplicas(resp.replicas);\n          if (resp.securityContext) {\n            setSecurityContext(resp.securityContext);\n          }\n          if (resp.server_tls || resp.minio_mtls || resp.kms_mtls) {\n            setEnabledCustomCertificates(true);\n          }\n          if (resp.server_tls) {\n            setKesServerTLSCertificateSecret(resp.server_tls);\n          }\n          if (resp.minio_mtls) {\n            setMinioMTLSCertificateSecret(resp.minio_mtls);\n          }\n          if (resp.kms_mtls) {\n            setKmsMTLSCertificateSecret(resp.kms_mtls.crt);\n            setKMSCACertificateSecret(resp.kms_mtls.ca);\n          }\n          setRefreshEncryptionInfo(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          console.error(err);\n          setRefreshEncryptionInfo(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    fetchEncryptionInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tenant]);\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n    if (certificateInfo.name === kesServerTLSCertificateSecret?.name) {\n      setKesServerTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === minioMTLSCertificateSecret?.name) {\n      setMinioMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === kmsMTLSCertificateSecret?.name) {\n      setKmsMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === kmsCACertificateSecret?.name) {\n      setKMSCACertificateSecret(null);\n    }\n  };\n\n  const updateEncryptionConfiguration = () => {\n    if (encryptionEnabled) {\n      let insertEncrypt = {};\n      switch (encryptionType) {\n        case \"gemalto\":\n          insertEncrypt = {\n            gemalto: {\n              keysecure: {\n                endpoint: gemaltoConfiguration?.keysecure?.endpoint || \"\",\n                credentials: {\n                  token:\n                    gemaltoConfiguration?.keysecure?.credentials?.token || \"\",\n                  domain:\n                    gemaltoConfiguration?.keysecure?.credentials?.domain || \"\",\n                  retry: parseInt(\n                    gemaltoConfiguration?.keysecure?.credentials?.retry\n                  ),\n                },\n              },\n            },\n          };\n          break;\n        case \"aws\":\n          insertEncrypt = {\n            aws: {\n              secretsmanager: {\n                endpoint: awsConfiguration?.secretsmanager?.endpoint || \"\",\n                region: awsConfiguration?.secretsmanager?.region || \"\",\n                kmskey: awsConfiguration?.secretsmanager?.kmskey || \"\",\n                credentials: {\n                  accesskey:\n                    awsConfiguration?.secretsmanager?.credentials?.accesskey ||\n                    \"\",\n                  secretkey:\n                    awsConfiguration?.secretsmanager?.credentials?.secretkey ||\n                    \"\",\n                  token:\n                    awsConfiguration?.secretsmanager?.credentials?.token || \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"azure\":\n          insertEncrypt = {\n            azure: {\n              keyvault: {\n                endpoint: azureConfiguration?.keyvault?.endpoint || \"\",\n                credentials: {\n                  tenant_id:\n                    azureConfiguration?.keyvault?.credentials?.tenant_id || \"\",\n                  client_id:\n                    azureConfiguration?.keyvault?.credentials?.client_id || \"\",\n                  client_secret:\n                    azureConfiguration?.keyvault?.credentials?.client_secret ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"gcp\":\n          insertEncrypt = {\n            gcp: {\n              secretmanager: {\n                project_id: gcpConfiguration?.secretmanager?.project_id || \"\",\n                endpoint: gcpConfiguration?.secretmanager?.endpoint || \"\",\n                credentials: {\n                  client_email:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.client_email || \"\",\n                  client_id:\n                    gcpConfiguration?.secretmanager?.credentials?.client_id ||\n                    \"\",\n                  private_key_id:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.private_key_id || \"\",\n                  private_key:\n                    gcpConfiguration?.secretmanager?.credentials?.private_key ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"vault\":\n          insertEncrypt = {\n            vault: {\n              endpoint: vaultConfiguration?.endpoint || \"\",\n              engine: vaultConfiguration?.engine || \"\",\n              namespace: vaultConfiguration?.namespace || \"\",\n              prefix: vaultConfiguration?.prefix || \"\",\n              approle: {\n                engine: vaultConfiguration?.approle?.engine || \"\",\n                id: vaultConfiguration?.approle?.id || \"\",\n                secret: vaultConfiguration?.approle?.secret || \"\",\n                retry: parseInt(vaultConfiguration?.approle?.retry),\n              },\n              status: {\n                ping: parseInt(vaultConfiguration?.status?.ping),\n              },\n            },\n          };\n          break;\n      }\n\n      let encryptionServerKeyPair: any = {};\n      let encryptionClientKeyPair: any = {};\n      let encryptionKMSCertificates: any = {};\n\n      // MinIO -> KES (mTLS certificates)\n      if (\n        minioMTLSCertificate?.encoded_key &&\n        minioMTLSCertificate?.encoded_cert\n      ) {\n        encryptionClientKeyPair = {\n          minio_mtls: {\n            key: minioMTLSCertificate?.encoded_key,\n            crt: minioMTLSCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      // KES server certificates\n      if (\n        kesServerCertificate?.encoded_key &&\n        kesServerCertificate?.encoded_cert\n      ) {\n        encryptionServerKeyPair = {\n          server_tls: {\n            key: kesServerCertificate?.encoded_key,\n            crt: kesServerCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      // KES -> KMS (mTLS certificates)\n      let kmsMTLSKeyPair = null;\n      let kmsCAInsert = null;\n      if (kmsMTLSCertificate?.encoded_key && kmsMTLSCertificate?.encoded_cert) {\n        kmsMTLSKeyPair = {\n          key: kmsMTLSCertificate?.encoded_key,\n          crt: kmsMTLSCertificate?.encoded_cert,\n        };\n      }\n      if (kmsCACertificate?.encoded_cert) {\n        kmsCAInsert = {\n          ca: kmsCACertificate?.encoded_cert,\n        };\n      }\n      if (kmsMTLSKeyPair || kmsCAInsert) {\n        encryptionKMSCertificates = {\n          kms_mtls: {\n            ...kmsMTLSKeyPair,\n            ...kmsCAInsert,\n          },\n        };\n      }\n\n      const dataSend = {\n        raw: editRawConfiguration ? encryptionRawConfiguration : \"\",\n        secretsToBeDeleted: certificatesToBeRemoved || [],\n        replicas: replicas,\n        securityContext: securityContext,\n        image: image,\n        ...encryptionClientKeyPair,\n        ...encryptionServerKeyPair,\n        ...encryptionKMSCertificates,\n        ...insertEncrypt,\n      };\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"PUT\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            dataSend\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      }\n    } else {\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"DELETE\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            {}\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {confirmOpen && (\n        <ConfirmDialog\n          isOpen={confirmOpen}\n          title={\n            encryptionEnabled\n              ? \"Enable encryption at rest for tenant?\"\n              : \"Disable encryption at rest for tenant?\"\n          }\n          confirmText={encryptionEnabled ? \"Enable\" : \"Disable\"}\n          cancelText=\"Cancel\"\n          onClose={() => setConfirmOpen(false)}\n          onConfirm={updateEncryptionConfiguration}\n          confirmationContent={\n            <DialogContentText>\n              {encryptionEnabled\n                ? \"Data will be encrypted using and external KMS\"\n                : \"Current encrypted information will not be accessible\"}\n              {encryptionEnabled && (\n                <div className={classes.warningBlock}>\n                  <WarnIcon />\n                  <span>\n                    The content of the KES config secret will be overwritten.\n                  </span>\n                </div>\n              )}\n            </DialogContentText>\n          }\n        />\n      )}\n      <Grid container spacing={1}>\n        <Grid item xs>\n          <SectionTitle>Encryption</SectionTitle>\n        </Grid>\n        <Grid item xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\n          <FormSwitchWrapper\n            label={\"\"}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={encryptionEnabled}\n            value={\"tenant_encryption\"}\n            id=\"tenant-encryption\"\n            name=\"tenant-encryption\"\n            onChange={() => {\n              setEncryptionEnabled(!encryptionEnabled);\n            }}\n            description=\"\"\n          />\n        </Grid>\n        <Grid xs={12}>\n          <FormHr />\n        </Grid>\n        {encryptionEnabled && (\n          <Fragment>\n            <Grid item xs={12}>\n              <Tabs\n                value={editRawConfiguration}\n                onChange={(e: React.ChangeEvent<{}>, newValue: number) => {\n                  setEditRawConfiguration(newValue);\n                }}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                aria-label=\"cluster-tabs\"\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n              >\n                <Tab id=\"kms-options\" label=\"Options\" />\n                <Tab id=\"kms-raw-configuration\" label=\"Raw Edit\" />\n              </Tabs>\n            </Grid>\n\n            {editRawConfiguration ? (\n              <Fragment>\n                <Grid item xs={12}>\n                  <CodeMirrorWrapper\n                    value={encryptionRawConfiguration}\n                    mode={\"yaml\"}\n                    onBeforeChange={(editor, data, value) => {\n                      setEncryptionRawConfiguration(value);\n                    }}\n                    editorHeight={\"550px\"}\n                  />\n                </Grid>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <KMSPolicyInfo policies={policies} />\n                <Grid item xs={12} className={classes.encryptionTypeOptions}>\n                  <RadioGroupSelector\n                    currentSelection={encryptionType}\n                    id=\"encryptionType\"\n                    name=\"encryptionType\"\n                    label=\"KMS\"\n                    onChange={(e) => {\n                      setEncryptionType(e.target.value);\n                    }}\n                    selectorOptions={[\n                      { label: \"Vault\", value: \"vault\" },\n                      { label: \"AWS\", value: \"aws\" },\n                      { label: \"Gemalto\", value: \"gemalto\" },\n                      { label: \"GCP\", value: \"gcp\" },\n                      { label: \"Azure\", value: \"azure\" },\n                    ]}\n                  />\n                </Grid>\n\n                {encryptionType === \"vault\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_endpoint\"\n                        name=\"vault_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            endpoint: e.target.value,\n                          })\n                        }\n                        label=\"Endpoint\"\n                        tooltip=\"Endpoint is the Hashicorp Vault endpoint\"\n                        value={vaultConfiguration?.endpoint || \"\"}\n                        error={validationErrors[\"vault_ping\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_engine\"\n                        name=\"vault_engine\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            engine: e.target.value,\n                          })\n                        }\n                        label=\"Engine\"\n                        tooltip=\"Engine is the Hashicorp Vault K/V engine path. If empty, defaults to 'kv'\"\n                        value={vaultConfiguration?.engine || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_namespace\"\n                        name=\"vault_namespace\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            namespace: e.target.value,\n                          })\n                        }\n                        label=\"Namespace\"\n                        tooltip=\"Namespace is an optional Hashicorp Vault namespace. An empty namespace means no particular namespace is used.\"\n                        value={vaultConfiguration?.namespace || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_prefix\"\n                        name=\"vault_prefix\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            prefix: e.target.value,\n                          })\n                        }\n                        label=\"Prefix\"\n                        tooltip=\"Prefix is an optional prefix / directory within the K/V engine. If empty, keys will be stored at the K/V engine top level\"\n                        value={vaultConfiguration?.prefix || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>App Role</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          App Role\n                        </legend>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"vault_approle_engine\"\n                            name=\"vault_approle_engine\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setVaultConfiguration({\n                                ...vaultConfiguration,\n                                approle: {\n                                  ...vaultConfiguration?.approle,\n                                  engine: e.target.value,\n                                },\n                              })\n                            }\n                            label=\"Engine\"\n                            tooltip=\"AppRoleEngine is the AppRole authentication engine path. If empty, defaults to 'approle'\"\n                            value={vaultConfiguration?.approle?.engine || \"\"}\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            type={showVaultAppRoleID ? \"text\" : \"password\"}\n                            id=\"vault_id\"\n                            name=\"vault_id\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setVaultConfiguration({\n                                ...vaultConfiguration,\n                                approle: {\n                                  ...vaultConfiguration?.approle,\n                                  id: e.target.value,\n                                },\n                              })\n                            }\n                            label=\"AppRole ID\"\n                            tooltip=\"AppRoleSecret is the AppRole access secret for authenticating to Hashicorp Vault via the AppRole method\"\n                            value={vaultConfiguration?.approle?.id || \"\"}\n                            required\n                            error={validationErrors[\"vault_id\"] || \"\"}\n                            overlayIcon={\n                              showVaultAppRoleID ? (\n                                <VisibilityOffIcon />\n                              ) : (\n                                <RemoveRedEyeIcon />\n                              )\n                            }\n                            overlayAction={() =>\n                              setShowVaultAppRoleID(!showVaultAppRoleID)\n                            }\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            type={showVaultAppRoleSecret ? \"text\" : \"password\"}\n                            id=\"vault_secret\"\n                            name=\"vault_secret\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setVaultConfiguration({\n                                ...vaultConfiguration,\n                                approle: {\n                                  ...vaultConfiguration?.approle,\n                                  secret: e.target.value,\n                                },\n                              })\n                            }\n                            label=\"AppRole Secret\"\n                            tooltip=\"AppRoleSecret is the AppRole access secret for authenticating to Hashicorp Vault via the AppRole method\"\n                            value={vaultConfiguration?.approle?.secret || \"\"}\n                            required\n                            error={validationErrors[\"vault_secret\"] || \"\"}\n                            overlayIcon={\n                              showVaultAppRoleSecret ? (\n                                <VisibilityOffIcon />\n                              ) : (\n                                <RemoveRedEyeIcon />\n                              )\n                            }\n                            overlayAction={() =>\n                              setShowVaultAppRoleSecret(!showVaultAppRoleSecret)\n                            }\n                          />\n                        </Grid>\n                        <Grid xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            type=\"number\"\n                            min=\"0\"\n                            id=\"vault_retry\"\n                            name=\"vault_retry\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setVaultConfiguration({\n                                ...vaultConfiguration,\n                                approle: {\n                                  ...vaultConfiguration?.approle,\n                                  retry: e.target.value,\n                                },\n                              })\n                            }\n                            label=\"Retry (Seconds)\"\n                            error={validationErrors[\"vault_retry\"] || \"\"}\n                            value={vaultConfiguration?.approle?.retry || \"\"}\n                          />\n                        </Grid>\n                      </fieldset>\n                    </Grid>\n                    <Grid\n                      item\n                      xs={12}\n                      className={classes.formFieldRow}\n                      style={{ marginTop: 15 }}\n                    >\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Status\n                        </legend>\n                        <InputBoxWrapper\n                          type=\"number\"\n                          min=\"0\"\n                          id=\"vault_ping\"\n                          name=\"vault_ping\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setVaultConfiguration({\n                              ...vaultConfiguration,\n                              status: {\n                                ...vaultConfiguration?.status,\n                                ping: e.target.value,\n                              },\n                            })\n                          }\n                          label=\"Ping (Seconds)\"\n                          tooltip=\"controls how often to Vault health status is checked. If not set, defaults to 10s\"\n                          error={validationErrors[\"vault_ping\"] || \"\"}\n                          value={vaultConfiguration?.status?.ping || \"\"}\n                        />\n                      </fieldset>\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"azure\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_endpoint\"\n                        name=\"azure_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        tooltip=\"Endpoint is the Azure KeyVault endpoint\"\n                        error={validationErrors[\"azure_endpoint\"] || \"\"}\n                        value={azureConfiguration?.keyvault?.endpoint || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Credentials\n                        </legend>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"azure_tenant_id\"\n                            name=\"azure_tenant_id\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setAzureConfiguration({\n                                ...azureConfiguration,\n                                keyvault: {\n                                  ...azureConfiguration?.keyvault,\n                                  credentials: {\n                                    ...azureConfiguration?.keyvault\n                                      ?.credentials,\n                                    tenant_id: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Tenant ID\"\n                            tooltip=\"TenantID is the ID of the Azure KeyVault tenant\"\n                            value={\n                              azureConfiguration?.keyvault?.credentials\n                                ?.tenant_id || \"\"\n                            }\n                            error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"azure_client_id\"\n                            name=\"azure_client_id\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setAzureConfiguration({\n                                ...azureConfiguration,\n                                keyvault: {\n                                  ...azureConfiguration?.keyvault,\n                                  credentials: {\n                                    ...azureConfiguration?.keyvault\n                                      ?.credentials,\n                                    client_id: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Client ID\"\n                            tooltip=\"ClientID is the ID of the client accessing Azure KeyVault\"\n                            value={\n                              azureConfiguration?.keyvault?.credentials\n                                ?.client_id || \"\"\n                            }\n                            error={validationErrors[\"azure_client_id\"] || \"\"}\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"azure_client_secret\"\n                            name=\"azure_client_secret\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setAzureConfiguration({\n                                ...azureConfiguration,\n                                keyvault: {\n                                  ...azureConfiguration?.keyvault,\n                                  credentials: {\n                                    ...azureConfiguration?.keyvault\n                                      ?.credentials,\n                                    client_secret: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Client Secret\"\n                            tooltip=\"ClientSecret is the client secret accessing the Azure KeyVault\"\n                            value={\n                              azureConfiguration?.keyvault?.credentials\n                                ?.client_secret || \"\"\n                            }\n                            error={\n                              validationErrors[\"azure_client_secret\"] || \"\"\n                            }\n                          />\n                        </Grid>\n                      </fieldset>\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"gcp\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_project_id\"\n                        name=\"gcp_project_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              project_id: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Project ID\"\n                        tooltip=\"ProjectID is the GCP project ID\"\n                        value={gcpConfiguration?.secretmanager.project_id || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_endpoint\"\n                        name=\"gcp_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        tooltip=\"Endpoint is the GCP project ID. If empty defaults to: secretmanager.googleapis.com:443\"\n                        value={gcpConfiguration?.secretmanager.endpoint || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Credentials\n                        </legend>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gcp_client_email\"\n                            name=\"gcp_client_email\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setGCPConfiguration({\n                                ...gcpConfiguration,\n                                secretmanager: {\n                                  ...gcpConfiguration?.secretmanager,\n                                  credentials: {\n                                    ...gcpConfiguration?.secretmanager\n                                      .credentials,\n                                    client_email: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Client Email\"\n                            tooltip=\"Is the Client email of the GCP service account used to access the SecretManager\"\n                            value={\n                              gcpConfiguration?.secretmanager.credentials\n                                ?.client_email || \"\"\n                            }\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gcp_client_id\"\n                            name=\"gcp_client_id\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setGCPConfiguration({\n                                ...gcpConfiguration,\n                                secretmanager: {\n                                  ...gcpConfiguration?.secretmanager,\n                                  credentials: {\n                                    ...gcpConfiguration?.secretmanager\n                                      .credentials,\n                                    client_id: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Client ID\"\n                            tooltip=\"Is the Client ID of the GCP service account used to access the SecretManager\"\n                            value={\n                              gcpConfiguration?.secretmanager.credentials\n                                ?.client_id || \"\"\n                            }\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gcp_private_key_id\"\n                            name=\"gcp_private_key_id\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setGCPConfiguration({\n                                ...gcpConfiguration,\n                                secretmanager: {\n                                  ...gcpConfiguration?.secretmanager,\n                                  credentials: {\n                                    ...gcpConfiguration?.secretmanager\n                                      .credentials,\n                                    private_key_id: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Private Key ID\"\n                            tooltip=\"Is the private key ID of the GCP service account used to access the SecretManager\"\n                            value={\n                              gcpConfiguration?.secretmanager.credentials\n                                ?.private_key_id || \"\"\n                            }\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gcp_private_key\"\n                            name=\"gcp_private_key\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setGCPConfiguration({\n                                ...gcpConfiguration,\n                                secretmanager: {\n                                  ...gcpConfiguration?.secretmanager,\n                                  credentials: {\n                                    ...gcpConfiguration?.secretmanager\n                                      .credentials,\n                                    private_key: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Private Key\"\n                            tooltip=\"Is the private key of the GCP service account used to access the SecretManager\"\n                            value={\n                              gcpConfiguration?.secretmanager.credentials\n                                ?.private_key || \"\"\n                            }\n                          />\n                        </Grid>\n                      </fieldset>\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"aws\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_endpoint\"\n                        name=\"aws_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        tooltip=\"Endpoint is the AWS SecretsManager endpoint. AWS SecretsManager endpoints have the following schema: secrestmanager[-fips].<region>.amanzonaws.com\"\n                        value={awsConfiguration?.secretsmanager?.endpoint || \"\"}\n                        required\n                        error={validationErrors[\"aws_endpoint\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_region\"\n                        name=\"aws_region\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              region: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Region\"\n                        tooltip=\"Region is the AWS region the SecretsManager is located\"\n                        value={awsConfiguration?.secretsmanager?.region || \"\"}\n                        error={validationErrors[\"aws_region\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_kmsKey\"\n                        name=\"aws_kmsKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              kmskey: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"KMS Key\"\n                        tooltip=\"KMSKey is the AWS-KMS key ID (CMK-ID) used to en/decrypt secrets managed by the SecretsManager. If empty, the default AWS KMS key is used\"\n                        value={awsConfiguration?.secretsmanager?.kmskey || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Credentials\n                        </legend>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"aws_accessKey\"\n                            name=\"aws_accessKey\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setAWSConfiguration({\n                                ...awsConfiguration,\n                                secretsmanager: {\n                                  ...awsConfiguration?.secretsmanager,\n                                  credentials: {\n                                    ...awsConfiguration?.secretsmanager\n                                      ?.credentials,\n                                    accesskey: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Access Key\"\n                            tooltip=\"AccessKey is the access key for authenticating to AWS\"\n                            value={\n                              awsConfiguration?.secretsmanager?.credentials\n                                ?.accesskey || \"\"\n                            }\n                            error={validationErrors[\"aws_accessKey\"] || \"\"}\n                            required\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"aws_secretKey\"\n                            name=\"aws_secretKey\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setAWSConfiguration({\n                                ...awsConfiguration,\n                                secretsmanager: {\n                                  ...awsConfiguration?.secretsmanager,\n                                  credentials: {\n                                    ...awsConfiguration?.secretsmanager\n                                      ?.credentials,\n                                    secretkey: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Secret Key\"\n                            tooltip=\"SecretKey is the secret key for authenticating to AWS\"\n                            value={\n                              awsConfiguration?.secretsmanager?.credentials\n                                ?.secretkey || \"\"\n                            }\n                            error={validationErrors[\"aws_secretKey\"] || \"\"}\n                            required\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"aws_token\"\n                            name=\"aws_token\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setAWSConfiguration({\n                                ...awsConfiguration,\n                                secretsmanager: {\n                                  ...awsConfiguration?.secretsmanager,\n                                  credentials: {\n                                    ...awsConfiguration?.secretsmanager\n                                      ?.credentials,\n                                    token: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Token\"\n                            tooltip=\"SessionToken is an optional session token for authenticating to AWS when using STS\"\n                            value={\n                              awsConfiguration?.secretsmanager?.credentials\n                                ?.token || \"\"\n                            }\n                          />\n                        </Grid>\n                      </fieldset>\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"gemalto\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_endpoint\"\n                        name=\"gemalto_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        tooltip=\"Endpoint is the endpoint to the KeySecure server\"\n                        value={gemaltoConfiguration?.keysecure?.endpoint || \"\"}\n                        error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      xs={12}\n                      style={{\n                        marginBottom: 15,\n                      }}\n                    >\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Credentials\n                        </legend>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gemalto_token\"\n                            name=\"gemalto_token\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setGemaltoConfiguration({\n                                ...gemaltoConfiguration,\n                                keysecure: {\n                                  ...gemaltoConfiguration?.keysecure,\n                                  credentials: {\n                                    ...gemaltoConfiguration?.keysecure\n                                      ?.credentials,\n                                    token: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Token\"\n                            tooltip=\"Token is the refresh authentication token to access the KeySecure server\"\n                            value={\n                              gemaltoConfiguration?.keysecure?.credentials\n                                ?.token || \"\"\n                            }\n                            error={validationErrors[\"gemalto_token\"] || \"\"}\n                            required\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            id=\"gemalto_domain\"\n                            name=\"gemalto_domain\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setGemaltoConfiguration({\n                                ...gemaltoConfiguration,\n                                keysecure: {\n                                  ...gemaltoConfiguration?.keysecure,\n                                  credentials: {\n                                    ...gemaltoConfiguration?.keysecure\n                                      ?.credentials,\n                                    domain: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Domain\"\n                            tooltip=\"Domain is the isolated namespace within the KeySecure server. If empty, defaults to the top-level / root domain\"\n                            value={\n                              gemaltoConfiguration?.keysecure?.credentials\n                                ?.domain || \"\"\n                            }\n                            error={validationErrors[\"gemalto_domain\"] || \"\"}\n                            required\n                          />\n                        </Grid>\n                        <Grid item xs={12} className={classes.formFieldRow}>\n                          <InputBoxWrapper\n                            type=\"number\"\n                            min=\"0\"\n                            id=\"gemalto_retry\"\n                            name=\"gemalto_retry\"\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                              setGemaltoConfiguration({\n                                ...gemaltoConfiguration,\n                                keysecure: {\n                                  ...gemaltoConfiguration?.keysecure,\n                                  credentials: {\n                                    ...gemaltoConfiguration?.keysecure\n                                      ?.credentials,\n                                    retry: e.target.value,\n                                  },\n                                },\n                              })\n                            }\n                            label=\"Retry (seconds)\"\n                            value={\n                              gemaltoConfiguration?.keysecure?.credentials\n                                ?.retry || \"\"\n                            }\n                            error={validationErrors[\"gemalto_retry\"] || \"\"}\n                          />\n                        </Grid>\n                      </fieldset>\n                    </Grid>\n                  </Fragment>\n                )}\n              </Fragment>\n            )}\n\n            <Grid item xs={12}>\n              <SectionTitle>Additional Configuration for KES</SectionTitle>\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableCustomCertsForKES\"\n                id=\"enableCustomCertsForKES\"\n                name=\"enableCustomCertsForKES\"\n                checked={enabledCustomCertificates}\n                onChange={() =>\n                  setEnabledCustomCertificates(!enabledCustomCertificates)\n                }\n                label={\"Custom Certificates\"}\n              />\n            </Grid>\n            {enabledCustomCertificates && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Encryption server certificates\n                    </legend>\n                    {kesServerTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={kesServerTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(kesServerTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setKESServerCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: kesServerCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: kesServerCertificate?.cert || \"\",\n                              encoded_cert:\n                                kesServerCertificate?.encoded_cert || \"\",\n                            });\n                            cleanValidation(\"serverKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"serverKey\"\n                          name=\"serverKey\"\n                          label=\"Key\"\n                          value={kesServerCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setKESServerCertificate({\n                              encoded_key:\n                                kesServerCertificate?.encoded_key || \"\",\n                              id: kesServerCertificate?.id || \"\",\n                              key: kesServerCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            });\n                            cleanValidation(\"serverCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"serverCert\"\n                          name=\"serverCert\"\n                          label=\"Cert\"\n                          value={kesServerCertificate?.cert}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      MinIO mTLS certificates (connection between MinIO and the\n                      Encryption server)\n                    </legend>\n                    {minioMTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={minioMTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(minioMTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setMinioMTLSCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: minioMTLSCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: minioMTLSCertificate?.cert || \"\",\n                              encoded_cert:\n                                minioMTLSCertificate?.encoded_cert || \"\",\n                            });\n                            cleanValidation(\"clientKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"clientKey\"\n                          name=\"clientKey\"\n                          label=\"Key\"\n                          value={minioMTLSCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setMinioMTLSCertificate({\n                              encoded_key:\n                                minioMTLSCertificate?.encoded_key || \"\",\n                              id: minioMTLSCertificate?.id || \"\",\n                              key: minioMTLSCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            });\n                            cleanValidation(\"clientCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"clientCert\"\n                          name=\"clientCert\"\n                          label=\"Cert\"\n                          value={minioMTLSCertificate?.cert}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      KMS mTLS certificates (connection between the Encryption\n                      server and the KMS)\n                    </legend>\n                    {kmsMTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={kmsMTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(kmsMTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setKmsMTLSCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: kmsMTLSCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: kmsMTLSCertificate?.cert || \"\",\n                              encoded_cert:\n                                kmsMTLSCertificate?.encoded_cert || \"\",\n                            });\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"kms_mtls_key\"\n                          name=\"kms_mtls_key\"\n                          label=\"Key\"\n                          value={kmsMTLSCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) =>\n                            setKmsMTLSCertificate({\n                              encoded_key:\n                                kmsMTLSCertificate?.encoded_key || \"\",\n                              id: kmsMTLSCertificate?.id || \"\",\n                              key: kmsMTLSCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            })\n                          }\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"kms_mtls_cert\"\n                          name=\"kms_mtls_cert\"\n                          label=\"Cert\"\n                          value={kmsMTLSCertificate?.cert || \"\"}\n                        />\n                      </Fragment>\n                    )}\n                    {kmsCACertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={kmsCACertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(kmsCACertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <FileSelector\n                        onChange={(encodedValue, fileName) =>\n                          setKmsCACertificate({\n                            encoded_key: kmsCACertificate?.encoded_key || \"\",\n                            id: kmsCACertificate?.id || \"\",\n                            key: kmsCACertificate?.key || \"\",\n                            cert: fileName || \"\",\n                            encoded_cert: encodedValue || \"\",\n                          })\n                        }\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"kms_mtls_ca\"\n                        name=\"kms_mtls_ca\"\n                        label=\"CA\"\n                        value={kmsCACertificate?.cert || \"\"}\n                      />\n                    )}\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"text\"\n                id=\"image\"\n                name=\"image\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setImage(e.target.value)\n                }\n                label=\"Image\"\n                tooltip=\"KES container image\"\n                placeholder=\"minio/kes:2023-05-02T22-48-10Z\"\n                value={image}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"number\"\n                min=\"1\"\n                id=\"replicas\"\n                name=\"replicas\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setReplicas(e.target.value)\n                }\n                label=\"Replicas\"\n                tooltip=\"Numer of KES pod replicas\"\n                value={replicas}\n                required\n                error={validationErrors[\"replicas\"] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <SectionTitle>SecurityContext for KES</SectionTitle>\n            </Grid>\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n              >\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsUser\"\n                    name=\"kes_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        runAsUser: e.target.value,\n                      });\n                    }}\n                    label=\"Run As User\"\n                    value={securityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsGroup\"\n                    name=\"kes_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        runAsGroup: e.target.value,\n                      });\n                    }}\n                    label=\"Run As Group\"\n                    value={securityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_fsGroup\"\n                    name=\"kes_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        fsGroup: e.target.value,\n                      });\n                    }}\n                    label=\"FsGroup\"\n                    value={securityContext.fsGroup!}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"kesSecurityContextRunAsNonRoot\"\n                id=\"kes_securityContext_runAsNonRoot\"\n                name=\"kes_securityContext_runAsNonRoot\"\n                checked={securityContext.runAsNonRoot}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  setSecurityContext({\n                    ...securityContext,\n                    runAsNonRoot: checked,\n                  });\n                }}\n                label={\"Do not run as Root\"}\n              />\n            </Grid>\n          </Fragment>\n        )}\n        <Grid item xs={12} sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button\n            id={\"save-encryption\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            disabled={!isFormValid}\n            onClick={() => setConfirmOpen(true)}\n            label={\"Save\"}\n          />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(TenantEncryption);\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n"],"names":["withStyles","theme","createStyles","fieldBasic","value","label","tooltip","mode","classes","onBeforeChange","readOnly","editorHeight","item","xs","sx","marginBottom","className","inputLabel","tooltipContainer","title","placement","style","maxHeight","overflow","border","language","onChange","evn","target","id","padding","fontSize","backgroundColor","fontFamily","minHeight","color","background","borderTop","display","alignItems","paddingRight","justifyContent","height","width","marginLeft","text","type","icon","variant","tooltipHelper","valueString","maxWidth","whiteSpace","textOverflow","marginTop","fileInputField","margin","flexFlow","fileInputStyles","fontWeight","textBoxContainer","paddingLeft","name","disabled","required","error","accept","useState","showFileSelector","setShowSelector","Grid","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","Tooltip","e","fileName","get","evt","callback","file","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","length","fileProcess","data","IconButton","component","onClick","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","FormHr","styled","certificateIcon","float","paddingTop","certificateInfo","certificateWrapper","userSelect","borderRadius","certificateExpiry","flexWrap","certificateDomains","certificatesList","textTransform","overflowY","certificatesListItem","borderBottom","minWidth","marginRight","opacity","certificateExpiring","certificateExpired","onDelete","certificates","domains","expiry","DateTime","now","daysToExpiry","daysToExpiryHuman","certificateExpiration","durationToExpiry","diff","as","minus","Duration","days","shiftTo","toHuman","listStyle","maximumFractionDigits","minutes","gutterBottom","toFormat","map","dom","index","primary","PolicyItem","_ref","_ref$items","items","_ref$title","_jsxs","Fragment","children","_jsx","gap","iTxt","_ref2","_ref2$policies","policies","fmtPolicies","arguments","undefined","policyNames","Object","keys","polName","policyConfig","identities","paths","allow","deny","getPolicyData","Box","withBorders","pConf","borderLeft","borderRight","_objectSpread","tenantDetailsStyles","spacingUtils","containerForHeader","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","warningBlock","_vaultConfiguration$a9","_vaultConfiguration$a10","_vaultConfiguration$a11","_vaultConfiguration$a12","_vaultConfiguration$s4","_azureConfiguration$k15","_azureConfiguration$k17","_azureConfiguration$k18","_azureConfiguration$k20","_azureConfiguration$k21","_azureConfiguration$k23","_azureConfiguration$k24","_gcpConfiguration$sec11","_gcpConfiguration$sec12","_gcpConfiguration$sec13","_gcpConfiguration$sec14","_awsConfiguration$sec16","_awsConfiguration$sec17","_awsConfiguration$sec18","_awsConfiguration$sec20","_awsConfiguration$sec21","_awsConfiguration$sec23","_awsConfiguration$sec24","_awsConfiguration$sec26","_awsConfiguration$sec27","_gemaltoConfiguration17","_gemaltoConfiguration19","_gemaltoConfiguration20","_gemaltoConfiguration22","_gemaltoConfiguration23","_gemaltoConfiguration25","_gemaltoConfiguration26","dispatch","useAppDispatch","tenant","useSelector","state","tenants","tenantInfo","_useState","_useState2","_slicedToArray","editRawConfiguration","setEditRawConfiguration","_useState3","_useState4","encryptionRawConfiguration","setEncryptionRawConfiguration","_useState5","_useState6","encryptionEnabled","setEncryptionEnabled","_useState7","_useState8","encryptionType","setEncryptionType","_useState9","_useState10","replicas","setReplicas","_useState11","_useState12","image","setImage","_useState13","_useState14","refreshEncryptionInfo","setRefreshEncryptionInfo","_useState15","fsGroup","fsGroupChangePolicy","runAsGroup","runAsNonRoot","runAsUser","_useState16","securityContext","setSecurityContext","_useState17","_useState18","setPolicies","_useState19","_useState20","vaultConfiguration","setVaultConfiguration","_useState21","_useState22","awsConfiguration","setAWSConfiguration","_useState23","_useState24","gemaltoConfiguration","setGemaltoConfiguration","_useState25","_useState26","azureConfiguration","setAzureConfiguration","_useState27","_useState28","gcpConfiguration","setGCPConfiguration","_useState29","_useState30","enabledCustomCertificates","setEnabledCustomCertificates","_useState31","_useState32","updatingEncryption","setUpdatingEncryption","_useState33","_useState34","kesServerTLSCertificateSecret","setKesServerTLSCertificateSecret","_useState35","_useState36","minioMTLSCertificateSecret","setMinioMTLSCertificateSecret","_useState37","_useState38","minioMTLSCertificate","setMinioMTLSCertificate","_useState39","_useState40","certificatesToBeRemoved","setCertificatesToBeRemoved","_useState41","_useState42","showVaultAppRoleID","setShowVaultAppRoleID","_useState43","_useState44","isFormValid","setIsFormValid","_useState45","_useState46","showVaultAppRoleSecret","setShowVaultAppRoleSecret","_useState47","_useState48","kmsMTLSCertificateSecret","setKmsMTLSCertificateSecret","_useState49","_useState50","kmsCACertificateSecret","setKMSCACertificateSecret","_useState51","_useState52","kmsMTLSCertificate","setKmsMTLSCertificate","_useState53","_useState54","kesServerCertificate","setKESServerCertificate","_useState55","_useState56","kmsCACertificate","setKmsCACertificate","_useState57","_useState58","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","_useState59","_useState60","confirmOpen","setConfirmOpen","useEffect","encryptionValidation","_vaultConfiguration$a","_vaultConfiguration$a2","_vaultConfiguration$s","_vaultConfiguration$s2","_vaultConfiguration$a3","_vaultConfiguration$a4","_awsConfiguration$sec","_awsConfiguration$sec2","_awsConfiguration$sec3","_awsConfiguration$sec4","_awsConfiguration$sec5","_awsConfiguration$sec6","_gemaltoConfiguration","_gemaltoConfiguration2","_gemaltoConfiguration3","_gemaltoConfiguration4","_gemaltoConfiguration5","_gemaltoConfiguration6","_gemaltoConfiguration7","_gemaltoConfiguration8","_gemaltoConfiguration9","_azureConfiguration$k","_azureConfiguration$k2","_azureConfiguration$k3","_azureConfiguration$k4","_azureConfiguration$k5","_azureConfiguration$k6","_azureConfiguration$k7","fieldKey","customValidation","parseInt","customValidationMessage","concat","_toConsumableArray","encoded_key","encoded_cert","endpoint","approle","secret","status","ping","retry","secretsmanager","region","credentials","accesskey","secretkey","keysecure","token","domain","keyvault","tenant_id","client_id","client_secret","commonVal","commonFormValidation","fetchEncryptionInfo","namespace","api","then","resp","raw","vault","aws","gemalto","gcp","azure","server_tls","minio_mtls","kms_mtls","crt","ca","catch","err","console","removeCertificate","React","ConfirmDialog","isOpen","confirmText","cancelText","onClose","onConfirm","_gemaltoConfiguration10","_gemaltoConfiguration11","_gemaltoConfiguration12","_gemaltoConfiguration13","_gemaltoConfiguration14","_gemaltoConfiguration15","_gemaltoConfiguration16","_awsConfiguration$sec7","_awsConfiguration$sec8","_awsConfiguration$sec9","_awsConfiguration$sec10","_awsConfiguration$sec11","_awsConfiguration$sec12","_awsConfiguration$sec13","_awsConfiguration$sec14","_awsConfiguration$sec15","_azureConfiguration$k8","_azureConfiguration$k9","_azureConfiguration$k10","_azureConfiguration$k11","_azureConfiguration$k12","_azureConfiguration$k13","_azureConfiguration$k14","_gcpConfiguration$sec","_gcpConfiguration$sec2","_gcpConfiguration$sec3","_gcpConfiguration$sec4","_gcpConfiguration$sec5","_gcpConfiguration$sec6","_gcpConfiguration$sec7","_gcpConfiguration$sec8","_gcpConfiguration$sec9","_gcpConfiguration$sec10","_vaultConfiguration$a5","_vaultConfiguration$a6","_vaultConfiguration$a7","_vaultConfiguration$a8","_vaultConfiguration$s3","insertEncrypt","kmskey","secretmanager","project_id","client_email","private_key_id","private_key","engine","prefix","encryptionServerKeyPair","encryptionClientKeyPair","encryptionKMSCertificates","key","kmsMTLSKeyPair","kmsCAInsert","dataSend","secretsToBeDeleted","setErrorSnackMessage","confirmationContent","DialogContentText","WarnIcon","container","spacing","SectionTitle","textAlign","FormSwitchWrapper","indicatorLabels","checked","description","Tabs","newValue","indicatorColor","textColor","scrollButtons","Tab","CodeMirrorWrapper","editor","KMSPolicyInfo","encryptionTypeOptions","RadioGroupSelector","currentSelection","selectorOptions","InputBoxWrapper","fieldGroup","descriptionText","formFieldRow","overlayIcon","VisibilityOffIcon","RemoveRedEyeIcon","overlayAction","min","_azureConfiguration$k16","_azureConfiguration$k19","_azureConfiguration$k22","_awsConfiguration$sec19","_awsConfiguration$sec22","_awsConfiguration$sec25","_gemaltoConfiguration18","_gemaltoConfiguration21","_gemaltoConfiguration24","TLSCertificate","FileSelector","encodedValue","cert","placeholder","multiContainer","responsiveContainer","rightSpacer","Button","errorBlock","palette","main","withBreak"],"sourceRoot":""}