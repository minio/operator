{"version":3,"file":"static/js/332.577d2d47.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/common/styleLibrary.ts","screens/Console/Common/TLSCertificate/TLSCertificate.tsx","screens/Console/Tenants/HelpBox/TLSHelpBox.tsx","screens/Console/Tenants/securityContextSelector.tsx","screens/Console/Tenants/TenantDetails/TenantSecurity.tsx"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// This object contains variables that will be used across form components.\n\nexport const actionsTray = {\n  label: {\n    color: \"#07193E\",\n    fontSize: 13,\n    alignSelf: \"center\" as const,\n    whiteSpace: \"nowrap\" as const,\n    \"&:not(:first-of-type)\": {\n      marginLeft: 10,\n    },\n  },\n  actionsTray: {\n    display: \"flex\" as const,\n    justifyContent: \"space-between\" as const,\n    marginBottom: \"1rem\",\n    alignItems: \"center\",\n    \"& button\": {\n      flexGrow: 0,\n      marginLeft: 8,\n    },\n  },\n};\n\nexport const modalStyleUtils: any = {\n  modalButtonBar: {\n    marginTop: 15,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n\n    \"& button\": {\n      marginRight: 10,\n    },\n    \"& button:last-child\": {\n      marginRight: 0,\n    },\n  },\n  modalFormScrollable: {\n    maxHeight: \"calc(100vh - 300px)\",\n    overflowY: \"auto\",\n    paddingTop: 10,\n  },\n};\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport {\n  AlertCloseIcon,\n  Box,\n  CertificateIcon,\n  IconButton,\n  TimeIcon,\n  LanguageIcon,\n  EventBusyIcon,\n} from \"mds\";\nimport { DateTime, Duration } from \"luxon\";\nimport styled from \"styled-components\";\nimport get from \"lodash/get\";\nimport { ICertificateInfo } from \"../../Tenants/types\";\n\nconst CertificateContainer = styled.div(({ theme }) => ({\n  position: \"relative\",\n  margin: 0,\n  userSelect: \"none\",\n  appearance: \"none\",\n  maxWidth: \"100%\",\n  fontFamily: \"'Inter', sans-serif\",\n  fontSize: 13,\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  gap: 6,\n  border: `1px solid ${get(theme, \"borderColor\", \"#E2E2E2\")}`,\n  borderRadius: 3,\n  padding: \"5px 10px\",\n  \"& .certificateName\": {\n    display: \"flex\",\n    alignItems: \"center\",\n    gap: 5,\n    fontWeight: \"bold\",\n    color: get(theme, \"signalColors.main\", \"#07193E\"),\n  },\n  \"& .deleteTagButton\": {\n    backgroundColor: \"transparent\",\n    border: 0,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 0,\n    cursor: \"pointer\",\n    opacity: 0.6,\n    \"&:hover\": {\n      opacity: 1,\n    },\n    \"& svg\": {\n      fill: get(theme, `tag.grey.background`, \"#07193E\"),\n      width: 10,\n      height: 10,\n      minWidth: 10,\n      minHeight: 10,\n    },\n  },\n  \"& .certificateContainer\": {\n    margin: \"5px 10px\",\n  },\n  \"& .certificateExpiry\": {\n    color: get(theme, \"secondaryText\", \"#5B5C5C\"),\n    display: \"flex\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n    marginBottom: 5,\n    \"& .label\": {\n      fontWeight: \"bold\",\n    },\n  },\n  \"& .certificateDomains\": {\n    color: get(theme, \"secondaryText\", \"#5B5C5C\"),\n    \"& .label\": {\n      fontWeight: \"bold\",\n    },\n  },\n  \"& .certificatesList\": {\n    border: `1px solid ${get(theme, \"borderColor\", \"#E2E2E2\")}`,\n    borderRadius: 4,\n    color: get(theme, \"secondaryText\", \"#5B5C5C\"),\n    textTransform: \"lowercase\",\n    overflowY: \"scroll\",\n    maxHeight: 145,\n    marginTop: 3,\n    marginBottom: 5,\n    padding: 0,\n    \"& li\": {\n      listStyle: \"none\",\n      padding: \"5px 10px\",\n      margin: 0,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"&:before\": {\n        content: \"' '\",\n      },\n    },\n  },\n  \"& .certificatesListItem\": {\n    padding: \"0px 16px\",\n    borderBottom: `1px solid ${get(theme, \"borderColor\", \"#E2E2E2\")}`,\n    \"& div\": {\n      minWidth: 0,\n    },\n    \"& svg\": {\n      fontSize: 12,\n      marginRight: 10,\n      opacity: 0.5,\n    },\n    \"& span\": {\n      fontSize: 12,\n    },\n  },\n  \"& .certificateExpiring\": {\n    color: get(theme, \"signalColors.warning\", \"#FFBD62\"),\n    \"& .label\": {\n      fontWeight: \"bold\",\n    },\n  },\n  \"& .certificateExpired\": {\n    color: get(theme, \"signalColors.danger\", \"#C51B3F\"),\n    \"& .label\": {\n      fontWeight: \"bold\",\n    },\n  },\n  \"& .closeIcon\": {\n    transform: \"scale(0.8)\",\n  },\n}));\n\ninterface ITLSCertificate {\n  certificateInfo: ICertificateInfo;\n  onDelete: any;\n}\n\nconst TLSCertificate = ({\n  certificateInfo,\n  onDelete = () => {},\n}: ITLSCertificate) => {\n  const certificates = certificateInfo.domains || [];\n\n  const expiry = DateTime.fromISO(certificateInfo.expiry);\n  const now = DateTime.utc();\n  // Expose error on Tenant if certificate is near expiration or expired\n  let daysToExpiry: number = 0;\n  let daysToExpiryHuman: string = \"\";\n  let certificateExpiration: string = \"\";\n  if (expiry) {\n    let durationToExpiry = expiry.diff(now);\n    daysToExpiry = durationToExpiry.as(\"days\");\n    daysToExpiryHuman = durationToExpiry\n      .minus(Duration.fromObject({ days: 1 }))\n      .shiftTo(\"days\")\n      .toHuman({ listStyle: \"long\", maximumFractionDigits: 0 });\n    if (daysToExpiry >= 10 && daysToExpiry < 30) {\n      certificateExpiration = \"certificateExpiring\";\n    }\n    if (daysToExpiry < 10) {\n      certificateExpiration = \"certificateExpired\";\n      if (daysToExpiry < 2) {\n        daysToExpiryHuman = durationToExpiry\n          .minus(Duration.fromObject({ minutes: 1 }))\n          .shiftTo(\"hours\", \"minutes\")\n          .toHuman({ listStyle: \"long\", maximumFractionDigits: 0 });\n        if (durationToExpiry.as(\"minutes\") <= 1) {\n          daysToExpiryHuman = \"EXPIRED\";\n        }\n      }\n    }\n  }\n\n  return (\n    <CertificateContainer>\n      <Box>\n        <Box className={\"certificateName\"}>\n          <CertificateIcon />\n          <span>{certificateInfo.name}</span>\n        </Box>\n        <Box className={\"certificateContainer\"}>\n          <Box className={\"certificateExpiry\"}>\n            <EventBusyIcon color=\"inherit\" fontSize=\"small\" />\n            &nbsp;\n            <span className={\"label\"}>Expiry:&nbsp;</span>\n            <span>{expiry.toFormat(\"yyyy/MM/dd\")}</span>\n          </Box>\n          <Box className={\"certificateExpiry\"}>\n            <TimeIcon />\n            &nbsp;\n            <span className={\"label\"}>Expires in:&nbsp;</span>\n            <span className={certificateExpiration}>{daysToExpiryHuman}</span>\n          </Box>\n          <hr style={{ marginBottom: 12 }} />\n          <Box className={\"certificateDomains\"}>\n            <span className=\"label\">{`${certificates.length} Domain (s):`}</span>\n          </Box>\n          <ul className={\"certificatesList\"}>\n            {certificates.map((dom, index) => (\n              <li key={`${dom}-${index}`} className={\"certificatesListItem\"}>\n                <LanguageIcon />\n                <span>{dom}</span>\n              </li>\n            ))}\n          </ul>\n        </Box>\n      </Box>\n      <IconButton size={\"small\"} onClick={onDelete} className={\"closeIcon\"}>\n        <AlertCloseIcon />\n      </IconButton>\n    </CertificateContainer>\n  );\n};\n\nexport default TLSCertificate;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { CertificateIcon, Box, breakPoints } from \"mds\";\nimport { useParams } from \"react-router-dom\";\nimport { AppState } from \"../../../../store\";\n\nconst FeatureItem = ({\n  icon,\n  description,\n}: {\n  icon: any;\n  description: string;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        \"& .min-icon\": {\n          marginRight: \"10px\",\n          height: \"23px\",\n          width: \"23px\",\n          marginBottom: \"10px\",\n        },\n      }}\n    >\n      {icon}{\" \"}\n      <Box className=\"muted\" sx={{ fontSize: \"14px\", fontStyle: \"italic\" }}>\n        {description}\n      </Box>\n    </Box>\n  );\n};\nconst TLSHelpBox = () => {\n  const params = useParams();\n  const tenantNameParam = params.tenantName || \"\";\n  const tenantNamespaceParam = params.tenantNamespace || \"\";\n  const namespace = useSelector((state: AppState) => {\n    let defaultNamespace = \"<namespace>\";\n    if (tenantNamespaceParam !== \"\") {\n      return tenantNamespaceParam;\n    }\n    if (state.createTenant.fields.nameTenant.namespace !== \"\") {\n      return state.createTenant.fields.nameTenant.namespace;\n    }\n    return defaultNamespace;\n  });\n\n  const tenantName = useSelector((state: AppState) => {\n    let defaultTenantName = \"<tenant-name>\";\n    if (tenantNameParam !== \"\") {\n      return tenantNameParam;\n    }\n\n    if (state.createTenant.fields.nameTenant.tenantName !== \"\") {\n      return state.createTenant.fields.nameTenant.tenantName;\n    }\n    return defaultTenantName;\n  });\n\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n        [`@media (max-width: ${breakPoints.sm}px)`]: {\n          marginTop: 0,\n        },\n      }}\n    >\n      <Box\n        sx={{\n          display: \"flex\",\n          flexFlow: \"column\",\n        }}\n      >\n        <FeatureItem\n          icon={<CertificateIcon />}\n          description={`TLS Certificates Warning`}\n        />\n        <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n          Automatic certificate generation is not enabled.\n          <br />\n          <br />\n          If you wish to continue only with <b>custom certificates</b> make sure\n          they are valid for the following internode hostnames, i.e.:\n          <br />\n          <br />\n          <Box\n            sx={{ fontSize: \"14px\", fontStyle: \"italic\" }}\n            className={\"muted\"}\n          >\n            minio.{namespace}\n            <br />\n            minio.{namespace}.svc\n            <br />\n            minio.{namespace}.svc.&#x3C;cluster domain&#x3E;\n            <br />\n            *.{tenantName}-hl.{namespace}.svc.&#x3C;cluster domain&#x3E;\n            <br />\n            *.{namespace}.svc.&#x3C;cluster domain&#x3E;\n          </Box>\n          <br />\n          Replace <em>&#x3C;tenant-name&#x3E;</em>,{\" \"}\n          <em>&#x3C;namespace&#x3E;</em> and\n          <em>&#x3C;cluster domain&#x3E;</em> with the actual values for your\n          MinIO tenant.\n          <br />\n          <br />\n          You can learn more at our{\" \"}\n          <a\n            href=\"https://min.io/docs/minio/kubernetes/upstream/operations/network-encryption.html?ref=op#id5\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            documentation\n          </a>\n          .\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default TLSHelpBox;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { Box, Grid, InputBox, Select, Switch } from \"mds\";\nimport { useDispatch } from \"react-redux\";\nimport { fsGroupChangePolicyType } from \"./types\";\n\ninterface IEditSecurityContextProps {\n  runAsUser: string;\n  runAsGroup: string;\n  fsGroup: string;\n  fsGroupChangePolicy: fsGroupChangePolicyType;\n  runAsNonRoot: boolean;\n  setRunAsUser: any;\n  setRunAsGroup: any;\n  setFSGroup: any;\n  setRunAsNonRoot: any;\n  setFSGroupChangePolicy: any;\n}\n\nconst SecurityContextSelector = ({\n  runAsGroup,\n  runAsUser,\n  fsGroup,\n  fsGroupChangePolicy,\n  runAsNonRoot,\n  setRunAsUser,\n  setRunAsGroup,\n  setFSGroup,\n  setRunAsNonRoot,\n  setFSGroupChangePolicy,\n}: IEditSecurityContextProps) => {\n  const dispatch = useDispatch();\n  return (\n    <Fragment>\n      <fieldset className={`inputItem`}>\n        <legend>Security Context</legend>\n        <Box\n          sx={{\n            \"& .multiContainerStackNarrow\": {\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"flex-start\",\n              gap: \"8px\",\n              \"@media (max-width: 750px)\": {\n                flexFlow: \"column\",\n                flexDirection: \"column\",\n              },\n            },\n            \"& .configSectionItem\": {\n              marginRight: 15,\n              marginBottom: 10,\n            },\n          }}\n        >\n          <Grid item xs={12}>\n            <Box className={`multiContainerStackNarrow`}>\n              <Box className={\"configSectionItem\"}>\n                <InputBox\n                  type=\"number\"\n                  id=\"securityContext_runAsUser\"\n                  name=\"securityContext_runAsUser\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    dispatch(setRunAsUser(e.target.value));\n                  }}\n                  label=\"Run As User\"\n                  value={runAsUser}\n                  required\n                  min=\"0\"\n                />\n              </Box>\n              <Box className={\"configSectionItem\"}>\n                <InputBox\n                  type=\"number\"\n                  id=\"securityContext_runAsGroup\"\n                  name=\"securityContext_runAsGroup\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    dispatch(setRunAsGroup(e.target.value));\n                  }}\n                  label=\"Run As Group\"\n                  value={runAsGroup}\n                  required\n                  min=\"0\"\n                />\n              </Box>\n            </Box>\n          </Grid>\n          <Grid item xs={12}>\n            <Box className={`multiContainerStackNarrow `}>\n              <Box className={\"configSectionItem\"}>\n                <InputBox\n                  type=\"number\"\n                  id=\"securityContext_fsGroup\"\n                  name=\"securityContext_fsGroup\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    dispatch(setFSGroup(e.target.value));\n                  }}\n                  label=\"FsGroup\"\n                  value={fsGroup}\n                  required\n                  min=\"0\"\n                />\n              </Box>\n              <Box className={\"configSectionItem\"}>\n                <Select\n                  label=\"FsGroupChangePolicy\"\n                  id=\"securityContext_fsGroupChangePolicy\"\n                  name=\"securityContext_fsGroupChangePolicy\"\n                  onChange={(value) => {\n                    dispatch(setFSGroupChangePolicy(value));\n                  }}\n                  value={fsGroupChangePolicy}\n                  options={[\n                    {\n                      label: \"Always\",\n                      value: \"Always\",\n                    },\n                    {\n                      label: \"OnRootMismatch\",\n                      value: \"OnRootMismatch\",\n                    },\n                  ]}\n                />\n              </Box>\n            </Box>\n          </Grid>\n          <Grid item xs={12}>\n            <Switch\n              value=\"SecurityContextRunAsNonRoot\"\n              id=\"securityContext_runAsNonRoot\"\n              name=\"securityContext_runAsNonRoot\"\n              checked={runAsNonRoot}\n              onChange={() => {\n                dispatch(setRunAsNonRoot(!runAsNonRoot));\n              }}\n              label={\"Do not run as Root\"}\n            />\n          </Grid>\n        </Box>\n      </fieldset>\n    </Fragment>\n  );\n};\n\nexport default SecurityContextSelector;\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  AddIcon,\n  Box,\n  Button,\n  ConfirmModalIcon,\n  FileSelector,\n  FormLayout,\n  Grid,\n  IconButton,\n  Loader,\n  RemoveIcon,\n  SectionTitle,\n  Switch,\n} from \"mds\";\nimport {\n  fsGroupChangePolicyType,\n  ICertificateInfo,\n  ITenantSecurityResponse,\n} from \"../types\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\n\nimport { KeyPair } from \"../ListTenants/utils\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport api from \"../../../../common/api\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport TLSCertificate from \"../../Common/TLSCertificate/TLSCertificate\";\nimport SecurityContextSelector from \"../securityContextSelector\";\nimport {\n  setFSGroup,\n  setFSGroupChangePolicy,\n  setRunAsGroup,\n  setRunAsNonRoot,\n  setRunAsUser,\n} from \"../tenantSecurityContextSlice\";\nimport TLSHelpBox from \"../HelpBox/TLSHelpBox\";\n\nconst TenantSecurity = () => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant,\n  );\n\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [enableTLS, setEnableTLS] = useState<boolean>(false);\n  const [enableAutoCert, setEnableAutoCert] = useState<boolean>(false);\n  const [enableCustomCerts, setEnableCustomCerts] = useState<boolean>(false);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  // MinIO certificates\n  const [minioServerCertificates, setMinioServerCertificates] = useState<\n    KeyPair[]\n  >([\n    {\n      id: Date.now().toString(),\n      key: \"\",\n      cert: \"\",\n      encoded_key: \"\",\n      encoded_cert: \"\",\n    },\n  ]);\n  const [minioClientCertificates, setMinioClientCertificates] = useState<\n    KeyPair[]\n  >([\n    {\n      id: Date.now().toString(),\n      key: \"\",\n      cert: \"\",\n      encoded_key: \"\",\n      encoded_cert: \"\",\n    },\n  ]);\n  const [minioCaCertificates, setMinioCaCertificates] = useState<KeyPair[]>([\n    {\n      id: Date.now().toString(),\n      key: \"\",\n      cert: \"\",\n      encoded_key: \"\",\n      encoded_cert: \"\",\n    },\n  ]);\n  const [minioServerCertificateSecrets, setMinioServerCertificateSecrets] =\n    useState<ICertificateInfo[]>([]);\n  const [minioClientCertificateSecrets, setMinioClientCertificateSecrets] =\n    useState<ICertificateInfo[]>([]);\n  const [minioTLSCaCertificateSecrets, setMinioTLSCaCertificateSecrets] =\n    useState<ICertificateInfo[]>([]);\n\n  const runAsGroup = useSelector(\n    (state: AppState) => state.editTenantSecurityContext.runAsGroup,\n  );\n  const runAsUser = useSelector(\n    (state: AppState) => state.editTenantSecurityContext.runAsUser,\n  );\n  const fsGroup = useSelector(\n    (state: AppState) => state.editTenantSecurityContext.fsGroup,\n  );\n  const runAsNonRoot = useSelector(\n    (state: AppState) => state.editTenantSecurityContext.runAsNonRoot,\n  );\n  const fsGroupChangePolicy = useSelector(\n    (state: AppState) => state.editTenantSecurityContext.fsGroupChangePolicy,\n  );\n\n  const getTenantSecurityInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/security`,\n      )\n      .then((res: ITenantSecurityResponse) => {\n        setEnableAutoCert(res.autoCert);\n        setEnableTLS(res.autoCert);\n        if (\n          res.customCertificates.minio ||\n          res.customCertificates.client ||\n          res.customCertificates.minioCAs\n        ) {\n          setEnableCustomCerts(true);\n          setEnableTLS(true);\n        }\n        setMinioServerCertificateSecrets(res.customCertificates.minio || []);\n        setMinioClientCertificateSecrets(res.customCertificates.client || []);\n        setMinioTLSCaCertificateSecrets(res.customCertificates.minioCAs || []);\n        dispatch(setRunAsGroup(res.securityContext.runAsGroup));\n        dispatch(setRunAsUser(res.securityContext.runAsUser));\n        dispatch(setFSGroup(res.securityContext.fsGroup!));\n        dispatch(setRunAsNonRoot(res.securityContext.runAsNonRoot));\n        dispatch(\n          setFSGroupChangePolicy(\n            res.securityContext.fsGroupChangePolicy as fsGroupChangePolicyType,\n          ),\n        );\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n      });\n  }, [tenant, dispatch]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantSecurityInfo();\n    }\n  }, [tenant, getTenantSecurityInfo]);\n\n  const updateTenantSecurity = () => {\n    setIsSending(true);\n    let payload = {\n      autoCert: enableAutoCert,\n      customCertificates: {},\n      securityContext: {\n        runAsGroup: runAsGroup,\n        runAsUser: runAsUser,\n        runAsNonRoot: runAsNonRoot,\n        fsGroup: fsGroup,\n        fsGroupChangePolicy: fsGroupChangePolicy,\n      },\n    };\n    if (enableCustomCerts) {\n      payload[\"customCertificates\"] = {\n        secretsToBeDeleted: certificatesToBeRemoved,\n        minioServerCertificates: minioServerCertificates\n          .map((keyPair: KeyPair) => ({\n            crt: keyPair.encoded_cert,\n            key: keyPair.encoded_key,\n          }))\n          .filter((cert: any) => cert.crt && cert.key),\n        minioClientCertificates: minioClientCertificates\n          .map((keyPair: KeyPair) => ({\n            crt: keyPair.encoded_cert,\n            key: keyPair.encoded_key,\n          }))\n          .filter((cert: any) => cert.crt && cert.key),\n        minioCAsCertificates: minioCaCertificates\n          .map((keyPair: KeyPair) => keyPair.encoded_cert)\n          .filter((cert: any) => cert),\n      };\n    } else {\n      payload[\"customCertificates\"] = {\n        secretsToBeDeleted: [\n          ...minioServerCertificateSecrets.map((cert) => cert.name),\n          ...minioClientCertificateSecrets.map((cert) => cert.name),\n          ...minioTLSCaCertificateSecrets.map((cert) => cert.name),\n        ],\n        minioServerCertificates: [],\n        minioClientCertificates: [],\n        minioCAsCertificates: [],\n      };\n    }\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/security`,\n        payload,\n      )\n      .then(() => {\n        setIsSending(false);\n        // Close confirmation modal\n        setDialogOpen(false);\n        // Refresh Information and reset forms\n        setMinioServerCertificates([\n          {\n            cert: \"\",\n            encoded_cert: \"\",\n            encoded_key: \"\",\n            id: Date.now().toString(),\n            key: \"\",\n          },\n        ]);\n        setMinioClientCertificates([\n          {\n            cert: \"\",\n            encoded_cert: \"\",\n            encoded_key: \"\",\n            id: Date.now().toString(),\n            key: \"\",\n          },\n        ]);\n        setMinioCaCertificates([\n          {\n            cert: \"\",\n            encoded_cert: \"\",\n            encoded_key: \"\",\n            id: Date.now().toString(),\n            key: \"\",\n          },\n        ]);\n        getTenantSecurityInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    // TLS certificate secrets can be referenced MinIO, Console or KES, we need to remove the secret from all list and update\n    // the arrays\n    // Add certificate to the global list of secrets to be removed\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n\n    // Update MinIO server TLS certificate secrets\n    const updatedMinioServerCertificateSecrets =\n      minioServerCertificateSecrets.filter(\n        (certificateSecret) => certificateSecret.name !== certificateInfo.name,\n      );\n    // Update MinIO client TLS certificate secrets\n    const updatedMinioClientCertificateSecrets =\n      minioClientCertificateSecrets.filter(\n        (certificateSecret) => certificateSecret.name !== certificateInfo.name,\n      );\n    const updatedMinIOTLSCaCertificateSecrets =\n      minioTLSCaCertificateSecrets.filter(\n        (certificateSecret) => certificateSecret.name !== certificateInfo.name,\n      );\n    setMinioServerCertificateSecrets(updatedMinioServerCertificateSecrets);\n    setMinioClientCertificateSecrets(updatedMinioClientCertificateSecrets);\n    setMinioTLSCaCertificateSecrets(updatedMinIOTLSCaCertificateSecrets);\n  };\n\n  const addFileToKeyPair = (\n    type: string,\n    id: string,\n    key: string,\n    fileName: string,\n    value: string,\n  ) => {\n    let certificates = minioServerCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioServerCertificates;\n        updateCertificates = setMinioServerCertificates;\n        break;\n      }\n      case \"client\": {\n        certificates = minioClientCertificates;\n        updateCertificates = setMinioClientCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n\n    const NCertList = certificates.map((item: KeyPair) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          [key]: fileName,\n          [`encoded_${key}`]: value,\n        };\n      }\n      return item;\n    });\n    updateCertificates(NCertList);\n  };\n\n  const deleteKeyPair = (type: string, id: string) => {\n    let certificates = minioServerCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioServerCertificates;\n        updateCertificates = setMinioServerCertificates;\n        break;\n      }\n      case \"client\": {\n        certificates = minioClientCertificates;\n        updateCertificates = setMinioClientCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n\n    if (certificates.length > 1) {\n      const cleanCertsList = certificates.filter(\n        (item: KeyPair) => item.id !== id,\n      );\n      updateCertificates(cleanCertsList);\n    }\n  };\n\n  const addKeyPair = (type: string) => {\n    let certificates = minioServerCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioServerCertificates;\n        updateCertificates = setMinioServerCertificates;\n        break;\n      }\n      case \"client\": {\n        certificates = minioClientCertificates;\n        updateCertificates = setMinioClientCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n    const updatedCertificates = [\n      ...certificates,\n      {\n        id: Date.now().toString(),\n        key: \"\",\n        cert: \"\",\n        encoded_key: \"\",\n        encoded_cert: \"\",\n      },\n    ];\n    updateCertificates(updatedCertificates);\n  };\n\n  return (\n    <React.Fragment>\n      <ConfirmDialog\n        title={\"Save and Restart\"}\n        confirmText={\"Restart\"}\n        cancelText=\"Cancel\"\n        titleIcon={<ConfirmModalIcon />}\n        isLoading={isSending}\n        onClose={() => setDialogOpen(false)}\n        isOpen={dialogOpen}\n        onConfirm={updateTenantSecurity}\n        confirmationContent={\n          <Fragment>\n            Are you sure you want to save the changes and restart the service?\n          </Fragment>\n        }\n      />\n      {loadingTenant ? (\n        <Box\n          sx={{\n            textAlign: \"center\",\n          }}\n        >\n          <Loader />\n        </Box>\n      ) : (\n        <Fragment>\n          <Box>\n            <SectionTitle separator sx={{ marginBottom: 15 }}>\n              Security\n            </SectionTitle>\n          </Box>\n          <FormLayout\n            withBorders={false}\n            containerPadding={false}\n            sx={{\n              \"& .minioCertificateRows\": {\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"flex-start\",\n                padding: 5,\n                \"& .inputItem\": {\n                  marginBottom: 0,\n                },\n                \"&:last-child\": {\n                  borderBottom: 0,\n                },\n                \"@media (max-width: 900px)\": {\n                  flex: 1,\n                },\n              },\n              \"& .overlayAction\": {\n                marginLeft: 10,\n              },\n              \"& .rowActions\": {\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n                \"@media (max-width: 900px)\": {\n                  flex: 1,\n                },\n              },\n            }}\n          >\n            <Switch\n              value=\"enableTLS\"\n              id=\"enableTLS\"\n              name=\"enableTLS\"\n              checked={enableTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                setEnableTLS(checked);\n              }}\n              label={\"TLS\"}\n              description={\n                \"Securing all the traffic using TLS. This is required for Encryption Configuration\"\n              }\n            />\n            {enableTLS && (\n              <Fragment>\n                <Switch\n                  value=\"enableAutoCert\"\n                  id=\"enableAutoCert\"\n                  name=\"enableAutoCert\"\n                  checked={enableAutoCert}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setEnableAutoCert(checked);\n                  }}\n                  label={\"AutoCert\"}\n                  description={\n                    \"The internode certificates will be generated and managed by MinIO Operator\"\n                  }\n                />\n                <Switch\n                  value=\"enableCustomCerts\"\n                  id=\"enableCustomCerts\"\n                  name=\"enableCustomCerts\"\n                  checked={enableCustomCerts}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setEnableCustomCerts(checked);\n                  }}\n                  label={\"Custom Certificates\"}\n                  description={\"Certificates used to terminated TLS at MinIO\"}\n                />\n\n                {enableCustomCerts && (\n                  <Fragment>\n                    {!enableAutoCert && (\n                      <Grid item xs={12}>\n                        <TLSHelpBox />\n                      </Grid>\n                    )}\n                    <Grid item xs={12} className={\"inputItem\"}>\n                      <h5>MinIO Server Certificates</h5>\n                    </Grid>\n                    <Grid item xs={12}>\n                      {minioServerCertificateSecrets.map(\n                        (certificateInfo: ICertificateInfo) => (\n                          <TLSCertificate\n                            certificateInfo={certificateInfo}\n                            onDelete={() => removeCertificate(certificateInfo)}\n                          />\n                        ),\n                      )}\n                    </Grid>\n                    <Grid item xs={12}>\n                      {minioServerCertificates.map((keyPair, index) => (\n                        <Grid\n                          item\n                          xs={12}\n                          key={keyPair.id}\n                          className={\"minioCertificateRows\"}\n                        >\n                          <FileSelector\n                            onChange={(event, fileName, encodedValue) => {\n                              if (encodedValue) {\n                                addFileToKeyPair(\n                                  \"minio\",\n                                  keyPair.id,\n                                  \"cert\",\n                                  fileName,\n                                  encodedValue,\n                                );\n                              }\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                            returnEncodedData\n                          />\n                          <FileSelector\n                            onChange={(event, fileName, encodedValue) => {\n                              if (encodedValue) {\n                                addFileToKeyPair(\n                                  \"minio\",\n                                  keyPair.id,\n                                  \"key\",\n                                  fileName,\n                                  encodedValue,\n                                );\n                              }\n                            }}\n                            accept=\".key,.pem\"\n                            id=\"tlsKey\"\n                            name=\"tlsKey\"\n                            label=\"Key\"\n                            value={keyPair.key}\n                            returnEncodedData\n                          />\n                          <Grid item xs={2} className={\"rowActions\"}>\n                            <div className={\"overlayAction\"}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => addKeyPair(\"minio\")}\n                                disabled={\n                                  index !== minioServerCertificates.length - 1\n                                }\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </div>\n                            <div className={\"overlayAction\"}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() =>\n                                  deleteKeyPair(\"minio\", keyPair.id)\n                                }\n                                disabled={minioServerCertificates.length <= 1}\n                              >\n                                <RemoveIcon />\n                              </IconButton>\n                            </div>\n                          </Grid>\n                        </Grid>\n                      ))}\n                    </Grid>\n\n                    <Grid item xs={12} className={\"inputItem\"}>\n                      <h5>MinIO Client Certificates</h5>\n                    </Grid>\n                    <Grid item xs={12}>\n                      {minioClientCertificateSecrets.map(\n                        (certificateInfo: ICertificateInfo) => (\n                          <TLSCertificate\n                            certificateInfo={certificateInfo}\n                            onDelete={() => removeCertificate(certificateInfo)}\n                          />\n                        ),\n                      )}\n                    </Grid>\n                    <Grid item xs={12} className={\"inputItem\"}>\n                      {minioClientCertificates.map((keyPair, index) => (\n                        <Grid\n                          item\n                          xs={12}\n                          key={keyPair.id}\n                          className={\"minioCertificateRows\"}\n                        >\n                          <FileSelector\n                            onChange={(event, fileName, encodedValue) => {\n                              if (encodedValue) {\n                                addFileToKeyPair(\n                                  \"client\",\n                                  keyPair.id,\n                                  \"cert\",\n                                  fileName,\n                                  encodedValue,\n                                );\n                              }\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                            returnEncodedData\n                          />\n                          <FileSelector\n                            onChange={(event, fileName, encodedValue) => {\n                              if (encodedValue) {\n                                addFileToKeyPair(\n                                  \"client\",\n                                  keyPair.id,\n                                  \"key\",\n                                  fileName,\n                                  encodedValue,\n                                );\n                              }\n                            }}\n                            accept=\".key,.pem\"\n                            id=\"tlsKey\"\n                            name=\"tlsKey\"\n                            label=\"Key\"\n                            value={keyPair.key}\n                            returnEncodedData\n                          />\n                          <Grid item xs={2} className={\"rowActions\"}>\n                            <div className={\"overlayAction\"}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => addKeyPair(\"client\")}\n                                disabled={\n                                  index !== minioClientCertificates.length - 1\n                                }\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </div>\n                            <div className={\"overlayAction\"}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() =>\n                                  deleteKeyPair(\"client\", keyPair.id)\n                                }\n                                disabled={minioClientCertificates.length <= 1}\n                              >\n                                <RemoveIcon />\n                              </IconButton>\n                            </div>\n                          </Grid>\n                        </Grid>\n                      ))}\n                    </Grid>\n\n                    <Grid item xs={12}>\n                      <h5>MinIO CA Certificates</h5>\n                    </Grid>\n                    <Grid item xs={12}>\n                      {minioTLSCaCertificateSecrets.map(\n                        (certificateInfo: ICertificateInfo) => (\n                          <TLSCertificate\n                            certificateInfo={certificateInfo}\n                            onDelete={() => removeCertificate(certificateInfo)}\n                          />\n                        ),\n                      )}\n                    </Grid>\n                    <Grid item xs={12}>\n                      {minioCaCertificates.map((keyPair: KeyPair, index) => (\n                        <Grid\n                          item\n                          xs={12}\n                          key={keyPair.id}\n                          className={\"minioCertificateRows\"}\n                        >\n                          <Grid item xs={10}>\n                            <FileSelector\n                              onChange={(event, fileName, encodedValue) => {\n                                if (encodedValue) {\n                                  addFileToKeyPair(\n                                    \"minioCAs\",\n                                    keyPair.id,\n                                    \"cert\",\n                                    fileName,\n                                    encodedValue,\n                                  );\n                                }\n                              }}\n                              accept=\".cer,.crt,.cert,.pem\"\n                              id=\"tlsCert\"\n                              name=\"tlsCert\"\n                              label=\"Cert\"\n                              value={keyPair.cert}\n                              returnEncodedData\n                            />\n                          </Grid>\n                          <Grid item xs={2}>\n                            <div className={\"rowActions\"}>\n                              <div className={\"overlayAction\"}>\n                                <IconButton\n                                  size={\"small\"}\n                                  onClick={() => addKeyPair(\"minioCAs\")}\n                                  disabled={\n                                    index !== minioCaCertificates.length - 1\n                                  }\n                                >\n                                  <AddIcon />\n                                </IconButton>\n                              </div>\n                              <div className={\"overlayAction\"}>\n                                <IconButton\n                                  size={\"small\"}\n                                  onClick={() =>\n                                    deleteKeyPair(\"minioCAs\", keyPair.id)\n                                  }\n                                  disabled={minioCaCertificates.length <= 1}\n                                >\n                                  <RemoveIcon />\n                                </IconButton>\n                              </div>\n                            </div>\n                          </Grid>\n                        </Grid>\n                      ))}\n                    </Grid>\n                  </Fragment>\n                )}\n              </Fragment>\n            )}\n            <Grid item xs={12} className={\"inputItem\"}>\n              <SectionTitle separator>Security Context</SectionTitle>\n            </Grid>\n            <Grid item xs={12} className={\"inputItem\"}>\n              <SecurityContextSelector\n                runAsGroup={runAsGroup}\n                runAsUser={runAsUser}\n                fsGroup={fsGroup}\n                runAsNonRoot={runAsNonRoot}\n                fsGroupChangePolicy={fsGroupChangePolicy}\n                setFSGroup={(value: string) => dispatch(setFSGroup(value))}\n                setRunAsUser={(value: string) => dispatch(setRunAsUser(value))}\n                setRunAsGroup={(value: string) =>\n                  dispatch(setRunAsGroup(value))\n                }\n                setRunAsNonRoot={(value: boolean) =>\n                  dispatch(setRunAsNonRoot(value))\n                }\n                setFSGroupChangePolicy={(value: fsGroupChangePolicyType) =>\n                  dispatch(setFSGroupChangePolicy(value))\n                }\n              />\n            </Grid>\n            <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n              <Button\n                id={\"save-security\"}\n                type=\"submit\"\n                variant=\"callAction\"\n                disabled={dialogOpen || isSending}\n                onClick={() => setDialogOpen(true)}\n                label={\"Save\"}\n              />\n            </Grid>\n          </FormLayout>\n        </Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default TenantSecurity;\n"],"names":["actionsTray","label","color","fontSize","alignSelf","whiteSpace","marginLeft","display","justifyContent","marginBottom","alignItems","flexGrow","modalStyleUtils","modalButtonBar","marginTop","marginRight","modalFormScrollable","maxHeight","overflowY","paddingTop","CertificateContainer","styled","div","_ref","theme","position","margin","userSelect","appearance","maxWidth","fontFamily","gap","border","concat","get","borderRadius","padding","fontWeight","backgroundColor","cursor","opacity","fill","width","height","minWidth","minHeight","flexWrap","textTransform","listStyle","content","borderBottom","transform","_ref2","certificateInfo","onDelete","certificates","domains","expiry","DateTime","fromISO","now","utc","daysToExpiry","daysToExpiryHuman","certificateExpiration","durationToExpiry","diff","as","minus","Duration","fromObject","days","shiftTo","toHuman","maximumFractionDigits","minutes","_jsxs","children","Box","className","_jsx","CertificateIcon","name","EventBusyIcon","toFormat","TimeIcon","style","length","map","dom","index","LanguageIcon","IconButton","size","onClick","AlertCloseIcon","FeatureItem","icon","description","sx","fontStyle","TLSHelpBox","params","useParams","tenantNameParam","tenantName","tenantNamespaceParam","tenantNamespace","namespace","useSelector","state","createTenant","fields","nameTenant","flex","flexFlow","breakPoints","sm","href","target","rel","runAsGroup","runAsUser","fsGroup","fsGroupChangePolicy","runAsNonRoot","setRunAsUser","setRunAsGroup","setFSGroup","setRunAsNonRoot","setFSGroupChangePolicy","dispatch","useDispatch","Fragment","flexDirection","Grid","item","xs","InputBox","type","id","onChange","e","value","required","min","Select","options","Switch","checked","TenantSecurity","useAppDispatch","tenant","tenants","tenantInfo","loadingTenant","isSending","setIsSending","useState","dialogOpen","setDialogOpen","enableTLS","setEnableTLS","enableAutoCert","setEnableAutoCert","enableCustomCerts","setEnableCustomCerts","certificatesToBeRemoved","setCertificatesToBeRemoved","minioServerCertificates","setMinioServerCertificates","Date","toString","key","cert","encoded_key","encoded_cert","minioClientCertificates","setMinioClientCertificates","minioCaCertificates","setMinioCaCertificates","minioServerCertificateSecrets","setMinioServerCertificateSecrets","minioClientCertificateSecrets","setMinioClientCertificateSecrets","minioTLSCaCertificateSecrets","setMinioTLSCaCertificateSecrets","editTenantSecurityContext","getTenantSecurityInfo","useCallback","api","invoke","then","res","autoCert","customCertificates","minio","client","minioCAs","securityContext","catch","err","setErrorSnackMessage","useEffect","removeCertificate","updatedMinioServerCertificateSecrets","filter","certificateSecret","updatedMinioClientCertificateSecrets","updatedMinIOTLSCaCertificateSecrets","addFileToKeyPair","fileName","updateCertificates","deleteKeyPair","addKeyPair","React","ConfirmDialog","title","confirmText","cancelText","titleIcon","ConfirmModalIcon","isLoading","onClose","isOpen","onConfirm","updateTenantSecurity","payload","secretsToBeDeleted","keyPair","crt","minioCAsCertificates","confirmationContent","textAlign","Loader","SectionTitle","separator","FormLayout","withBorders","containerPadding","TLSCertificate","FileSelector","event","encodedValue","accept","returnEncodedData","disabled","AddIcon","RemoveIcon","SecurityContextSelector","Button","variant"],"sourceRoot":""}