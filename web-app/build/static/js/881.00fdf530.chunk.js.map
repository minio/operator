{"version":3,"file":"static/js/881.00fdf530.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper.tsx","screens/Console/Tenants/TenantDetails/TenantYAML.tsx"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Box, InputLabel, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Button, CopyIcon, HelpIcon } from \"mds\";\nimport { fieldBasic } from \"../common/styleLibrary\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\nimport TooltipWrapper from \"../../TooltipWrapper/TooltipWrapper\";\n\ninterface ICodeWrapper {\n  value: string;\n  label?: string;\n  mode?: string;\n  tooltip?: string;\n  classes: any;\n  onChange?: (editor: any, data: any, value: string) => any;\n  onBeforeChange: (editor: any, data: any, value: string) => any;\n  readOnly?: boolean;\n  editorHeight?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n  });\n\nconst CodeMirrorWrapper = ({\n  value,\n  label = \"\",\n  tooltip = \"\",\n  mode = \"json\",\n  classes,\n  onBeforeChange,\n  readOnly = false,\n  editorHeight = \"250px\",\n}: ICodeWrapper) => {\n  return (\n    <React.Fragment>\n      <Grid item xs={12} sx={{ marginBottom: \"10px\" }}>\n        <InputLabel className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div className={classes.tooltip}>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n      </Grid>\n\n      <Grid\n        item\n        xs={12}\n        style={{\n          maxHeight: editorHeight,\n          overflow: \"auto\",\n          border: \"1px solid #eaeaea\",\n        }}\n      >\n        <CodeEditor\n          value={value}\n          language={mode}\n          onChange={(evn) => {\n            onBeforeChange(null, null, evn.target.value);\n          }}\n          id={\"code_wrapper\"}\n          padding={15}\n          style={{\n            fontSize: 12,\n            backgroundColor: \"#fefefe\",\n            fontFamily:\n              \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\n            minHeight: editorHeight || \"initial\",\n            color: \"#000000\",\n          }}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sx={{\n          background: \"#f7f7f7\",\n          border: \"1px solid #eaeaea\",\n          borderTop: 0,\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: \"2px\",\n            paddingRight: \"5px\",\n            justifyContent: \"flex-end\",\n            \"& button\": {\n              height: \"26px\",\n              width: \"26px\",\n              padding: \"2px\",\n              \" .min-icon\": {\n                marginLeft: \"0\",\n              },\n            },\n          }}\n        >\n          <TooltipWrapper tooltip={\"Copy to Clipboard\"}>\n            <CopyToClipboard text={value}>\n              <Button\n                type={\"button\"}\n                id={\"copy-code-mirror\"}\n                icon={<CopyIcon />}\n                color={\"primary\"}\n                variant={\"regular\"}\n              />\n            </CopyToClipboard>\n          </TooltipWrapper>\n        </Box>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(CodeMirrorWrapper);\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { LinearProgress } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button } from \"mds\";\nimport Grid from \"@mui/material/Grid\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport api from \"../../../../common/api\";\nimport {\n  fieldBasic,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport CodeMirrorWrapper from \"../../Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { getTenantAsync } from \"../thunks/tenantDetailsAsync\";\nimport SectionTitle from \"../../Common/SectionTitle\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorState: {\n      color: \"#b53b4b\",\n      fontSize: 14,\n      fontWeight: \"bold\",\n    },\n    ...modalStyleUtils,\n    ...fieldBasic,\n  });\n\ninterface ITenantYAML {\n  yaml: string;\n}\n\ninterface ITenantYAMLProps {\n  classes: any;\n}\n\nconst TenantYAML = ({ classes }: ITenantYAMLProps) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const tenant = useSelector((state: AppState) => state.tenants.currentTenant);\n  const namespace = useSelector(\n    (state: AppState) => state.tenants.currentNamespace,\n  );\n\n  const [addLoading, setAddLoading] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [tenantYaml, setTenantYaml] = useState<string>(\"\");\n  const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n  const updateTenant = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (addLoading) {\n      return;\n    }\n    setAddLoading(true);\n    setErrorMessage(\"\");\n    api\n      .invoke(\"PUT\", `/api/v1/namespaces/${namespace}/tenants/${tenant}/yaml`, {\n        yaml: tenantYaml,\n      })\n      .then((res) => {\n        setAddLoading(false);\n        dispatch(getTenantAsync());\n        setErrorMessage(\"\");\n        navigate(`/namespaces/${namespace}/tenants/${tenant}/summary`);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        const errMessage = err?.message || \"\" || err.errorMessage;\n        setErrorMessage(errMessage);\n      });\n  };\n\n  useEffect(() => {\n    if (namespace && tenant) {\n      api\n        .invoke(\"GET\", `/api/v1/namespaces/${namespace}/tenants/${tenant}/yaml`)\n        .then((res: ITenantYAML) => {\n          setLoading(false);\n          setTenantYaml(res.yaml);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n        });\n    }\n  }, [tenant, namespace, dispatch]);\n\n  useEffect(() => {}, []);\n\n  const validSave = tenantYaml.trim() !== \"\";\n\n  return (\n    <Fragment>\n      {addLoading ||\n        (loading && (\n          <Grid item xs={12}>\n            <LinearProgress />\n          </Grid>\n        ))}\n\n      {!loading && (\n        <form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n            e.preventDefault();\n            updateTenant(e);\n          }}\n        >\n          <Grid container>\n            <Grid item xs={12}>\n              <SectionTitle>Tenant Specification</SectionTitle>\n            </Grid>\n            {errorMessage ? (\n              <Grid\n                item\n                xs={12}\n                sx={{\n                  marginTop: \"5px\",\n                  marginBottom: \"2px\",\n                  border: \"1px solid #b53b4b\",\n                  borderRadius: \"2px\",\n                  padding: \"5px\",\n                }}\n              >\n                <div className={classes.errorState}>{errorMessage}</div>\n              </Grid>\n            ) : null}\n            <Grid\n              item\n              xs={12}\n              sx={errorMessage ? { border: \"1px solid #b53b4b\" } : {}}\n            >\n              <CodeMirrorWrapper\n                value={tenantYaml}\n                mode={\"yaml\"}\n                onBeforeChange={(editor, data, value) => {\n                  setTenantYaml(value);\n                }}\n                editorHeight={\"550px\"}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              style={{\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n                paddingTop: 16,\n              }}\n            >\n              <Button\n                id={\"cancel-tenant-yaml\"}\n                type=\"button\"\n                variant=\"regular\"\n                disabled={addLoading}\n                onClick={() => {\n                  navigate(\n                    `/namespaces/${namespace}/tenants/${tenant}/summary`,\n                  );\n                }}\n                label={\"Cancel\"}\n              />\n              <Button\n                id={\"save-tenant-yaml\"}\n                type=\"submit\"\n                variant=\"callAction\"\n                disabled={addLoading || !validSave}\n                style={{ marginLeft: 8 }}\n                label={\"Save\"}\n              />\n            </Grid>\n          </Grid>\n        </form>\n      )}\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(TenantYAML);\n"],"names":["withStyles","theme","createStyles","fieldBasic","_ref","value","label","tooltip","mode","classes","onBeforeChange","readOnly","editorHeight","_jsxs","React","children","_jsx","Grid","item","xs","sx","marginBottom","InputLabel","className","inputLabel","tooltipContainer","Tooltip","title","placement","HelpIcon","style","maxHeight","overflow","border","CodeEditor","language","onChange","evn","target","id","padding","fontSize","backgroundColor","fontFamily","minHeight","color","background","borderTop","Box","display","alignItems","paddingRight","justifyContent","height","width","marginLeft","TooltipWrapper","CopyToClipboard","text","Button","type","icon","CopyIcon","variant","errorState","fontWeight","modalStyleUtils","dispatch","useAppDispatch","navigate","useNavigate","tenant","useSelector","state","tenants","currentTenant","namespace","currentNamespace","addLoading","setAddLoading","useState","loading","setLoading","tenantYaml","setTenantYaml","errorMessage","setErrorMessage","useEffect","api","invoke","concat","then","res","yaml","catch","err","setModalErrorSnackMessage","validSave","trim","Fragment","LinearProgress","noValidate","autoComplete","onSubmit","e","preventDefault","getTenantAsync","errMessage","message","container","SectionTitle","marginTop","borderRadius","CodeMirrorWrapper","editor","data","paddingTop","disabled","onClick"],"sourceRoot":""}