{"version":3,"file":"static/js/21.736e7ab9.chunk.js","mappings":"yHAkBO,MAAMA,EAAc,CACzBC,MAAO,CACLC,MAAO,UACPC,SAAU,GACVC,UAAW,SACXC,WAAY,SACZ,wBAAyB,CACvBC,WAAY,KAGhBN,YAAa,CACXO,QAAS,OACTC,eAAgB,gBAChBC,aAAc,OACdC,WAAY,SACZ,WAAY,CACVC,SAAU,EACVL,WAAY,KAKLM,EAAuB,CAClCC,eAAgB,CACdC,UAAW,GACXP,QAAS,OACTG,WAAY,SACZF,eAAgB,WAEhB,WAAY,CACVO,YAAa,IAEf,sBAAuB,CACrBA,YAAa,IAGjBC,oBAAqB,CACnBC,UAAW,sBACXC,UAAW,OACXC,WAAY,I,+JCAhB,MAspBA,EAtpB+BC,KAC7B,MAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAaC,GAAoBA,EAAMC,QAAQC,aACxDC,GAAgBJ,EAAAA,EAAAA,KACnBC,GAAoBA,EAAMC,QAAQE,iBAG9BC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAkB,IAC7CC,EAAYC,IAAiBF,EAAAA,EAAAA,WAAkB,IAC/CG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAiB,aAClDK,EAAwBC,IAC7BN,EAAAA,EAAAA,UAAiB,KACZO,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAiB,KACtDS,EAAgBC,IAAqBV,EAAAA,EAAAA,UAAiB,KACtDW,EAAmBC,IAAwBZ,EAAAA,EAAAA,UAAiB,KAC5Da,EAAiBC,IAAsBd,EAAAA,EAAAA,UAAiB,KACxDe,EAAcC,IAAmBhB,EAAAA,EAAAA,UAAiB,KAClDiB,EAAOC,IAAYlB,EAAAA,EAAAA,UAAiB,KACpCmB,EAAgBC,IAAqBpB,EAAAA,EAAAA,UAAiB,KACtDqB,EAAsBC,IAA2BtB,EAAAA,EAAAA,UAAiB,KAClEuB,EAAsBC,IAA2BxB,EAAAA,EAAAA,UAAiB,KAClEyB,EAAsBC,IAA2B1B,EAAAA,EAAAA,UAAiB,KAClE2B,EAAqBC,IAA0B5B,EAAAA,EAAAA,UAAiB,KAChE6B,EAAqBC,IAA0B9B,EAAAA,EAAAA,UAAiB,KAChE+B,EAAWC,IAAgBhC,EAAAA,EAAAA,WAAkB,IAC7CiC,EAAkBC,IAAuBlC,EAAAA,EAAAA,WAAkB,IAC3DmC,EAAkBC,IAAuBpC,EAAAA,EAAAA,WAAkB,IAC3DqC,EAAWC,IAAgBtC,EAAAA,EAAAA,UAAmB,CAAC,MAC/CuC,GAAYC,KAAiBxC,EAAAA,EAAAA,UAAmB,CAAC,MACjDyC,GAAkBC,KAAuB1C,EAAAA,EAAAA,UAAc,CAAC,GACzD2C,GAAmBC,IACvBF,IAAoBG,EAAAA,EAAAA,GAAqBJ,GAAkBG,GAAW,GAEjEE,GAAaC,KAAkB/C,EAAAA,EAAAA,WAAkB,IAGxDgD,EAAAA,EAAAA,YAAU,KACR,IAAIC,EAA4C,GAE3B,WAAjB9C,IACF8C,EAA6B,IACxBA,EACH,CACEC,SAAU,2BACVC,UAAU,EACVC,MAAO/C,GAET,CACE6C,SAAU,kBACVC,UAAU,EACVC,MAAO7C,GAET,CACE2C,SAAU,kBACVC,UAAU,EACVC,MAAO3C,GAET,CACEyC,SAAU,mBACVC,UAAU,EACVC,MAAOvC,KAKQ,OAAjBV,IACF8C,EAA6B,IACxBA,EACH,CACEC,SAAU,SACVC,UAAU,EACVC,MAAOnC,GAET,CACEiC,SAAU,kBACVC,UAAU,EACVC,MAAOjC,KAKb,MAAMkC,GAAYC,EAAAA,EAAAA,GAAqBL,GAEvCF,GAAiD,IAAlCQ,OAAOC,KAAKH,GAAWI,QAEtCf,GAAoBW,EAAU,GAC7B,CACDlD,EACAE,EACAE,EACAE,EACAI,EACAI,EACAE,IAGF,MAAMuC,IAAgCC,EAAAA,EAAAA,cAAY,KAChDC,EAAAA,EACGC,OACC,MAAM,sBAADC,OACuB,OAANtE,QAAM,IAANA,OAAM,EAANA,EAAQuE,UAAS,aAAAD,OAAkB,OAANtE,QAAM,IAANA,OAAM,EAANA,EAAQwE,KAAI,uBAEhEC,MAAMC,IACDA,IACEA,EAAIC,MACN/D,EAAgB,UAChBE,EAA0B4D,EAAIC,KAAKC,mBACnC5D,EAAkB0D,EAAIC,KAAKE,WAC3B3D,EAAkBwD,EAAIC,KAAKG,WAC3B1D,EAAqBsD,EAAIC,KAAKI,cAC9BzD,EAAmBoD,EAAIC,KAAKK,YAC5BxD,EAAgBkD,EAAIC,KAAKM,SAChBP,EAAIQ,mBACbtE,EAAgB,MAChBc,EAASgD,EAAIQ,iBAAiBC,KAC9BvD,EAAkB8C,EAAIQ,iBAAiBE,gBACvCtD,EAAwB4C,EAAIQ,iBAAiBG,sBAC7CrD,EACE0C,EAAIQ,iBAAiBI,wBAEvBpD,EAAwBwC,EAAIQ,iBAAiBK,uBAC7CnD,EAAuBsC,EAAIQ,iBAAiBM,sBAC5ClD,EAAuBoC,EAAIQ,iBAAiBO,qBAC5CjD,EAAakC,EAAIQ,iBAAiBQ,uBAClChD,EAAoBgC,EAAIQ,iBAAiBS,iBACzC/C,EAAoB8B,EAAIQ,iBAAiBU,mBAE7C,IAEDC,OAAOC,IACNhG,GAASiG,EAAAA,EAAAA,IAAqBD,GAAK,GACnC,GACH,CAAC9F,EAAQF,KAEZ0D,EAAAA,EAAAA,YAAU,KACJxD,GACFkE,IACF,GACC,CAAClE,EAAQkE,KAqFZ,OACE8B,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CACZC,MAAO,mBACPC,YAAa,UACbC,WAAW,SACXC,WAAWL,EAAAA,EAAAA,KAACM,EAAAA,IAAgB,IAC5BC,UAAWpG,EACXqG,QAASA,IAAMjG,GAAc,GAC7BkG,OAAQnG,EACRoG,UA7F+BC,KACnCvG,GAAa,GACb,IAAIwG,EAA2C,CAAC,EAChD,OAAQpG,GACN,IAAK,KACHoG,EAAQ7B,iBAAmB,CACzBC,IAAK1D,EACL2D,eAAgBzD,EAChB0D,qBAAsBxD,EACtByD,uBAAwBvD,EACxBwD,sBAAuBtD,EACvBuD,qBAAsBrD,EACtBsD,oBAAqBpD,EACrBqD,sBAAuBnD,EACvBoD,gBAAiBlD,EACjBmD,iBAAkBjD,GAEpB,MACF,IAAK,SACHoE,EAAQpC,KAAO,CACbC,kBAAmB/D,EACnBgE,UAAW9D,EACX+D,UAAW7D,EACX8D,aAAc5D,EACd6D,WAAY3D,EACZ4D,OAAQ1D,GAOd6C,EAAAA,EACGC,OACC,OAAO,sBAADC,OACsB,OAANtE,QAAM,IAANA,OAAM,EAANA,EAAQuE,UAAS,aAAAD,OAAkB,OAANtE,QAAM,IAANA,OAAM,EAANA,EAAQwE,KAAI,sBAC/DuC,GAEDtC,MAAK,KACJlE,GAAa,GAEbG,GAAc,GACdwD,IAA+B,IAEhC2B,OAAOC,IACNhG,GAASiG,EAAAA,EAAAA,IAAqBD,IAC9BvF,GAAa,EAAM,GACnB,EA+CAyG,qBACEb,EAAAA,EAAAA,KAACF,EAAAA,SAAQ,CAAAC,SAAC,yEAKb7F,GACC8F,EAAAA,EAAAA,KAACc,EAAAA,IAAG,CACFC,GAAI,CACFC,UAAW,UACXjB,UAEFC,EAAAA,EAAAA,KAACiB,EAAAA,IAAM,OAGTpB,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACc,EAAAA,IAAG,CAAAf,UACFC,EAAAA,EAAAA,KAACkB,EAAAA,IAAY,CAACC,WAAS,EAACJ,GAAI,CAAEhI,aAAc,IAAKgH,SAAC,yBAIpDF,EAAAA,EAAAA,MAACuB,EAAAA,IAAU,CAAArB,SAAA,EACTC,EAAAA,EAAAA,KAACqB,EAAAA,IAAU,CACTC,aAAc9G,EACd+G,GAAG,cACHlD,KAAK,cACL9F,MAAM,WACNiJ,SAAWC,IACThH,EAAgBgH,EAAEC,OAAOjE,MAAM,EAEjCkE,gBAAiB,CACf,CAAEpJ,MAAO,WAAYkF,MAAO,WAAYmE,MAAM5B,EAAAA,EAAAA,KAAC6B,EAAAA,IAAS,KACxD,CAAEtJ,MAAO,UAAWkF,MAAO,SAAUmE,MAAM5B,EAAAA,EAAAA,KAAC8B,EAAAA,IAAQ,KACpD,CACEvJ,MAAO,0BACPkF,MAAO,KACPmE,MAAM5B,EAAAA,EAAAA,KAAC+B,EAAAA,IAAQ,QAKH,WAAjBvH,IACCqF,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAG,2BACHlD,KAAK,2BACLmD,SAAWC,IACT9G,EAA0B8G,EAAEC,OAAOjE,OACnCT,GAAgB,2BAA2B,EAE7CzE,MAAM,oBACNkF,MAAO/C,EACPuH,YAAY,sEACZC,MAAOpF,GAA2C,0BAAK,GACvDU,UAAQ,KAEVwC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAG,kBACHlD,KAAK,kBACLmD,SAAWC,IACT5G,EAAkB4G,EAAEC,OAAOjE,OAC3BT,GAAgB,kBAAkB,EAEpCzE,MAAM,YACNkF,MAAO7C,EACPsH,MAAOpF,GAAkC,iBAAK,GAC9CU,UAAQ,KAEVwC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPG,KAAM,WACNZ,GAAG,kBACHlD,KAAK,kBACLmD,SAAWC,IACT1G,EAAkB0G,EAAEC,OAAOjE,OAC3BT,GAAgB,kBAAkB,EAEpCzE,MAAM,YACNkF,MAAO3C,EACPoH,MAAOpF,GAAkC,iBAAK,GAC9CU,UAAQ,KAEVwC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAG,mBACHlD,KAAK,mBACLmD,SAAWC,IACTtG,EAAmBsG,EAAEC,OAAOjE,OAC5BT,GAAgB,mBAAmB,EAErCzE,MAAM,aACNkF,MAAOvC,EACP+G,YAAY,SACZC,MAAOpF,GAAmC,kBAAK,MAEjDkD,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAG,gBACHlD,KAAK,gBACLmD,SAAWC,IACTpG,EAAgBoG,EAAEC,OAAOjE,OACzBT,GAAgB,gBAAgB,EAElCzE,MAAM,SACNkF,MAAOrC,OAKK,OAAjBZ,IACCqF,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAG,SACHlD,KAAK,SACLmD,SAAWC,IACTlG,EAASkG,EAAEC,OAAOjE,OAClBT,GAAgB,SAAS,EAE3BzE,MAAM,sBACNkF,MAAOnC,EACP2G,YAAY,kBACZC,MAAOpF,GAAyB,QAAK,GACrCU,UAAQ,KAEVwC,EAAAA,EAAAA,KAACoC,EAAAA,IAAM,CACL3E,MAAM,aACN8D,GAAG,aACHlD,KAAK,aACLgE,QAASjG,EACToF,SAAWC,IACT,MACMY,EADUZ,EAAEC,OACMW,QACxBhG,EAAagG,EAAQ,EAEvB9J,MAAO,2BAETyH,EAAAA,EAAAA,KAACoC,EAAAA,IAAM,CACL3E,MAAM,oBACN8D,GAAG,oBACHlD,KAAK,oBACLgE,QAAS/F,EACTkF,SAAWC,IACT,MACMY,EADUZ,EAAEC,OACMW,QACxB9F,EAAoB8F,EAAQ,EAE9B9J,MAAO,oBAER+D,GACC0D,EAAAA,EAAAA,KAACsC,EAAAA,IAAkB,CACjBpC,MAAO,UACPqC,QACE,6EAGFC,QAAS,UACTzB,GAAI,CAAEhI,aAAc,MAEpB,MACJiH,EAAAA,EAAAA,KAACoC,EAAAA,IAAM,CACL3E,MAAM,oBACN8D,GAAG,oBACHlD,KAAK,oBACLgE,QAAS7F,EACTgF,SAAWC,IACT,MACMY,EADUZ,EAAEC,OACMW,QACxB5F,EAAoB4F,EAAQ,EAE9B9J,MAAO,4CAETyH,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAG,kBACHlD,KAAK,kBACLmD,SAAWC,IACThG,EAAkBgG,EAAEC,OAAOjE,OAC3BT,GAAgB,kBAAkB,EAEpCzE,MAAM,iBACNkF,MAAOjC,EACPyG,YAAY,wBACZC,MAAOpF,GAAkC,iBAAK,GAC9CU,UAAQ,KAEVwC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPG,KAAM,WACNZ,GAAG,wBACHlD,KAAK,wBACLmD,SAAWC,IACT9F,EAAwB8F,EAAEC,OAAOjE,MAAM,EAEzClF,MAAM,uBACNkF,MAAO/B,EACPuG,YAAY,WAEdjC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAG,wBACHlD,KAAK,wBACLmD,SAAWC,IACT5F,EAAwB4F,EAAEC,OAAOjE,MAAM,EAEzClF,MAAM,yBACNkF,MAAO7B,EACPqG,YAAY,kBAEdjC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAG,wBACHlD,KAAK,wBACLmD,SAAWC,IACT1F,EAAwB0F,EAAEC,OAAOjE,MAAM,EAEzClF,MAAM,wBACNkF,MAAO3B,EACPmG,YAAY,wBAEdjC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAG,uBACHlD,KAAK,uBACLmD,SAAWC,IACTxF,EAAuBwF,EAAEC,OAAOjE,MAAM,EAExClF,MAAM,uBACNkF,MAAOzB,EACPiG,YAAY,mDAEdjC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAG,uBACHlD,KAAK,uBACLmD,SAAWC,IACTtF,EAAuBsF,EAAEC,OAAOjE,MAAM,EAExClF,MAAM,sBACNkF,MAAOvB,EACP+F,YAAY,iDAKlBjC,EAAAA,EAAAA,KAACc,EAAAA,IAAG,CAACC,GAAI7H,EAAAA,EAAgBC,eAAe4G,UACtCC,EAAAA,EAAAA,KAACyC,EAAAA,IAAM,CACLlB,GAAI,WACJY,KAAK,SACLK,QAAQ,aACRhK,MAAM,UACNkK,UAAWvF,IAAehD,EAC1BwI,QAASA,IAAMpI,GAAc,GAC7BhC,MAAO,WAIO,OAAjBiC,IACCqF,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACkB,EAAAA,IAAY,CAACC,WAAS,EAAApB,SAAC,6BACxBC,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,YAAU+C,UAAW,YAAY7C,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,iFAIRC,EAAAA,EAAAA,KAAC6C,EAAAA,IAAI,CAACC,MAAI,EAACC,GAAI,GAAGhD,SACfrD,EAAUsG,KAAI,CAACC,EAAGC,KAEflD,EAAAA,EAAAA,KAACF,EAAAA,SAAQ,CAAAC,UACPF,EAAAA,EAAAA,MAACiB,EAAAA,IAAG,CACFC,GAAI,CACFlI,QAAS,OACTE,aAAc,IACdgH,SAAA,EAEFC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAE,aAAApD,OAAe+E,EAAMC,YACvB5K,MAAO,GACP0J,YAAY,GACZ5D,KAAI,aAAAF,OAAe+E,EAAMC,YACzB1F,MAAOf,EAAUwG,GACjB1B,SACEC,IAEA9E,EACED,EAAUsG,KAAI,CAACI,EAAOC,IACpBA,IAAMH,EAAQzB,EAAEC,OAAOjE,MAAQ2F,IAElC,EAEHF,MAAOA,EAEPhB,MACEpF,GAAiB,aAADqB,OACD+E,EAAMC,cAChB,IACN,iBAAAhF,OALqB+E,EAAMC,cAO9BtD,EAAAA,EAAAA,MAACiB,EAAAA,IAAG,CACFC,GAAI,CACFnI,WAAY,GACZC,QAAS,OACTyK,OAAQ,IACRvD,SAAA,EAEFC,EAAAA,EAAAA,KAACuD,EAAAA,IAAO,CAACC,QAAQ,WAAW,aAAW,MAAKzD,UAC1CC,EAAAA,EAAAA,KAACyD,EAAAA,GAAU,CACTC,KAAM,QACNf,QAASA,KACPhG,EAAa,IAAID,EAAW,IAAI,EAChCqD,UAEFC,EAAAA,EAAAA,KAAC2D,EAAAA,IAAO,SAGZ3D,EAAAA,EAAAA,KAACuD,EAAAA,IAAO,CAACC,QAAQ,SAAS,aAAW,MAAKzD,UACxCC,EAAAA,EAAAA,KAACyD,EAAAA,GAAU,CACTC,KAAM,QACNE,MAAO,CAAEhL,WAAY,IACrB+J,QAASA,KACHjG,EAAUoB,OAAS,GACrBnB,EACED,EAAUmH,QAAO,CAACZ,EAAGI,IAAMA,IAAMH,IAErC,EACAnD,UAEFC,EAAAA,EAAAA,KAAC8D,EAAAA,IAAU,eAIb,iBAAA3F,OA/DwB+E,EAAMC,qBAqE9CtD,EAAAA,EAAAA,MAAA,YAAU+C,UAAW,YAAY7C,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,kFAIRC,EAAAA,EAAAA,KAAC6C,EAAAA,IAAI,CAACC,MAAI,EAACC,GAAI,GAAGhD,SACfnD,GAAWoG,KAAI,CAACC,EAAGC,KAEhBlD,EAAAA,EAAAA,KAACF,EAAAA,SAAQ,CAAAC,UACPF,EAAAA,EAAAA,MAACiB,EAAAA,IAAG,CACFC,GAAI,CACFlI,QAAS,OACTE,aAAc,IACdgH,SAAA,EAEFC,EAAAA,EAAAA,KAACgC,EAAAA,IAAQ,CACPT,GAAE,cAAApD,OAAgB+E,EAAMC,YACxB5K,MAAO,GACP0J,YAAY,GACZ5D,KAAI,cAAAF,OAAgB+E,EAAMC,YAC1B1F,MAAOb,GAAWsG,GAClB1B,SACEC,IAEA5E,GACED,GAAWoG,KAAI,CAACI,EAAOC,IACrBA,IAAMH,EAAQzB,EAAEC,OAAOjE,MAAQ2F,IAElC,EAEHF,MAAOA,EAEPhB,MACEpF,GAAiB,cAADqB,OACA+E,EAAMC,cACjB,IACN,kBAAAhF,OALsB+E,EAAMC,cAO/BtD,EAAAA,EAAAA,MAACiB,EAAAA,IAAG,CACFC,GAAI,CACFnI,WAAY,GACZC,QAAS,OACTyK,OAAQ,IACRvD,SAAA,EAEFC,EAAAA,EAAAA,KAACuD,EAAAA,IAAO,CAACC,QAAQ,YAAY,aAAW,MAAKzD,UAC3CC,EAAAA,EAAAA,KAACyD,EAAAA,GAAU,CACTC,KAAM,QACNf,QAASA,KACP9F,GAAc,IAAID,GAAY,IAAI,EAClCmD,UAEFC,EAAAA,EAAAA,KAAC2D,EAAAA,IAAO,SAGZ3D,EAAAA,EAAAA,KAACuD,EAAAA,IAAO,CAACC,QAAQ,SAAS,aAAW,MAAKzD,UACxCC,EAAAA,EAAAA,KAACyD,EAAAA,GAAU,CACTC,KAAM,QACNE,MAAO,CAAEhL,WAAY,IACrB+J,QAASA,KACH/F,GAAWkB,OAAS,GACtBjB,GACED,GAAWiH,QACT,CAACZ,EAAGI,IAAMA,IAAMH,IAGtB,EACAnD,UAEFC,EAAAA,EAAAA,KAAC8D,EAAAA,IAAU,eAIb,iBAAA3F,OAjEwB+E,EAAMC,qBAuE9CnD,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACc,EAAAA,IAAG,CAACC,GAAI7H,EAAAA,EAAgBC,eAAe4G,UACtCC,EAAAA,EAAAA,KAACyC,EAAAA,IAAM,CACLlB,GAAI,qBACJY,KAAK,SACLK,QAAQ,aACRE,UAAWvF,IAAehD,EAC1BwI,QAASA,IA1cDoB,MACxB3J,GAAa,GACb,IAAIwG,EAA2C,CAAC,EAEzC,OADCpG,IAEJoG,EAAU,CACRoD,SAAUtH,EAAUmH,QAAQI,GAAyB,KAAhBA,EAAKC,SAC1CC,UAAWvH,GAAWiH,QAAQT,GAA2B,KAAjBA,EAAMc,WAOpDjG,EAAAA,EACGC,OACC,OAAO,sBAADC,OACsB,OAANtE,QAAM,IAANA,OAAM,EAANA,EAAQuE,UAAS,aAAAD,OAAkB,OAANtE,QAAM,IAANA,OAAM,EAANA,EAAQwE,KAAI,uBAC/DuC,GAEDtC,MAAK,KACJlE,GAAa,GACbyC,GAAc,CAAC,KACfF,EAAa,CAAC,KACdoB,KACApE,GAASyK,EAAAA,EAAAA,IAAmB,qCAAqC,IAElE1E,OAAOC,IACNhG,GAASiG,EAAAA,EAAAA,IAAqBD,IAC9BvF,GAAa,EAAM,GACnB,EA4a2B2J,GACfxL,MAAO,oCAQZ,C","sources":["screens/Console/Common/FormComponents/common/styleLibrary.ts","screens/Console/Tenants/TenantDetails/TenantIdentityProvider.tsx"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// This object contains variables that will be used across form components.\n\nexport const actionsTray = {\n  label: {\n    color: \"#07193E\",\n    fontSize: 13,\n    alignSelf: \"center\" as const,\n    whiteSpace: \"nowrap\" as const,\n    \"&:not(:first-of-type)\": {\n      marginLeft: 10,\n    },\n  },\n  actionsTray: {\n    display: \"flex\" as const,\n    justifyContent: \"space-between\" as const,\n    marginBottom: \"1rem\",\n    alignItems: \"center\",\n    \"& button\": {\n      flexGrow: 0,\n      marginLeft: 8,\n    },\n  },\n};\n\nexport const modalStyleUtils: any = {\n  modalButtonBar: {\n    marginTop: 15,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n\n    \"& button\": {\n      marginRight: 10,\n    },\n    \"& button:last-child\": {\n      marginRight: 0,\n    },\n  },\n  modalFormScrollable: {\n    maxHeight: \"calc(100vh - 300px)\",\n    overflowY: \"auto\",\n    paddingTop: 10,\n  },\n};\n","// This file is part of MinIO Operator\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport {\n  AddIcon,\n  Box,\n  Button,\n  ConfirmModalIcon,\n  DeleteIcon,\n  FormLayout,\n  Grid,\n  IconButton,\n  InformativeMessage,\n  InputBox,\n  LDAPIcon,\n  Loader,\n  OIDCIcon,\n  RadioGroup,\n  SectionTitle,\n  Switch,\n  Tooltip,\n  UsersIcon,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport {\n  ITenantIdentityProviderResponse,\n  ITenantSetAdministratorsRequest,\n} from \"../types\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport {\n  setErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport api from \"../../../../common/api\";\n\nconst TenantIdentityProvider = () => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant,\n  );\n\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [idpSelection, setIdpSelection] = useState<string>(\"Built-in\");\n  const [openIDConfigurationURL, setOpenIDConfigurationURL] =\n    useState<string>(\"\");\n  const [openIDClientID, setOpenIDClientID] = useState<string>(\"\");\n  const [openIDSecretID, setOpenIDSecretID] = useState<string>(\"\");\n  const [openIDCallbackURL, setOpenIDCallbackURL] = useState<string>(\"\");\n  const [openIDClaimName, setOpenIDClaimName] = useState<string>(\"\");\n  const [openIDScopes, setOpenIDScopes] = useState<string>(\"\");\n  const [ADURL, setADURL] = useState<string>(\"\");\n  const [ADLookupBindDN, setADLookupBindDN] = useState<string>(\"\");\n  const [ADLookupBindPassword, setADLookupBindPassword] = useState<string>(\"\");\n  const [ADUserDNSearchBaseDN, setADUserDNSearchBaseDN] = useState<string>(\"\");\n  const [ADUserDNSearchFilter, setADUserDNSearchFilter] = useState<string>(\"\");\n  const [ADGroupSearchBaseDN, setADGroupSearchBaseDN] = useState<string>(\"\");\n  const [ADGroupSearchFilter, setADGroupSearchFilter] = useState<string>(\"\");\n  const [ADSkipTLS, setADSkipTLS] = useState<boolean>(false);\n  const [ADServerInsecure, setADServerInsecure] = useState<boolean>(false);\n  const [ADServerStartTLS, setADServerStartTLS] = useState<boolean>(false);\n  const [ADUserDNs, setADUserDNs] = useState<string[]>([\"\"]);\n  const [ADGroupDNs, setADGroupDNs] = useState<string[]>([\"\"]);\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let identityProviderValidation: IValidation[] = [];\n\n    if (idpSelection === \"OpenID\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: false,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(identityProviderValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    idpSelection,\n    openIDConfigurationURL,\n    openIDClientID,\n    openIDSecretID,\n    openIDClaimName,\n    ADURL,\n    ADLookupBindDN,\n  ]);\n\n  const getTenantIdentityProviderInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`,\n      )\n      .then((res: ITenantIdentityProviderResponse) => {\n        if (res) {\n          if (res.oidc) {\n            setIdpSelection(\"OpenID\");\n            setOpenIDConfigurationURL(res.oidc.configuration_url);\n            setOpenIDClientID(res.oidc.client_id);\n            setOpenIDSecretID(res.oidc.secret_id);\n            setOpenIDCallbackURL(res.oidc.callback_url);\n            setOpenIDClaimName(res.oidc.claim_name);\n            setOpenIDScopes(res.oidc.scopes);\n          } else if (res.active_directory) {\n            setIdpSelection(\"AD\");\n            setADURL(res.active_directory.url);\n            setADLookupBindDN(res.active_directory.lookup_bind_dn);\n            setADLookupBindPassword(res.active_directory.lookup_bind_password);\n            setADUserDNSearchBaseDN(\n              res.active_directory.user_dn_search_base_dn,\n            );\n            setADUserDNSearchFilter(res.active_directory.user_dn_search_filter);\n            setADGroupSearchBaseDN(res.active_directory.group_search_base_dn);\n            setADGroupSearchFilter(res.active_directory.group_search_filter);\n            setADSkipTLS(res.active_directory.skip_tls_verification);\n            setADServerInsecure(res.active_directory.server_insecure);\n            setADServerStartTLS(res.active_directory.server_start_tls);\n          }\n        }\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n      });\n  }, [tenant, dispatch]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantIdentityProviderInfo();\n    }\n  }, [tenant, getTenantIdentityProviderInfo]);\n\n  const updateTenantIdentityProvider = () => {\n    setIsSending(true);\n    let payload: ITenantIdentityProviderResponse = {};\n    switch (idpSelection) {\n      case \"AD\":\n        payload.active_directory = {\n          url: ADURL,\n          lookup_bind_dn: ADLookupBindDN,\n          lookup_bind_password: ADLookupBindPassword,\n          user_dn_search_base_dn: ADUserDNSearchBaseDN,\n          user_dn_search_filter: ADUserDNSearchFilter,\n          group_search_base_dn: ADGroupSearchBaseDN,\n          group_search_filter: ADGroupSearchFilter,\n          skip_tls_verification: ADSkipTLS,\n          server_insecure: ADServerInsecure,\n          server_start_tls: ADServerStartTLS,\n        };\n        break;\n      case \"OpenID\":\n        payload.oidc = {\n          configuration_url: openIDConfigurationURL,\n          client_id: openIDClientID,\n          secret_id: openIDSecretID,\n          callback_url: openIDCallbackURL,\n          claim_name: openIDClaimName,\n          scopes: openIDScopes,\n        };\n        break;\n      default:\n      // Built-in IDP will be used by default\n    }\n\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`,\n        payload,\n      )\n      .then(() => {\n        setIsSending(false);\n        // Close confirmation modal\n        setDialogOpen(false);\n        getTenantIdentityProviderInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  const setAdministrators = () => {\n    setIsSending(true);\n    let payload: ITenantSetAdministratorsRequest = {};\n    switch (idpSelection) {\n      case \"AD\":\n        payload = {\n          user_dns: ADUserDNs.filter((user) => user.trim() !== \"\"),\n          group_dns: ADGroupDNs.filter((group) => group.trim() !== \"\"),\n        };\n        break;\n      default:\n      // Built-in IDP will be used by default\n    }\n\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/set-administrators`,\n        payload,\n      )\n      .then(() => {\n        setIsSending(false);\n        setADGroupDNs([\"\"]);\n        setADUserDNs([\"\"]);\n        getTenantIdentityProviderInfo();\n        dispatch(setSnackBarMessage(`Administrators added successfully`));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  return (\n    <Fragment>\n      <ConfirmDialog\n        title={\"Save and Restart\"}\n        confirmText={\"Restart\"}\n        cancelText=\"Cancel\"\n        titleIcon={<ConfirmModalIcon />}\n        isLoading={isSending}\n        onClose={() => setDialogOpen(false)}\n        isOpen={dialogOpen}\n        onConfirm={updateTenantIdentityProvider}\n        confirmationContent={\n          <Fragment>\n            Are you sure you want to save the changes and restart the service?\n          </Fragment>\n        }\n      />\n      {loadingTenant ? (\n        <Box\n          sx={{\n            textAlign: \"center\",\n          }}\n        >\n          <Loader />\n        </Box>\n      ) : (\n        <Fragment>\n          <Box>\n            <SectionTitle separator sx={{ marginBottom: 15 }}>\n              Identity Provider\n            </SectionTitle>\n          </Box>\n          <FormLayout>\n            <RadioGroup\n              currentValue={idpSelection}\n              id=\"idp-options\"\n              name=\"idp-options\"\n              label=\"Protocol\"\n              onChange={(e) => {\n                setIdpSelection(e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"Built-in\", value: \"Built-in\", icon: <UsersIcon /> },\n                { label: \"Open ID\", value: \"OpenID\", icon: <OIDCIcon /> },\n                {\n                  label: \"LDAP / Active Directory\",\n                  value: \"AD\",\n                  icon: <LDAPIcon />,\n                },\n              ]}\n            />\n\n            {idpSelection === \"OpenID\" && (\n              <Fragment>\n                <InputBox\n                  id=\"openID_CONFIGURATION_URL\"\n                  name=\"openID_CONFIGURATION_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDConfigurationURL(e.target.value);\n                    cleanValidation(\"openID_CONFIGURATION_URL\");\n                  }}\n                  label=\"Configuration URL\"\n                  value={openIDConfigurationURL}\n                  placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n                  error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n                  required\n                />\n                <InputBox\n                  id=\"openID_clientID\"\n                  name=\"openID_clientID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClientID(e.target.value);\n                    cleanValidation(\"openID_clientID\");\n                  }}\n                  label=\"Client ID\"\n                  value={openIDClientID}\n                  error={validationErrors[\"openID_clientID\"] || \"\"}\n                  required\n                />\n                <InputBox\n                  type={\"password\"}\n                  id=\"openID_secretID\"\n                  name=\"openID_secretID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDSecretID(e.target.value);\n                    cleanValidation(\"openID_secretID\");\n                  }}\n                  label=\"Secret ID\"\n                  value={openIDSecretID}\n                  error={validationErrors[\"openID_secretID\"] || \"\"}\n                  required\n                />\n                <InputBox\n                  id=\"openID_claimName\"\n                  name=\"openID_claimName\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClaimName(e.target.value);\n                    cleanValidation(\"openID_claimName\");\n                  }}\n                  label=\"Claim Name\"\n                  value={openIDClaimName}\n                  placeholder=\"policy\"\n                  error={validationErrors[\"openID_claimName\"] || \"\"}\n                />\n                <InputBox\n                  id=\"openID_scopes\"\n                  name=\"openID_scopes\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDScopes(e.target.value);\n                    cleanValidation(\"openID_scopes\");\n                  }}\n                  label=\"Scopes\"\n                  value={openIDScopes}\n                />\n              </Fragment>\n            )}\n\n            {idpSelection === \"AD\" && (\n              <Fragment>\n                <InputBox\n                  id=\"AD_URL\"\n                  name=\"AD_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADURL(e.target.value);\n                    cleanValidation(\"AD_URL\");\n                  }}\n                  label=\"LDAP Server Address\"\n                  value={ADURL}\n                  placeholder=\"ldap-server:636\"\n                  error={validationErrors[\"AD_URL\"] || \"\"}\n                  required\n                />\n                <Switch\n                  value=\"ad_skipTLS\"\n                  id=\"ad_skipTLS\"\n                  name=\"ad_skipTLS\"\n                  checked={ADSkipTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADSkipTLS(checked);\n                  }}\n                  label={\"Skip TLS Verification\"}\n                />\n                <Switch\n                  value=\"ad_serverInsecure\"\n                  id=\"ad_serverInsecure\"\n                  name=\"ad_serverInsecure\"\n                  checked={ADServerInsecure}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerInsecure(checked);\n                  }}\n                  label={\"Server Insecure\"}\n                />\n                {ADServerInsecure ? (\n                  <InformativeMessage\n                    title={\"Warning\"}\n                    message={\n                      \"All traffic with Active Directory will be\\n\" +\n                      \"                    unencrypted\"\n                    }\n                    variant={\"warning\"}\n                    sx={{ marginBottom: 15 }}\n                  />\n                ) : null}\n                <Switch\n                  value=\"ad_serverStartTLS\"\n                  id=\"ad_serverStartTLS\"\n                  name=\"ad_serverStartTLS\"\n                  checked={ADServerStartTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerStartTLS(checked);\n                  }}\n                  label={\"Start TLS connection to AD/LDAP server\"}\n                />\n                <InputBox\n                  id=\"ad_lookupBindDN\"\n                  name=\"ad_lookupBindDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindDN(e.target.value);\n                    cleanValidation(\"ad_lookupBindDN\");\n                  }}\n                  label=\"Lookup Bind DN\"\n                  value={ADLookupBindDN}\n                  placeholder=\"cn=admin,dc=min,dc=io\"\n                  error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n                  required\n                />\n                <InputBox\n                  type={\"password\"}\n                  id=\"ad_lookupBindPassword\"\n                  name=\"ad_lookupBindPassword\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindPassword(e.target.value);\n                  }}\n                  label=\"Lookup Bind Password\"\n                  value={ADLookupBindPassword}\n                  placeholder=\"admin\"\n                />\n                <InputBox\n                  id=\"ad_userDNSearchBaseDN\"\n                  name=\"ad_userDNSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchBaseDN(e.target.value);\n                  }}\n                  label=\"User DN Search Base DN\"\n                  value={ADUserDNSearchBaseDN}\n                  placeholder=\"dc=min,dc=io\"\n                />\n                <InputBox\n                  id=\"ad_userDNSearchFilter\"\n                  name=\"ad_userDNSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchFilter(e.target.value);\n                  }}\n                  label=\"User DN Search Filter\"\n                  value={ADUserDNSearchFilter}\n                  placeholder=\"(sAMAcountName=%s)\"\n                />\n                <InputBox\n                  id=\"ad_groupSearchBaseDN\"\n                  name=\"ad_groupSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchBaseDN(e.target.value);\n                  }}\n                  label=\"Group Search Base DN\"\n                  value={ADGroupSearchBaseDN}\n                  placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n                />\n                <InputBox\n                  id=\"ad_groupSearchFilter\"\n                  name=\"ad_groupSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchFilter(e.target.value);\n                  }}\n                  label=\"Group Search Filter\"\n                  value={ADGroupSearchFilter}\n                  placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n                />\n              </Fragment>\n            )}\n\n            <Box sx={modalStyleUtils.modalButtonBar}>\n              <Button\n                id={\"save-idp\"}\n                type=\"submit\"\n                variant=\"callAction\"\n                color=\"primary\"\n                disabled={!isFormValid || isSending}\n                onClick={() => setDialogOpen(true)}\n                label={\"Save\"}\n              />\n            </Box>\n\n            {idpSelection === \"AD\" && (\n              <Fragment>\n                <SectionTitle separator>User & Group management</SectionTitle>\n                <br />\n                <fieldset className={\"inputItem\"}>\n                  <legend>\n                    List of user DNs (Distinguished Names) to be added as Tenant\n                    Administrators\n                  </legend>\n                  <Grid item xs={12}>\n                    {ADUserDNs.map((_, index) => {\n                      return (\n                        <Fragment key={`identityField-${index.toString()}`}>\n                          <Box\n                            sx={{\n                              display: \"flex\",\n                              marginBottom: 10,\n                            }}\n                          >\n                            <InputBox\n                              id={`ad-userdn-${index.toString()}`}\n                              label={\"\"}\n                              placeholder=\"\"\n                              name={`ad-userdn-${index.toString()}`}\n                              value={ADUserDNs[index]}\n                              onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>,\n                              ) => {\n                                setADUserDNs(\n                                  ADUserDNs.map((group, i) =>\n                                    i === index ? e.target.value : group,\n                                  ),\n                                );\n                              }}\n                              index={index}\n                              key={`csv-ad-userdn-${index.toString()}`}\n                              error={\n                                validationErrors[\n                                  `ad-userdn-${index.toString()}`\n                                ] || \"\"\n                              }\n                            />\n                            <Box\n                              sx={{\n                                marginLeft: 10,\n                                display: \"flex\",\n                                height: 38,\n                              }}\n                            >\n                              <Tooltip tooltip=\"Add User\" aria-label=\"add\">\n                                <IconButton\n                                  size={\"small\"}\n                                  onClick={() => {\n                                    setADUserDNs([...ADUserDNs, \"\"]);\n                                  }}\n                                >\n                                  <AddIcon />\n                                </IconButton>\n                              </Tooltip>\n                              <Tooltip tooltip=\"Remove\" aria-label=\"add\">\n                                <IconButton\n                                  size={\"small\"}\n                                  style={{ marginLeft: 16 }}\n                                  onClick={() => {\n                                    if (ADUserDNs.length > 1) {\n                                      setADUserDNs(\n                                        ADUserDNs.filter((_, i) => i !== index),\n                                      );\n                                    }\n                                  }}\n                                >\n                                  <DeleteIcon />\n                                </IconButton>\n                              </Tooltip>\n                            </Box>\n                          </Box>\n                        </Fragment>\n                      );\n                    })}\n                  </Grid>\n                </fieldset>\n                <fieldset className={\"inputItem\"}>\n                  <legend>\n                    List of group DNs (Distinguished Names) to be added as\n                    Tenant Administrators\n                  </legend>\n                  <Grid item xs={12}>\n                    {ADGroupDNs.map((_, index) => {\n                      return (\n                        <Fragment key={`identityField-${index.toString()}`}>\n                          <Box\n                            sx={{\n                              display: \"flex\",\n                              marginBottom: 10,\n                            }}\n                          >\n                            <InputBox\n                              id={`ad-groupdn-${index.toString()}`}\n                              label={\"\"}\n                              placeholder=\"\"\n                              name={`ad-groupdn-${index.toString()}`}\n                              value={ADGroupDNs[index]}\n                              onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>,\n                              ) => {\n                                setADGroupDNs(\n                                  ADGroupDNs.map((group, i) =>\n                                    i === index ? e.target.value : group,\n                                  ),\n                                );\n                              }}\n                              index={index}\n                              key={`csv-ad-groupdn-${index.toString()}`}\n                              error={\n                                validationErrors[\n                                  `ad-groupdn-${index.toString()}`\n                                ] || \"\"\n                              }\n                            />\n                            <Box\n                              sx={{\n                                marginLeft: 10,\n                                display: \"flex\",\n                                height: 38,\n                              }}\n                            >\n                              <Tooltip tooltip=\"Add Group\" aria-label=\"add\">\n                                <IconButton\n                                  size={\"small\"}\n                                  onClick={() => {\n                                    setADGroupDNs([...ADGroupDNs, \"\"]);\n                                  }}\n                                >\n                                  <AddIcon />\n                                </IconButton>\n                              </Tooltip>\n                              <Tooltip tooltip=\"Remove\" aria-label=\"add\">\n                                <IconButton\n                                  size={\"small\"}\n                                  style={{ marginLeft: 16 }}\n                                  onClick={() => {\n                                    if (ADGroupDNs.length > 1) {\n                                      setADGroupDNs(\n                                        ADGroupDNs.filter(\n                                          (_, i) => i !== index,\n                                        ),\n                                      );\n                                    }\n                                  }}\n                                >\n                                  <DeleteIcon />\n                                </IconButton>\n                              </Tooltip>\n                            </Box>\n                          </Box>\n                        </Fragment>\n                      );\n                    })}\n                  </Grid>\n                </fieldset>\n                <br />\n                <Box sx={modalStyleUtils.modalButtonBar}>\n                  <Button\n                    id={\"add-additional-dns\"}\n                    type=\"submit\"\n                    variant=\"callAction\"\n                    disabled={!isFormValid || isSending}\n                    onClick={() => setAdministrators()}\n                    label={\"Add additional DNs\"}\n                  />\n                </Box>\n              </Fragment>\n            )}\n          </FormLayout>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default TenantIdentityProvider;\n"],"names":["actionsTray","label","color","fontSize","alignSelf","whiteSpace","marginLeft","display","justifyContent","marginBottom","alignItems","flexGrow","modalStyleUtils","modalButtonBar","marginTop","marginRight","modalFormScrollable","maxHeight","overflowY","paddingTop","TenantIdentityProvider","dispatch","useAppDispatch","tenant","useSelector","state","tenants","tenantInfo","loadingTenant","isSending","setIsSending","useState","dialogOpen","setDialogOpen","idpSelection","setIdpSelection","openIDConfigurationURL","setOpenIDConfigurationURL","openIDClientID","setOpenIDClientID","openIDSecretID","setOpenIDSecretID","openIDCallbackURL","setOpenIDCallbackURL","openIDClaimName","setOpenIDClaimName","openIDScopes","setOpenIDScopes","ADURL","setADURL","ADLookupBindDN","setADLookupBindDN","ADLookupBindPassword","setADLookupBindPassword","ADUserDNSearchBaseDN","setADUserDNSearchBaseDN","ADUserDNSearchFilter","setADUserDNSearchFilter","ADGroupSearchBaseDN","setADGroupSearchBaseDN","ADGroupSearchFilter","setADGroupSearchFilter","ADSkipTLS","setADSkipTLS","ADServerInsecure","setADServerInsecure","ADServerStartTLS","setADServerStartTLS","ADUserDNs","setADUserDNs","ADGroupDNs","setADGroupDNs","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","isFormValid","setIsFormValid","useEffect","identityProviderValidation","fieldKey","required","value","commonVal","commonFormValidation","Object","keys","length","getTenantIdentityProviderInfo","useCallback","api","invoke","concat","namespace","name","then","res","oidc","configuration_url","client_id","secret_id","callback_url","claim_name","scopes","active_directory","url","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter","skip_tls_verification","server_insecure","server_start_tls","catch","err","setErrorSnackMessage","_jsxs","Fragment","children","_jsx","ConfirmDialog","title","confirmText","cancelText","titleIcon","ConfirmModalIcon","isLoading","onClose","isOpen","onConfirm","updateTenantIdentityProvider","payload","confirmationContent","Box","sx","textAlign","Loader","SectionTitle","separator","FormLayout","RadioGroup","currentValue","id","onChange","e","target","selectorOptions","icon","UsersIcon","OIDCIcon","LDAPIcon","InputBox","placeholder","error","type","Switch","checked","InformativeMessage","message","variant","Button","disabled","onClick","className","Grid","item","xs","map","_","index","toString","group","i","height","Tooltip","tooltip","IconButton","size","AddIcon","style","filter","DeleteIcon","setAdministrators","user_dns","user","trim","group_dns","setSnackBarMessage"],"sourceRoot":""}