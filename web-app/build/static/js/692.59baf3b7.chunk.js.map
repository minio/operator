{"version":3,"file":"static/js/692.59baf3b7.chunk.js","mappings":"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","sources":["screens/Console/Tenants/TenantDetails/Pools/AddPool/PoolResources.tsx","screens/Console/Tenants/TenantDetails/Pools/AddPool/PoolConfiguration.tsx","screens/Console/Tenants/TenantDetails/Pools/AddPool/PoolPodPlacement.tsx","screens/Console/Tenants/TenantDetails/Pools/AddPool/AddPoolCreateButton.tsx","screens/Console/Tenants/TenantDetails/Pools/AddPool/AddPool.tsx"],"sourcesContent":["// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Box, FormLayout, InputBox, Select } from \"mds\";\nimport get from \"lodash/get\";\nimport { niceBytes } from \"../../../../../../common/utils\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport { IQuotaElement, IQuotas } from \"../../../ListTenants/utils\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { useSelector } from \"react-redux\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport InputUnitMenu from \"../../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\nimport {\n  isPoolPageValid,\n  setPoolField,\n  setPoolStorageClasses,\n} from \"./addPoolSlice\";\nimport api from \"../../../../../../common/api\";\nimport H3Section from \"../../../../Common/H3Section\";\n\nconst PoolResources = () => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const storageClasses = useSelector(\n    (state: AppState) => state.addPool.storageClasses,\n  );\n  const numberOfNodes = useSelector((state: AppState) =>\n    state.addPool.setup.numberOfNodes.toString(),\n  );\n  const storageClass = useSelector(\n    (state: AppState) => state.addPool.setup.storageClass,\n  );\n  const volumeSize = useSelector((state: AppState) =>\n    state.addPool.setup.volumeSize.toString(),\n  );\n  const volumesPerServer = useSelector((state: AppState) =>\n    state.addPool.setup.volumesPerServer.toString(),\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const instanceCapacity: number =\n    parseInt(volumeSize) * 1073741824 * parseInt(volumesPerServer);\n  const totalCapacity: number = instanceCapacity * parseInt(numberOfNodes);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [\n      {\n        fieldKey: \"number_of_nodes\",\n        required: true,\n        value: numberOfNodes.toString(),\n        customValidation:\n          parseInt(numberOfNodes) < 1 || isNaN(parseInt(numberOfNodes)),\n        customValidationMessage: \"Number of servers must be at least 1\",\n      },\n      {\n        fieldKey: \"pool_size\",\n        required: true,\n        value: volumeSize.toString(),\n        customValidation:\n          parseInt(volumeSize) < 1 || isNaN(parseInt(volumeSize)),\n        customValidationMessage: \"Pool Size cannot be 0\",\n      },\n      {\n        fieldKey: \"volumes_per_server\",\n        required: true,\n        value: volumesPerServer.toString(),\n        customValidation:\n          parseInt(volumesPerServer) < 1 || isNaN(parseInt(volumesPerServer)),\n        customValidationMessage: \"1 volume or more are required\",\n      },\n    ];\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPoolPageValid({\n        page: \"setup\",\n        status: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [dispatch, numberOfNodes, volumeSize, volumesPerServer, storageClass]);\n\n  useEffect(() => {\n    if (storageClasses.length === 0 && tenant) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenant.namespace}/resourcequotas/${tenant.namespace}-storagequota`,\n        )\n        .then((res: IQuotas) => {\n          const elements: IQuotaElement[] = get(res, \"elements\", []);\n\n          const newStorage = elements.map((storageClass: any) => {\n            const name = get(storageClass, \"name\", \"\").split(\n              \".storageclass.storage.k8s.io/requests.storage\",\n            )[0];\n\n            return { label: name, value: name };\n          });\n\n          dispatch(\n            setPoolField({\n              page: \"setup\",\n              field: \"storageClass\",\n              value: newStorage[0].value,\n            }),\n          );\n\n          dispatch(setPoolStorageClasses(newStorage));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          console.error(err);\n        });\n    }\n  }, [tenant, storageClasses, dispatch]);\n\n  const setFieldInfo = (fieldName: string, value: any) => {\n    dispatch(\n      setPoolField({\n        page: \"setup\",\n        field: fieldName,\n        value: value,\n      }),\n    );\n  };\n\n  return (\n    <Fragment>\n      <Box className={\"inputItem\"} sx={{ marginBottom: 12 }}>\n        <H3Section>New Pool Configuration</H3Section>\n        <span className={\"muted\"}>\n          Configure a new Pool to expand MinIO storage\n        </span>\n      </Box>\n\n      <FormLayout withBorders={false} containerPadding={false}>\n        <InputBox\n          id=\"number_of_nodes\"\n          name=\"number_of_nodes\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            const intValue = parseInt(e.target.value);\n\n            if (e.target.validity.valid && !isNaN(intValue)) {\n              setFieldInfo(\"numberOfNodes\", intValue);\n            } else if (isNaN(intValue)) {\n              setFieldInfo(\"numberOfNodes\", 0);\n            }\n          }}\n          label=\"Number of Servers\"\n          value={numberOfNodes}\n          error={validationErrors[\"number_of_nodes\"] || \"\"}\n          pattern={\"[0-9]*\"}\n        />\n        <InputBox\n          id=\"pool_size\"\n          name=\"pool_size\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            const intValue = parseInt(e.target.value);\n\n            if (e.target.validity.valid && !isNaN(intValue)) {\n              setFieldInfo(\"volumeSize\", intValue);\n            } else if (isNaN(intValue)) {\n              setFieldInfo(\"volumeSize\", 0);\n            }\n          }}\n          label=\"Volume Size\"\n          value={volumeSize}\n          error={validationErrors[\"pool_size\"] || \"\"}\n          pattern={\"[0-9]*\"}\n          overlayObject={\n            <InputUnitMenu\n              id={\"quota_unit\"}\n              onUnitChange={() => {}}\n              unitSelected={\"Gi\"}\n              unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n              disabled={true}\n            />\n          }\n        />\n        <InputBox\n          id=\"volumes_per_sever\"\n          name=\"volumes_per_sever\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            const intValue = parseInt(e.target.value);\n\n            if (e.target.validity.valid && !isNaN(intValue)) {\n              setFieldInfo(\"volumesPerServer\", intValue);\n            } else if (isNaN(intValue)) {\n              setFieldInfo(\"volumesPerServer\", 0);\n            }\n          }}\n          label=\"Volumes per Server\"\n          value={volumesPerServer}\n          error={validationErrors[\"volumes_per_server\"] || \"\"}\n          pattern={\"[0-9]*\"}\n        />\n        <Select\n          id=\"storage_class\"\n          name=\"storage_class\"\n          onChange={(value) => {\n            setFieldInfo(\"storageClass\", value);\n          }}\n          label=\"Storage Class\"\n          value={storageClass}\n          options={storageClasses}\n          disabled={storageClasses.length < 1}\n        />\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginLeft: 30,\n            gap: 25,\n            \"& .sizeNumber\": {\n              fontSize: 35,\n              fontWeight: 700,\n              textAlign: \"center\",\n            },\n            \"& .sizeDescription\": {\n              fontSize: 14,\n              textAlign: \"center\",\n            },\n          }}\n        >\n          <Box>\n            <Box className={\"sizeNumber\"}>\n              {niceBytes(instanceCapacity.toString(10))}\n            </Box>\n            <Box className={\"sizeDescription muted\"}>Instance Capacity</Box>\n          </Box>\n          <Box>\n            <Box className={\"sizeNumber\"}>\n              {niceBytes(totalCapacity.toString(10))}\n            </Box>\n            <Box className={\"sizeDescription muted\"}>Total Capacity</Box>\n          </Box>\n        </Box>\n      </FormLayout>\n    </Fragment>\n  );\n};\n\nexport default PoolResources;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { Box, FormLayout, Grid, InputBox, Switch } from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { clearValidationError } from \"../../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport { isPoolPageValid, setPoolField } from \"./addPoolSlice\";\nimport H3Section from \"../../../../Common/H3Section\";\n\nconst PoolConfiguration = () => {\n  const dispatch = useAppDispatch();\n\n  const securityContextEnabled = useSelector(\n    (state: AppState) => state.addPool.configuration.securityContextEnabled,\n  );\n  const securityContext = useSelector(\n    (state: AppState) => state.addPool.configuration.securityContext,\n  );\n  const customRuntime = useSelector(\n    (state: AppState) => state.addPool.configuration.customRuntime,\n  );\n  const runtimeClassName = useSelector(\n    (state: AppState) => state.addPool.configuration.runtimeClassName,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        setPoolField({\n          page: \"configuration\",\n          field: field,\n          value: value,\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n    if (securityContextEnabled) {\n      customAccountValidation = [\n        {\n          fieldKey: \"pool_securityContext_runAsUser\",\n          required: true,\n          value: securityContext.runAsUser,\n          customValidation:\n            securityContext.runAsUser === \"\" ||\n            parseInt(securityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"pool_securityContext_runAsGroup\",\n          required: true,\n          value: securityContext.runAsGroup,\n          customValidation:\n            securityContext.runAsGroup === \"\" ||\n            parseInt(securityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"pool_securityContext_fsGroup\",\n          required: true,\n          value: securityContext.fsGroup!,\n          customValidation:\n            securityContext.fsGroup === \"\" ||\n            parseInt(securityContext.fsGroup!) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPoolPageValid({\n        page: \"configure\",\n        status: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [dispatch, securityContextEnabled, securityContext]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Fragment>\n      <Box className={\"inputItem\"} sx={{ marginBottom: 12 }}>\n        <H3Section>Configure</H3Section>\n        <span className={\"muted\"}>\n          Aditional Configurations for the new Pool\n        </span>\n      </Box>\n      <FormLayout withBorders={false} containerPadding={false}>\n        <Switch\n          value=\"tenantConfig\"\n          id=\"pool_configuration\"\n          name=\"pool_configuration\"\n          checked={securityContextEnabled}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"securityContextEnabled\", checked);\n          }}\n          label={\"Security Context\"}\n        />\n        {securityContextEnabled && (\n          <fieldset className={\"inputItem\"} style={{ marginBottom: 15 }}>\n            <legend>Pool's Security Context</legend>\n            <Grid\n              item\n              xs={12}\n              sx={{\n                marginRight: 15,\n                \"& .containerItem\": {\n                  marginRight: 15,\n                },\n                \"& .multiContainer\": {\n                  display: \"flex\" as const,\n                  alignItems: \"center\" as const,\n                  justifyContent: \"flex-start\" as const,\n                },\n                \"& .responsiveSectionItem\": {\n                  \"@media (max-width: 900px)\": {\n                    flexFlow: \"column\",\n                    alignItems: \"flex-start\",\n\n                    \"& div > div\": {\n                      marginBottom: 5,\n                      marginRight: 0,\n                    },\n                  },\n                },\n              }}\n            >\n              <div\n                className={`${\"multiContainer\"} ${\"responsiveSectionItem\"} inputItem`}\n              >\n                <div className={\"containerItem\"}>\n                  <InputBox\n                    type=\"number\"\n                    id=\"pool_securityContext_runAsUser\"\n                    name=\"pool_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"securityContext\", {\n                        ...securityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"pool_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={securityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"pool_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={\"containerItem\"}>\n                  <InputBox\n                    type=\"number\"\n                    id=\"pool_securityContext_runAsGroup\"\n                    name=\"pool_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"securityContext\", {\n                        ...securityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"pool_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={securityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"pool_securityContext_runAsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n              <div\n                className={`${\"multiContainer\"} ${\"responsiveSectionItem\"} inputItem`}\n              >\n                <div className={\"containerItem\"}>\n                  <InputBox\n                    type=\"number\"\n                    id=\"pool_securityContext_fsGroup\"\n                    name=\"pool_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"securityContext\", {\n                        ...securityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"pool_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={securityContext.fsGroup!}\n                    required\n                    error={\n                      validationErrors[\"pool_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid\n              item\n              xs={12}\n              sx={{\n                marginRight: 15,\n              }}\n            >\n              <Switch\n                value=\"securityContextRunAsNonRoot\"\n                id=\"pool_securityContext_runAsNonRoot\"\n                name=\"pool_securityContext_runAsNonRoot\"\n                checked={securityContext.runAsNonRoot}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  updateField(\"securityContext\", {\n                    ...securityContext,\n                    runAsNonRoot: checked,\n                  });\n                }}\n                label={\"Do not run as Root\"}\n              />\n            </Grid>\n          </fieldset>\n        )}\n        <Switch\n          value=\"customRuntime\"\n          id=\"tenant_custom_runtime\"\n          name=\"tenant_custom_runtime\"\n          checked={customRuntime}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"customRuntime\", checked);\n          }}\n          label={\"Custom Runtime Configurations\"}\n        />\n        {customRuntime && (\n          <fieldset className={\"inputItem\"}>\n            <legend>Custom Runtime Configurations</legend>\n            <InputBox\n              id=\"tenant_runtime_runtimeClassName\"\n              name=\"tenant_runtime_runtimeClassName\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"runtimeClassName\", e.target.value);\n                cleanValidation(\"tenant_runtime_runtimeClassName\");\n              }}\n              label=\"Runtime Class Name\"\n              value={runtimeClassName}\n              error={validationErrors[\"tenant_runtime_runtimeClassName\"] || \"\"}\n            />\n          </fieldset>\n        )}\n      </FormLayout>\n    </Fragment>\n  );\n};\n\nexport default PoolConfiguration;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport {\n  AddIcon,\n  Box,\n  Grid,\n  IconButton,\n  InputBox,\n  RadioGroup,\n  RemoveIcon,\n  Select,\n  Switch,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport { LabelKeyPair } from \"../../../types\";\nimport { setModalErrorSnackMessage } from \"../../../../../../systemSlice\";\nimport {\n  addNewPoolToleration,\n  isPoolPageValid,\n  removePoolToleration,\n  setPoolField,\n  setPoolKeyValuePairs,\n  setPoolTolerationInfo,\n} from \"./addPoolSlice\";\nimport H3Section from \"../../../../Common/H3Section\";\nimport api from \"../../../../../../common/api\";\nimport TolerationSelector from \"../../../../Common/TolerationSelector/TolerationSelector\";\n\ninterface OptionPair {\n  label: string;\n  value: string;\n}\n\nconst Affinity = () => {\n  const dispatch = useAppDispatch();\n\n  const podAffinity = useSelector(\n    (state: AppState) => state.addPool.affinity.podAffinity,\n  );\n  const nodeSelectorLabels = useSelector(\n    (state: AppState) => state.addPool.affinity.nodeSelectorLabels,\n  );\n  const withPodAntiAffinity = useSelector(\n    (state: AppState) => state.addPool.affinity.withPodAntiAffinity,\n  );\n  const keyValuePairs = useSelector(\n    (state: AppState) => state.addPool.nodeSelectorPairs,\n  );\n  const tolerations = useSelector(\n    (state: AppState) => state.addPool.tolerations,\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [keyValueMap, setKeyValueMap] = useState<{ [key: string]: string[] }>(\n    {},\n  );\n  const [keyOptions, setKeyOptions] = useState<OptionPair[]>([]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        setPoolField({\n          page: \"affinity\",\n          field: field,\n          value: value,\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/nodes/labels`)\n        .then((res: { [key: string]: string[] }) => {\n          setLoading(false);\n          setKeyValueMap(res);\n          let keys: OptionPair[] = [];\n          for (let k in res) {\n            keys.push({\n              label: k,\n              value: k,\n            });\n          }\n          setKeyOptions(keys);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n          setKeyValueMap({});\n        });\n    }\n  }, [dispatch, loading]);\n\n  useEffect(() => {\n    if (keyValuePairs) {\n      const vlr = keyValuePairs\n        .filter((kvp) => kvp.key !== \"\")\n        .map((kvp) => `${kvp.key}=${kvp.value}`)\n        .filter((kvs, i, a) => a.indexOf(kvs) === i);\n      const vl = vlr.join(\"&\");\n      updateField(\"nodeSelectorLabels\", vl);\n    }\n  }, [keyValuePairs, updateField]);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (podAffinity === \"nodeSelector\") {\n      let valid = true;\n\n      const splittedLabels = nodeSelectorLabels.split(\"&\");\n\n      if (splittedLabels.length === 1 && splittedLabels[0] === \"\") {\n        valid = false;\n      }\n\n      splittedLabels.forEach((item: string, index: number) => {\n        const splitItem = item.split(\"=\");\n\n        if (splitItem.length !== 2) {\n          valid = false;\n        }\n\n        if (index + 1 !== splittedLabels.length) {\n          if (splitItem[0] === \"\" || splitItem[1] === \"\") {\n            valid = false;\n          }\n        }\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"labels\",\n          required: true,\n          value: nodeSelectorLabels,\n          customValidation: !valid,\n          customValidationMessage:\n            \"You need to add at least one label key-pair\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPoolPageValid({\n        page: \"affinity\",\n        status: Object.keys(commonVal).length === 0,\n      }),\n    );\n\n    setValidationErrors(commonVal);\n  }, [dispatch, podAffinity, nodeSelectorLabels]);\n\n  const updateToleration = (index: number, field: string, value: any) => {\n    const alterToleration = { ...tolerations[index], [field]: value };\n\n    dispatch(\n      setPoolTolerationInfo({\n        index: index,\n        tolerationValue: alterToleration,\n      }),\n    );\n  };\n\n  return (\n    <Fragment>\n      <Box className={\"inputItem\"} sx={{ marginBottom: 12 }}>\n        <H3Section>Pod Placement</H3Section>\n        <span className={\"muted\"}>\n          Configure how pods will be assigned to nodes\n        </span>\n      </Box>\n      <Box\n        sx={{\n          \"& .affinityConfigField\": {\n            marginBottom: 10,\n            display: \"flex\",\n          },\n          \"& .affinityLabelKey\": {\n            \"& div:first-child\": {\n              marginBottom: 0,\n            },\n          },\n          \"& .affinityLabelValue\": {\n            marginLeft: 10,\n            \"& div:first-child\": {\n              marginBottom: 0,\n            },\n          },\n          \"& .rowActions\": {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: 10,\n            marginLeft: 10,\n          },\n          \"& .overlayAction\": {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: 10,\n          },\n          \"& .affinityRow\": {\n            marginBottom: 10,\n            display: \"flex\",\n            gap: 10,\n          },\n        }}\n      >\n        <Grid\n          item\n          xs={12}\n          sx={{\n            display: \"flex\",\n            \"& .affinityFieldLabel\": {\n              display: \"flex\",\n              flexFlow: \"column\",\n              flex: 1,\n            },\n          }}\n        >\n          <Grid item className={\"affinityFieldLabel\"}>\n            <h2 style={{ marginBottom: 10 }}>Type</h2>\n            <Box className={`muted`} sx={{ marginBottom: 12 }}>\n              MinIO supports multiple configurations for Pod Affinity\n            </Box>\n            <RadioGroup\n              currentValue={podAffinity}\n              id=\"affinity-options\"\n              name=\"affinity-options\"\n              label={\" \"}\n              onChange={(e) => {\n                updateField(\"podAffinity\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"None\", value: \"none\" },\n                { label: \"Default (Pod Anti-Affinity)\", value: \"default\" },\n                { label: \"Node Selector\", value: \"nodeSelector\" },\n              ]}\n              displayInColumn\n            />\n          </Grid>\n        </Grid>\n        {podAffinity === \"nodeSelector\" && (\n          <Fragment>\n            <br />\n            <Grid item xs={12}>\n              <Switch\n                value=\"with_pod_anti_affinity\"\n                id=\"with_pod_anti_affinity\"\n                name=\"with_pod_anti_affinity\"\n                checked={withPodAntiAffinity}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n\n                  updateField(\"withPodAntiAffinity\", checked);\n                }}\n                label={\"With Pod Anti-Affinity\"}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <h3>Labels</h3>\n              <span className={\"error\"}>{validationErrors[\"labels\"]}</span>\n              <Grid container>\n                {keyValuePairs &&\n                  keyValuePairs.map((kvp, i) => {\n                    return (\n                      <Grid\n                        item\n                        xs={12}\n                        key={`affinity-keyVal-${i.toString()}`}\n                        className={\"affinityConfigField\"}\n                      >\n                        <Grid item xs={5} className={\"affinityLabelKey\"}>\n                          {keyOptions.length > 0 && (\n                            <Select\n                              onChange={(value) => {\n                                const newKey = value;\n                                const newLKP: LabelKeyPair = {\n                                  key: newKey,\n                                  value: keyValueMap[newKey][0],\n                                };\n                                const arrCp: LabelKeyPair[] = [\n                                  ...keyValuePairs,\n                                ];\n                                arrCp[i] = newLKP;\n                                dispatch(setPoolKeyValuePairs(arrCp));\n                              }}\n                              id=\"select-access-policy\"\n                              name=\"select-access-policy\"\n                              label={\"\"}\n                              value={kvp.key}\n                              options={keyOptions}\n                            />\n                          )}\n                          {keyOptions.length === 0 && (\n                            <InputBox\n                              id={`nodeselector-key-${i.toString()}`}\n                              label={\"\"}\n                              name={`nodeselector-${i.toString()}`}\n                              value={kvp.key}\n                              onChange={(e) => {\n                                const arrCp: LabelKeyPair[] = [\n                                  ...keyValuePairs,\n                                ];\n                                arrCp[i] = {\n                                  key: arrCp[i].key,\n                                  value: e.target.value as string,\n                                };\n                                dispatch(setPoolKeyValuePairs(arrCp));\n                              }}\n                              index={i}\n                              placeholder={\"Key\"}\n                            />\n                          )}\n                        </Grid>\n                        <Grid item xs={5} className={\"affinityLabelValue\"}>\n                          {keyOptions.length > 0 && (\n                            <Select\n                              onChange={(value) => {\n                                const arrCp: LabelKeyPair[] = [\n                                  ...keyValuePairs,\n                                ];\n                                arrCp[i] = {\n                                  key: arrCp[i].key,\n                                  value: value,\n                                };\n                                dispatch(setPoolKeyValuePairs(arrCp));\n                              }}\n                              id=\"select-access-policy\"\n                              name=\"select-access-policy\"\n                              label={\"\"}\n                              value={kvp.value}\n                              options={\n                                keyValueMap[kvp.key]\n                                  ? keyValueMap[kvp.key].map((v) => {\n                                      return { label: v, value: v };\n                                    })\n                                  : []\n                              }\n                            />\n                          )}\n                          {keyOptions.length === 0 && (\n                            <InputBox\n                              id={`nodeselector-value-${i.toString()}`}\n                              label={\"\"}\n                              name={`nodeselector-${i.toString()}`}\n                              value={kvp.value}\n                              onChange={(e) => {\n                                const arrCp: LabelKeyPair[] = [\n                                  ...keyValuePairs,\n                                ];\n                                arrCp[i] = {\n                                  key: arrCp[i].key,\n                                  value: e.target.value as string,\n                                };\n                                dispatch(setPoolKeyValuePairs(arrCp));\n                              }}\n                              index={i}\n                              placeholder={\"value\"}\n                            />\n                          )}\n                        </Grid>\n                        <Grid item xs={2} className={\"rowActions\"}>\n                          <div className={\"overlayAction\"}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                const arrCp = [...keyValuePairs];\n                                if (keyOptions.length > 0) {\n                                  arrCp.push({\n                                    key: keyOptions[0].value,\n                                    value: keyValueMap[keyOptions[0].value][0],\n                                  });\n                                } else {\n                                  arrCp.push({ key: \"\", value: \"\" });\n                                }\n\n                                dispatch(setPoolKeyValuePairs(arrCp));\n                              }}\n                            >\n                              <AddIcon />\n                            </IconButton>\n                          </div>\n                          {keyValuePairs.length > 1 && (\n                            <div className={\"overlayAction\"}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  const arrCp = keyValuePairs.filter(\n                                    (item, index) => index !== i,\n                                  );\n                                  dispatch(setPoolKeyValuePairs(arrCp));\n                                }}\n                              >\n                                <RemoveIcon />\n                              </IconButton>\n                            </div>\n                          )}\n                        </Grid>\n                      </Grid>\n                    );\n                  })}\n              </Grid>\n            </Grid>\n          </Fragment>\n        )}\n        <Grid item xs={12} className={\"affinityConfigField\"}>\n          <Grid item className={\"affinityFieldLabel\"}>\n            <h3>Tolerations</h3>\n            <span className={\"error\"}>{validationErrors[\"tolerations\"]}</span>\n            <Grid container>\n              {tolerations &&\n                tolerations.map((tol, i) => {\n                  return (\n                    <Grid\n                      item\n                      xs={12}\n                      className={\"affinityRow\"}\n                      key={`affinity-keyVal-${i.toString()}`}\n                    >\n                      <TolerationSelector\n                        effect={tol.effect}\n                        onEffectChange={(value) => {\n                          updateToleration(i, \"effect\", value);\n                        }}\n                        tolerationKey={tol.key}\n                        onTolerationKeyChange={(value) => {\n                          updateToleration(i, \"key\", value);\n                        }}\n                        operator={tol.operator}\n                        onOperatorChange={(value) => {\n                          updateToleration(i, \"operator\", value);\n                        }}\n                        value={tol.value}\n                        onValueChange={(value) => {\n                          updateToleration(i, \"value\", value);\n                        }}\n                        tolerationSeconds={tol.tolerationSeconds?.seconds || 0}\n                        onSecondsChange={(value) => {\n                          updateToleration(i, \"tolerationSeconds\", {\n                            seconds: value,\n                          });\n                        }}\n                        index={i}\n                      />\n                      <div className={\"overlayAction\"}>\n                        <IconButton\n                          size={\"small\"}\n                          onClick={() => {\n                            dispatch(addNewPoolToleration());\n                          }}\n                          disabled={i !== tolerations.length - 1}\n                        >\n                          <AddIcon />\n                        </IconButton>\n                      </div>\n\n                      <div className={\"overlayAction\"}>\n                        <IconButton\n                          size={\"small\"}\n                          onClick={() => dispatch(removePoolToleration(i))}\n                          disabled={tolerations.length <= 1}\n                        >\n                          <RemoveIcon />\n                        </IconButton>\n                      </div>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Affinity;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Button } from \"mds\";\nimport React from \"react\";\nimport { addPoolAsync } from \"./addPoolThunks\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\n\nconst AddPoolCreateButton = () => {\n  const dispatch = useAppDispatch();\n\n  const selectedStorageClass = useSelector(\n    (state: AppState) => state.addPool.setup.storageClass,\n  );\n  const validPages = useSelector((state: AppState) => state.addPool.validPages);\n\n  const sending = useSelector((state: AppState) => state.addPool.sending);\n  const requiredPages = [\"setup\", \"affinity\", \"configure\"];\n  const enabled =\n    !sending &&\n    selectedStorageClass !== \"\" &&\n    requiredPages.every((v) => validPages.includes(v));\n  return (\n    <Button\n      id={\"wizard-button-Create\"}\n      variant=\"callAction\"\n      onClick={() => {\n        dispatch(addPoolAsync());\n      }}\n      disabled={!enabled}\n      key={`button-AddTenant-Create`}\n      label={\"Create\"}\n    />\n  );\n};\n\nexport default AddPoolCreateButton;\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect } from \"react\";\nimport {\n  BackLink,\n  TenantsIcon,\n  PageLayout,\n  ScreenTitle,\n  Wizard,\n  WizardElement,\n  Box,\n  ProgressBar,\n  Grid,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { niceBytes } from \"../../../../../../common/utils\";\nimport { resetPoolForm } from \"./addPoolSlice\";\nimport PoolResources from \"./PoolResources\";\nimport PoolConfiguration from \"./PoolConfiguration\";\nimport PoolPodPlacement from \"./PoolPodPlacement\";\nimport AddPoolCreateButton from \"./AddPoolCreateButton\";\nimport PageHeaderWrapper from \"../../../../Common/PageHeaderWrapper/PageHeaderWrapper\";\n\nconst AddPool = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const sending = useSelector((state: AppState) => state.addPool.sending);\n  const navigateTo = useSelector((state: AppState) => state.addPool.navigateTo);\n\n  const poolsURL = `/namespaces/${tenant?.namespace || \"\"}/tenants/${\n    tenant?.name || \"\"\n  }/pools`;\n\n  useEffect(() => {\n    if (navigateTo !== \"\") {\n      const goTo = `${navigateTo}`;\n      dispatch(resetPoolForm());\n      navigate(goTo);\n    }\n  }, [navigateTo, navigate, dispatch]);\n\n  const cancelButton = {\n    label: \"Cancel\",\n    type: \"custom\" as \"to\" | \"custom\" | \"next\" | \"back\",\n    enabled: true,\n    action: () => {\n      dispatch(resetPoolForm());\n      navigate(poolsURL);\n    },\n  };\n\n  const createButton = {\n    componentRender: <AddPoolCreateButton key={\"add-pool-crate\"} />,\n  };\n\n  const wizardSteps: WizardElement[] = [\n    {\n      label: \"Setup\",\n      componentRender: <PoolResources />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Configuration\",\n      advancedOnly: true,\n      componentRender: <PoolConfiguration />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Pod Placement\",\n      advancedOnly: true,\n      componentRender: <PoolPodPlacement />,\n      buttons: [cancelButton, createButton],\n    },\n  ];\n\n  return (\n    <Fragment>\n      <Grid item xs={12}>\n        <PageHeaderWrapper\n          label={\n            <Fragment>\n              <BackLink\n                label={`Tenant Pools`}\n                onClick={() => navigate(poolsURL)}\n              />\n            </Fragment>\n          }\n        />\n        <PageLayout variant={\"constrained\"}>\n          <Box withBorders sx={{ padding: 0, borderBottom: 0 }}>\n            <ScreenTitle\n              icon={<TenantsIcon />}\n              title={`Add New Pool to ${tenant?.name || \"\"}`}\n              subTitle={\n                <Fragment>\n                  Namespace: {tenant?.namespace || \"\"} / Current Capacity:{\" \"}\n                  {niceBytes((tenant?.total_size || 0).toString(10))}\n                </Fragment>\n              }\n              actions={null}\n            />\n          </Box>\n          {sending && (\n            <Grid item xs={12}>\n              <ProgressBar />\n            </Grid>\n          )}\n          <Box\n            withBorders\n            sx={{ padding: 0, borderTop: 0, \"& .muted\": { fontSize: 13 } }}\n          >\n            <Wizard wizardSteps={wizardSteps} linearMode={false} />\n          </Box>\n        </PageLayout>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default AddPool;\n"],"names":["PoolResources","dispatch","useAppDispatch","tenant","useSelector","state","tenants","tenantInfo","storageClasses","addPool","numberOfNodes","setup","toString","storageClass","volumeSize","volumesPerServer","validationErrors","setValidationErrors","useState","instanceCapacity","parseInt","totalCapacity","useEffect","customAccountValidation","fieldKey","required","value","customValidation","isNaN","customValidationMessage","commonVal","commonFormValidation","isPoolPageValid","page","status","Object","keys","length","api","invoke","concat","namespace","then","res","newStorage","get","map","name","split","label","setPoolField","field","setPoolStorageClasses","catch","err","console","error","setFieldInfo","fieldName","_jsxs","Fragment","children","Box","className","sx","marginBottom","_jsx","H3Section","FormLayout","withBorders","containerPadding","InputBox","id","onChange","e","intValue","target","validity","valid","pattern","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","disabled","Select","options","display","justifyContent","marginLeft","gap","fontSize","fontWeight","textAlign","niceBytes","PoolConfiguration","securityContextEnabled","configuration","securityContext","customRuntime","runtimeClassName","updateField","useCallback","runAsUser","runAsGroup","fsGroup","cleanValidation","clearValidationError","Switch","checked","style","Grid","item","xs","marginRight","alignItems","flexFlow","type","min","runAsNonRoot","Affinity","podAffinity","affinity","nodeSelectorLabels","withPodAntiAffinity","keyValuePairs","nodeSelectorPairs","tolerations","loading","setLoading","keyValueMap","setKeyValueMap","keyOptions","setKeyOptions","k","push","setModalErrorSnackMessage","vl","filter","kvp","key","kvs","i","a","indexOf","join","splittedLabels","forEach","index","splitItem","updateToleration","alterToleration","setPoolTolerationInfo","tolerationValue","flex","RadioGroup","currentValue","selectorOptions","displayInColumn","container","newLKP","arrCp","setPoolKeyValuePairs","placeholder","v","IconButton","size","onClick","AddIcon","RemoveIcon","tol","_tol$tolerationSecond","TolerationSelector","effect","onEffectChange","tolerationKey","onTolerationKeyChange","operator","onOperatorChange","onValueChange","tolerationSeconds","seconds","onSecondsChange","addNewPoolToleration","removePoolToleration","AddPoolCreateButton","selectedStorageClass","validPages","enabled","sending","every","includes","Button","variant","addPoolAsync","AddPool","navigate","useNavigate","navigateTo","poolsURL","goTo","resetPoolForm","cancelButton","action","createButton","componentRender","wizardSteps","buttons","advancedOnly","PoolPodPlacement","PageHeaderWrapper","BackLink","PageLayout","padding","borderBottom","ScreenTitle","icon","TenantsIcon","title","subTitle","total_size","actions","ProgressBar","borderTop","Wizard","linearMode"],"sourceRoot":""}