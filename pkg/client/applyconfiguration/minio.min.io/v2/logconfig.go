// This file is part of MinIO Operator
// Copyright (c) 2021 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v1 "k8s.io/api/core/v1"
)

// LogConfigApplyConfiguration represents an declarative configuration of the LogConfig type for use
// with apply.
type LogConfigApplyConfiguration struct {
	Image                     *string                        `json:"image,omitempty"`
	Resources                 *v1.ResourceRequirements       `json:"resources,omitempty"`
	NodeSelector              map[string]string              `json:"nodeSelector,omitempty"`
	Affinity                  *v1.Affinity                   `json:"affinity,omitempty"`
	Tolerations               []v1.Toleration                `json:"tolerations,omitempty"`
	TopologySpreadConstraints []v1.TopologySpreadConstraint  `json:"topologySpreadConstraints,omitempty"`
	Annotations               map[string]string              `json:"annotations,omitempty"`
	Labels                    map[string]string              `json:"labels,omitempty"`
	Db                        *LogDbConfigApplyConfiguration `json:"db,omitempty"`
	Audit                     *AuditConfigApplyConfiguration `json:"audit,omitempty"`
	SecurityContext           *v1.PodSecurityContext         `json:"securityContext,omitempty"`
	ServiceAccountName        *string                        `json:"serviceAccountName,omitempty"`
	Env                       []v1.EnvVar                    `json:"env,omitempty"`
}

// LogConfigApplyConfiguration constructs an declarative configuration of the LogConfig type for use with
// apply.
func LogConfig() *LogConfigApplyConfiguration {
	return &LogConfigApplyConfiguration{}
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *LogConfigApplyConfiguration) WithImage(value string) *LogConfigApplyConfiguration {
	b.Image = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *LogConfigApplyConfiguration) WithResources(value v1.ResourceRequirements) *LogConfigApplyConfiguration {
	b.Resources = &value
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *LogConfigApplyConfiguration) WithNodeSelector(entries map[string]string) *LogConfigApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *LogConfigApplyConfiguration) WithAffinity(value v1.Affinity) *LogConfigApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *LogConfigApplyConfiguration) WithTolerations(values ...v1.Toleration) *LogConfigApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithTopologySpreadConstraints adds the given value to the TopologySpreadConstraints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TopologySpreadConstraints field.
func (b *LogConfigApplyConfiguration) WithTopologySpreadConstraints(values ...v1.TopologySpreadConstraint) *LogConfigApplyConfiguration {
	for i := range values {
		b.TopologySpreadConstraints = append(b.TopologySpreadConstraints, values[i])
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *LogConfigApplyConfiguration) WithAnnotations(entries map[string]string) *LogConfigApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *LogConfigApplyConfiguration) WithLabels(entries map[string]string) *LogConfigApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithDb sets the Db field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Db field is set to the value of the last call.
func (b *LogConfigApplyConfiguration) WithDb(value *LogDbConfigApplyConfiguration) *LogConfigApplyConfiguration {
	b.Db = value
	return b
}

// WithAudit sets the Audit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Audit field is set to the value of the last call.
func (b *LogConfigApplyConfiguration) WithAudit(value *AuditConfigApplyConfiguration) *LogConfigApplyConfiguration {
	b.Audit = value
	return b
}

// WithSecurityContext sets the SecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecurityContext field is set to the value of the last call.
func (b *LogConfigApplyConfiguration) WithSecurityContext(value v1.PodSecurityContext) *LogConfigApplyConfiguration {
	b.SecurityContext = &value
	return b
}

// WithServiceAccountName sets the ServiceAccountName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccountName field is set to the value of the last call.
func (b *LogConfigApplyConfiguration) WithServiceAccountName(value string) *LogConfigApplyConfiguration {
	b.ServiceAccountName = &value
	return b
}

// WithEnv adds the given value to the Env field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Env field.
func (b *LogConfigApplyConfiguration) WithEnv(values ...v1.EnvVar) *LogConfigApplyConfiguration {
	for i := range values {
		b.Env = append(b.Env, values[i])
	}
	return b
}
