// This file is part of MinIO Operator
// Copyright (c) 2021 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v2 "github.com/minio/operator/pkg/apis/minio.min.io/v2"
)

// PoolStatusApplyConfiguration represents an declarative configuration of the PoolStatus type for use
// with apply.
type PoolStatusApplyConfiguration struct {
	SSName                *string       `json:"ssName,omitempty"`
	State                 *v2.PoolState `json:"state,omitempty"`
	LegacySecurityContext *bool         `json:"legacySecurityContext,omitempty"`
}

// PoolStatusApplyConfiguration constructs an declarative configuration of the PoolStatus type for use with
// apply.
func PoolStatus() *PoolStatusApplyConfiguration {
	return &PoolStatusApplyConfiguration{}
}

// WithSSName sets the SSName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SSName field is set to the value of the last call.
func (b *PoolStatusApplyConfiguration) WithSSName(value string) *PoolStatusApplyConfiguration {
	b.SSName = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *PoolStatusApplyConfiguration) WithState(value v2.PoolState) *PoolStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithLegacySecurityContext sets the LegacySecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LegacySecurityContext field is set to the value of the last call.
func (b *PoolStatusApplyConfiguration) WithLegacySecurityContext(value bool) *PoolStatusApplyConfiguration {
	b.LegacySecurityContext = &value
	return b
}
