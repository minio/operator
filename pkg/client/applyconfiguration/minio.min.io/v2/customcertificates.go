// This file is part of MinIO Operator
// Copyright (c) 2021 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v2 "github.com/minio/operator/pkg/apis/minio.min.io/v2"
)

// CustomCertificatesApplyConfiguration represents an declarative configuration of the CustomCertificates type for use
// with apply.
type CustomCertificatesApplyConfiguration struct {
	Client   []*v2.CustomCertificateConfig `json:"client,omitempty"`
	Minio    []*v2.CustomCertificateConfig `json:"minio,omitempty"`
	MinioCAs []*v2.CustomCertificateConfig `json:"minioCAs,omitempty"`
}

// CustomCertificatesApplyConfiguration constructs an declarative configuration of the CustomCertificates type for use with
// apply.
func CustomCertificates() *CustomCertificatesApplyConfiguration {
	return &CustomCertificatesApplyConfiguration{}
}

// WithClient adds the given value to the Client field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Client field.
func (b *CustomCertificatesApplyConfiguration) WithClient(values ...**v2.CustomCertificateConfig) *CustomCertificatesApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithClient")
		}
		b.Client = append(b.Client, *values[i])
	}
	return b
}

// WithMinio adds the given value to the Minio field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Minio field.
func (b *CustomCertificatesApplyConfiguration) WithMinio(values ...**v2.CustomCertificateConfig) *CustomCertificatesApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMinio")
		}
		b.Minio = append(b.Minio, *values[i])
	}
	return b
}

// WithMinioCAs adds the given value to the MinioCAs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MinioCAs field.
func (b *CustomCertificatesApplyConfiguration) WithMinioCAs(values ...**v2.CustomCertificateConfig) *CustomCertificatesApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMinioCAs")
		}
		b.MinioCAs = append(b.MinioCAs, *values[i])
	}
	return b
}
