// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// FeaturesApplyConfiguration represents an declarative configuration of the Features type for use
// with apply.
type FeaturesApplyConfiguration struct {
	BucketDNS  *bool                            `json:"bucketDNS,omitempty"`
	Domains    *TenantDomainsApplyConfiguration `json:"domains,omitempty"`
	EnableSFTP *bool                            `json:"enableSFTP,omitempty"`
}

// FeaturesApplyConfiguration constructs an declarative configuration of the Features type for use with
// apply.
func Features() *FeaturesApplyConfiguration {
	return &FeaturesApplyConfiguration{}
}

// WithBucketDNS sets the BucketDNS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BucketDNS field is set to the value of the last call.
func (b *FeaturesApplyConfiguration) WithBucketDNS(value bool) *FeaturesApplyConfiguration {
	b.BucketDNS = &value
	return b
}

// WithDomains sets the Domains field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Domains field is set to the value of the last call.
func (b *FeaturesApplyConfiguration) WithDomains(value *TenantDomainsApplyConfiguration) *FeaturesApplyConfiguration {
	b.Domains = value
	return b
}

// WithEnableSFTP sets the EnableSFTP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableSFTP field is set to the value of the last call.
func (b *FeaturesApplyConfiguration) WithEnableSFTP(value bool) *FeaturesApplyConfiguration {
	b.EnableSFTP = &value
	return b
}
