// This file is part of MinIO Operator
// Copyright (c) 2021 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	miniominiov2 "github.com/minio/operator/pkg/apis/minio.min.io/v2"
	appsv1 "k8s.io/api/apps/v1"
	v1 "k8s.io/api/core/v1"
)

// TenantSpecApplyConfiguration represents an declarative configuration of the TenantSpec type for use
// with apply.
type TenantSpecApplyConfiguration struct {
	Pools                     []PoolApplyConfiguration                     `json:"pools,omitempty"`
	Image                     *string                                      `json:"image,omitempty"`
	ImagePullSecret           *v1.LocalObjectReference                     `json:"imagePullSecret,omitempty"`
	PodManagementPolicy       *appsv1.PodManagementPolicyType              `json:"podManagementPolicy,omitempty"`
	CredsSecret               *v1.LocalObjectReference                     `json:"credsSecret,omitempty"`
	Env                       []v1.EnvVar                                  `json:"env,omitempty"`
	ExternalCertSecret        []*miniominiov2.LocalCertificateReference    `json:"externalCertSecret,omitempty"`
	ExternalCaCertSecret      []*miniominiov2.LocalCertificateReference    `json:"externalCaCertSecret,omitempty"`
	ExternalClientCertSecret  *LocalCertificateReferenceApplyConfiguration `json:"externalClientCertSecret,omitempty"`
	ExternalClientCertSecrets []*miniominiov2.LocalCertificateReference    `json:"externalClientCertSecrets,omitempty"`
	Mountpath                 *string                                      `json:"mountPath,omitempty"`
	Subpath                   *string                                      `json:"subPath,omitempty"`
	RequestAutoCert           *bool                                        `json:"requestAutoCert,omitempty"`
	Liveness                  *v1.Probe                                    `json:"liveness,omitempty"`
	Readiness                 *v1.Probe                                    `json:"readiness,omitempty"`
	Startup                   *v1.Probe                                    `json:"startup,omitempty"`
	Features                  *FeaturesApplyConfiguration                  `json:"features,omitempty"`
	CertConfig                *CertificateConfigApplyConfiguration         `json:"certConfig,omitempty"`
	KES                       *KESConfigApplyConfiguration                 `json:"kes,omitempty"`
	PrometheusOperator        *bool                                        `json:"prometheusOperator,omitempty"`
	ServiceAccountName        *string                                      `json:"serviceAccountName,omitempty"`
	PriorityClassName         *string                                      `json:"priorityClassName,omitempty"`
	ImagePullPolicy           *v1.PullPolicy                               `json:"imagePullPolicy,omitempty"`
	SideCars                  *SideCarsApplyConfiguration                  `json:"sideCars,omitempty"`
	ExposeServices            *ExposeServicesApplyConfiguration            `json:"exposeServices,omitempty"`
	ServiceMetadata           *ServiceMetadataApplyConfiguration           `json:"serviceMetadata,omitempty"`
	Users                     []*v1.LocalObjectReference                   `json:"users,omitempty"`
	Buckets                   []BucketApplyConfiguration                   `json:"buckets,omitempty"`
	Logging                   *LoggingApplyConfiguration                   `json:"logging,omitempty"`
	Configuration             *v1.LocalObjectReference                     `json:"configuration,omitempty"`
}

// TenantSpecApplyConfiguration constructs an declarative configuration of the TenantSpec type for use with
// apply.
func TenantSpec() *TenantSpecApplyConfiguration {
	return &TenantSpecApplyConfiguration{}
}

// WithPools adds the given value to the Pools field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Pools field.
func (b *TenantSpecApplyConfiguration) WithPools(values ...*PoolApplyConfiguration) *TenantSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPools")
		}
		b.Pools = append(b.Pools, *values[i])
	}
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithImage(value string) *TenantSpecApplyConfiguration {
	b.Image = &value
	return b
}

// WithImagePullSecret sets the ImagePullSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImagePullSecret field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithImagePullSecret(value v1.LocalObjectReference) *TenantSpecApplyConfiguration {
	b.ImagePullSecret = &value
	return b
}

// WithPodManagementPolicy sets the PodManagementPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodManagementPolicy field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithPodManagementPolicy(value appsv1.PodManagementPolicyType) *TenantSpecApplyConfiguration {
	b.PodManagementPolicy = &value
	return b
}

// WithCredsSecret sets the CredsSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CredsSecret field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithCredsSecret(value v1.LocalObjectReference) *TenantSpecApplyConfiguration {
	b.CredsSecret = &value
	return b
}

// WithEnv adds the given value to the Env field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Env field.
func (b *TenantSpecApplyConfiguration) WithEnv(values ...v1.EnvVar) *TenantSpecApplyConfiguration {
	for i := range values {
		b.Env = append(b.Env, values[i])
	}
	return b
}

// WithExternalCertSecret adds the given value to the ExternalCertSecret field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalCertSecret field.
func (b *TenantSpecApplyConfiguration) WithExternalCertSecret(values ...**miniominiov2.LocalCertificateReference) *TenantSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithExternalCertSecret")
		}
		b.ExternalCertSecret = append(b.ExternalCertSecret, *values[i])
	}
	return b
}

// WithExternalCaCertSecret adds the given value to the ExternalCaCertSecret field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalCaCertSecret field.
func (b *TenantSpecApplyConfiguration) WithExternalCaCertSecret(values ...**miniominiov2.LocalCertificateReference) *TenantSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithExternalCaCertSecret")
		}
		b.ExternalCaCertSecret = append(b.ExternalCaCertSecret, *values[i])
	}
	return b
}

// WithExternalClientCertSecret sets the ExternalClientCertSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalClientCertSecret field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithExternalClientCertSecret(value *LocalCertificateReferenceApplyConfiguration) *TenantSpecApplyConfiguration {
	b.ExternalClientCertSecret = value
	return b
}

// WithExternalClientCertSecrets adds the given value to the ExternalClientCertSecrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalClientCertSecrets field.
func (b *TenantSpecApplyConfiguration) WithExternalClientCertSecrets(values ...**miniominiov2.LocalCertificateReference) *TenantSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithExternalClientCertSecrets")
		}
		b.ExternalClientCertSecrets = append(b.ExternalClientCertSecrets, *values[i])
	}
	return b
}

// WithMountpath sets the Mountpath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mountpath field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithMountpath(value string) *TenantSpecApplyConfiguration {
	b.Mountpath = &value
	return b
}

// WithSubpath sets the Subpath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subpath field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithSubpath(value string) *TenantSpecApplyConfiguration {
	b.Subpath = &value
	return b
}

// WithRequestAutoCert sets the RequestAutoCert field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RequestAutoCert field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithRequestAutoCert(value bool) *TenantSpecApplyConfiguration {
	b.RequestAutoCert = &value
	return b
}

// WithLiveness sets the Liveness field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Liveness field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithLiveness(value v1.Probe) *TenantSpecApplyConfiguration {
	b.Liveness = &value
	return b
}

// WithReadiness sets the Readiness field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Readiness field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithReadiness(value v1.Probe) *TenantSpecApplyConfiguration {
	b.Readiness = &value
	return b
}

// WithStartup sets the Startup field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Startup field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithStartup(value v1.Probe) *TenantSpecApplyConfiguration {
	b.Startup = &value
	return b
}

// WithFeatures sets the Features field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Features field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithFeatures(value *FeaturesApplyConfiguration) *TenantSpecApplyConfiguration {
	b.Features = value
	return b
}

// WithCertConfig sets the CertConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CertConfig field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithCertConfig(value *CertificateConfigApplyConfiguration) *TenantSpecApplyConfiguration {
	b.CertConfig = value
	return b
}

// WithKES sets the KES field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KES field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithKES(value *KESConfigApplyConfiguration) *TenantSpecApplyConfiguration {
	b.KES = value
	return b
}

// WithPrometheusOperator sets the PrometheusOperator field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrometheusOperator field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithPrometheusOperator(value bool) *TenantSpecApplyConfiguration {
	b.PrometheusOperator = &value
	return b
}

// WithServiceAccountName sets the ServiceAccountName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccountName field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithServiceAccountName(value string) *TenantSpecApplyConfiguration {
	b.ServiceAccountName = &value
	return b
}

// WithPriorityClassName sets the PriorityClassName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PriorityClassName field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithPriorityClassName(value string) *TenantSpecApplyConfiguration {
	b.PriorityClassName = &value
	return b
}

// WithImagePullPolicy sets the ImagePullPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImagePullPolicy field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithImagePullPolicy(value v1.PullPolicy) *TenantSpecApplyConfiguration {
	b.ImagePullPolicy = &value
	return b
}

// WithSideCars sets the SideCars field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SideCars field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithSideCars(value *SideCarsApplyConfiguration) *TenantSpecApplyConfiguration {
	b.SideCars = value
	return b
}

// WithExposeServices sets the ExposeServices field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExposeServices field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithExposeServices(value *ExposeServicesApplyConfiguration) *TenantSpecApplyConfiguration {
	b.ExposeServices = value
	return b
}

// WithServiceMetadata sets the ServiceMetadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceMetadata field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithServiceMetadata(value *ServiceMetadataApplyConfiguration) *TenantSpecApplyConfiguration {
	b.ServiceMetadata = value
	return b
}

// WithUsers adds the given value to the Users field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Users field.
func (b *TenantSpecApplyConfiguration) WithUsers(values ...*v1.LocalObjectReference) *TenantSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithUsers")
		}
		b.Users = append(b.Users, values[i])
	}
	return b
}

// WithBuckets adds the given value to the Buckets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Buckets field.
func (b *TenantSpecApplyConfiguration) WithBuckets(values ...*BucketApplyConfiguration) *TenantSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithBuckets")
		}
		b.Buckets = append(b.Buckets, *values[i])
	}
	return b
}

// WithLogging sets the Logging field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Logging field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithLogging(value *LoggingApplyConfiguration) *TenantSpecApplyConfiguration {
	b.Logging = value
	return b
}

// WithConfiguration sets the Configuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Configuration field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithConfiguration(value v1.LocalObjectReference) *TenantSpecApplyConfiguration {
	b.Configuration = &value
	return b
}
