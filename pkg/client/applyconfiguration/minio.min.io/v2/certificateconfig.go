// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// CertificateConfigApplyConfiguration represents an declarative configuration of the CertificateConfig type for use
// with apply.
type CertificateConfigApplyConfiguration struct {
	CommonName       *string  `json:"commonName,omitempty"`
	OrganizationName []string `json:"organizationName,omitempty"`
	DNSNames         []string `json:"dnsNames,omitempty"`
}

// CertificateConfigApplyConfiguration constructs an declarative configuration of the CertificateConfig type for use with
// apply.
func CertificateConfig() *CertificateConfigApplyConfiguration {
	return &CertificateConfigApplyConfiguration{}
}

// WithCommonName sets the CommonName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CommonName field is set to the value of the last call.
func (b *CertificateConfigApplyConfiguration) WithCommonName(value string) *CertificateConfigApplyConfiguration {
	b.CommonName = &value
	return b
}

// WithOrganizationName adds the given value to the OrganizationName field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OrganizationName field.
func (b *CertificateConfigApplyConfiguration) WithOrganizationName(values ...string) *CertificateConfigApplyConfiguration {
	for i := range values {
		b.OrganizationName = append(b.OrganizationName, values[i])
	}
	return b
}

// WithDNSNames adds the given value to the DNSNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DNSNames field.
func (b *CertificateConfigApplyConfiguration) WithDNSNames(values ...string) *CertificateConfigApplyConfiguration {
	for i := range values {
		b.DNSNames = append(b.DNSNames, values[i])
	}
	return b
}
