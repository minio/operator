// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v1 "k8s.io/api/core/v1"
)

// KESConfigApplyConfiguration represents an declarative configuration of the KESConfig type for use
// with apply.
type KESConfigApplyConfiguration struct {
	Replicas                  *int32                                       `json:"replicas,omitempty"`
	Image                     *string                                      `json:"image,omitempty"`
	ImagePullPolicy           *v1.PullPolicy                               `json:"imagePullPolicy,omitempty"`
	ServiceAccountName        *string                                      `json:"serviceAccountName,omitempty"`
	Configuration             *v1.LocalObjectReference                     `json:"kesSecret,omitempty"`
	ExternalCertSecret        *LocalCertificateReferenceApplyConfiguration `json:"externalCertSecret,omitempty"`
	ClientCertSecret          *LocalCertificateReferenceApplyConfiguration `json:"clientCertSecret,omitempty"`
	GCPCredentialSecretName   *string                                      `json:"gcpCredentialSecretName,omitempty"`
	GCPWorkloadIdentityPool   *string                                      `json:"gcpWorkloadIdentityPool,omitempty"`
	Annotations               map[string]string                            `json:"annotations,omitempty"`
	Labels                    map[string]string                            `json:"labels,omitempty"`
	Resources                 *v1.ResourceRequirements                     `json:"resources,omitempty"`
	NodeSelector              map[string]string                            `json:"nodeSelector,omitempty"`
	Tolerations               []v1.Toleration                              `json:"tolerations,omitempty"`
	Affinity                  *v1.Affinity                                 `json:"affinity,omitempty"`
	TopologySpreadConstraints []v1.TopologySpreadConstraint                `json:"topologySpreadConstraints,omitempty"`
	KeyName                   *string                                      `json:"keyName,omitempty"`
	SecurityContext           *v1.PodSecurityContext                       `json:"securityContext,omitempty"`
	Env                       []v1.EnvVar                                  `json:"env,omitempty"`
}

// KESConfigApplyConfiguration constructs an declarative configuration of the KESConfig type for use with
// apply.
func KESConfig() *KESConfigApplyConfiguration {
	return &KESConfigApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithReplicas(value int32) *KESConfigApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithImage(value string) *KESConfigApplyConfiguration {
	b.Image = &value
	return b
}

// WithImagePullPolicy sets the ImagePullPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImagePullPolicy field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithImagePullPolicy(value v1.PullPolicy) *KESConfigApplyConfiguration {
	b.ImagePullPolicy = &value
	return b
}

// WithServiceAccountName sets the ServiceAccountName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccountName field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithServiceAccountName(value string) *KESConfigApplyConfiguration {
	b.ServiceAccountName = &value
	return b
}

// WithConfiguration sets the Configuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Configuration field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithConfiguration(value v1.LocalObjectReference) *KESConfigApplyConfiguration {
	b.Configuration = &value
	return b
}

// WithExternalCertSecret sets the ExternalCertSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalCertSecret field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithExternalCertSecret(value *LocalCertificateReferenceApplyConfiguration) *KESConfigApplyConfiguration {
	b.ExternalCertSecret = value
	return b
}

// WithClientCertSecret sets the ClientCertSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientCertSecret field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithClientCertSecret(value *LocalCertificateReferenceApplyConfiguration) *KESConfigApplyConfiguration {
	b.ClientCertSecret = value
	return b
}

// WithGCPCredentialSecretName sets the GCPCredentialSecretName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GCPCredentialSecretName field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithGCPCredentialSecretName(value string) *KESConfigApplyConfiguration {
	b.GCPCredentialSecretName = &value
	return b
}

// WithGCPWorkloadIdentityPool sets the GCPWorkloadIdentityPool field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GCPWorkloadIdentityPool field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithGCPWorkloadIdentityPool(value string) *KESConfigApplyConfiguration {
	b.GCPWorkloadIdentityPool = &value
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *KESConfigApplyConfiguration) WithAnnotations(entries map[string]string) *KESConfigApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *KESConfigApplyConfiguration) WithLabels(entries map[string]string) *KESConfigApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithResources(value v1.ResourceRequirements) *KESConfigApplyConfiguration {
	b.Resources = &value
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *KESConfigApplyConfiguration) WithNodeSelector(entries map[string]string) *KESConfigApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *KESConfigApplyConfiguration) WithTolerations(values ...v1.Toleration) *KESConfigApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithAffinity(value v1.Affinity) *KESConfigApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithTopologySpreadConstraints adds the given value to the TopologySpreadConstraints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TopologySpreadConstraints field.
func (b *KESConfigApplyConfiguration) WithTopologySpreadConstraints(values ...v1.TopologySpreadConstraint) *KESConfigApplyConfiguration {
	for i := range values {
		b.TopologySpreadConstraints = append(b.TopologySpreadConstraints, values[i])
	}
	return b
}

// WithKeyName sets the KeyName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KeyName field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithKeyName(value string) *KESConfigApplyConfiguration {
	b.KeyName = &value
	return b
}

// WithSecurityContext sets the SecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecurityContext field is set to the value of the last call.
func (b *KESConfigApplyConfiguration) WithSecurityContext(value v1.PodSecurityContext) *KESConfigApplyConfiguration {
	b.SecurityContext = &value
	return b
}

// WithEnv adds the given value to the Env field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Env field.
func (b *KESConfigApplyConfiguration) WithEnv(values ...v1.EnvVar) *KESConfigApplyConfiguration {
	for i := range values {
		b.Env = append(b.Env, values[i])
	}
	return b
}
