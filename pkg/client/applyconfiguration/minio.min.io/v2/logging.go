// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// LoggingApplyConfiguration represents an declarative configuration of the Logging type for use
// with apply.
type LoggingApplyConfiguration struct {
	JSON      *bool `json:"json,omitempty"`
	Anonymous *bool `json:"anonymous,omitempty"`
	Quiet     *bool `json:"quiet,omitempty"`
}

// LoggingApplyConfiguration constructs an declarative configuration of the Logging type for use with
// apply.
func Logging() *LoggingApplyConfiguration {
	return &LoggingApplyConfiguration{}
}

// WithJSON sets the JSON field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the JSON field is set to the value of the last call.
func (b *LoggingApplyConfiguration) WithJSON(value bool) *LoggingApplyConfiguration {
	b.JSON = &value
	return b
}

// WithAnonymous sets the Anonymous field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Anonymous field is set to the value of the last call.
func (b *LoggingApplyConfiguration) WithAnonymous(value bool) *LoggingApplyConfiguration {
	b.Anonymous = &value
	return b
}

// WithQuiet sets the Quiet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Quiet field is set to the value of the last call.
func (b *LoggingApplyConfiguration) WithQuiet(value bool) *LoggingApplyConfiguration {
	b.Quiet = &value
	return b
}
