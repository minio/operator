// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v1 "k8s.io/api/core/v1"
)

// PoolApplyConfiguration represents an declarative configuration of the Pool type for use
// with apply.
type PoolApplyConfiguration struct {
	Name                      *string                       `json:"name,omitempty"`
	Servers                   *int32                        `json:"servers,omitempty"`
	VolumesPerServer          *int32                        `json:"volumesPerServer,omitempty"`
	VolumeClaimTemplate       *v1.PersistentVolumeClaim     `json:"volumeClaimTemplate,omitempty"`
	Resources                 *v1.ResourceRequirements      `json:"resources,omitempty"`
	NodeSelector              map[string]string             `json:"nodeSelector,omitempty"`
	Affinity                  *v1.Affinity                  `json:"affinity,omitempty"`
	Tolerations               []v1.Toleration               `json:"tolerations,omitempty"`
	TopologySpreadConstraints []v1.TopologySpreadConstraint `json:"topologySpreadConstraints,omitempty"`
	SecurityContext           *v1.PodSecurityContext        `json:"securityContext,omitempty"`
	ContainerSecurityContext  *v1.SecurityContext           `json:"containerSecurityContext,omitempty"`
	Annotations               map[string]string             `json:"annotations,omitempty"`
	Labels                    map[string]string             `json:"labels,omitempty"`
	RuntimeClassName          *string                       `json:"runtimeClassName,omitempty"`
	ReclaimStorage            *bool                         `json:"reclaimStorage,omitempty"`
}

// PoolApplyConfiguration constructs an declarative configuration of the Pool type for use with
// apply.
func Pool() *PoolApplyConfiguration {
	return &PoolApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *PoolApplyConfiguration) WithName(value string) *PoolApplyConfiguration {
	b.Name = &value
	return b
}

// WithServers sets the Servers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Servers field is set to the value of the last call.
func (b *PoolApplyConfiguration) WithServers(value int32) *PoolApplyConfiguration {
	b.Servers = &value
	return b
}

// WithVolumesPerServer sets the VolumesPerServer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumesPerServer field is set to the value of the last call.
func (b *PoolApplyConfiguration) WithVolumesPerServer(value int32) *PoolApplyConfiguration {
	b.VolumesPerServer = &value
	return b
}

// WithVolumeClaimTemplate sets the VolumeClaimTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeClaimTemplate field is set to the value of the last call.
func (b *PoolApplyConfiguration) WithVolumeClaimTemplate(value v1.PersistentVolumeClaim) *PoolApplyConfiguration {
	b.VolumeClaimTemplate = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *PoolApplyConfiguration) WithResources(value v1.ResourceRequirements) *PoolApplyConfiguration {
	b.Resources = &value
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *PoolApplyConfiguration) WithNodeSelector(entries map[string]string) *PoolApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *PoolApplyConfiguration) WithAffinity(value v1.Affinity) *PoolApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *PoolApplyConfiguration) WithTolerations(values ...v1.Toleration) *PoolApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithTopologySpreadConstraints adds the given value to the TopologySpreadConstraints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TopologySpreadConstraints field.
func (b *PoolApplyConfiguration) WithTopologySpreadConstraints(values ...v1.TopologySpreadConstraint) *PoolApplyConfiguration {
	for i := range values {
		b.TopologySpreadConstraints = append(b.TopologySpreadConstraints, values[i])
	}
	return b
}

// WithSecurityContext sets the SecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecurityContext field is set to the value of the last call.
func (b *PoolApplyConfiguration) WithSecurityContext(value v1.PodSecurityContext) *PoolApplyConfiguration {
	b.SecurityContext = &value
	return b
}

// WithContainerSecurityContext sets the ContainerSecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ContainerSecurityContext field is set to the value of the last call.
func (b *PoolApplyConfiguration) WithContainerSecurityContext(value v1.SecurityContext) *PoolApplyConfiguration {
	b.ContainerSecurityContext = &value
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *PoolApplyConfiguration) WithAnnotations(entries map[string]string) *PoolApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *PoolApplyConfiguration) WithLabels(entries map[string]string) *PoolApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithRuntimeClassName sets the RuntimeClassName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RuntimeClassName field is set to the value of the last call.
func (b *PoolApplyConfiguration) WithRuntimeClassName(value string) *PoolApplyConfiguration {
	b.RuntimeClassName = &value
	return b
}

// WithReclaimStorage sets the ReclaimStorage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReclaimStorage field is set to the value of the last call.
func (b *PoolApplyConfiguration) WithReclaimStorage(value bool) *PoolApplyConfiguration {
	b.ReclaimStorage = &value
	return b
}
