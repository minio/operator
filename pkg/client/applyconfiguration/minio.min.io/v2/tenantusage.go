// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// TenantUsageApplyConfiguration represents an declarative configuration of the TenantUsage type for use
// with apply.
type TenantUsageApplyConfiguration struct {
	Capacity    *int64                        `json:"capacity,omitempty"`
	RawCapacity *int64                        `json:"rawCapacity,omitempty"`
	Usage       *int64                        `json:"usage,omitempty"`
	RawUsage    *int64                        `json:"rawUsage,omitempty"`
	Tiers       []TierUsageApplyConfiguration `json:"tiers,omitempty"`
}

// TenantUsageApplyConfiguration constructs an declarative configuration of the TenantUsage type for use with
// apply.
func TenantUsage() *TenantUsageApplyConfiguration {
	return &TenantUsageApplyConfiguration{}
}

// WithCapacity sets the Capacity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Capacity field is set to the value of the last call.
func (b *TenantUsageApplyConfiguration) WithCapacity(value int64) *TenantUsageApplyConfiguration {
	b.Capacity = &value
	return b
}

// WithRawCapacity sets the RawCapacity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RawCapacity field is set to the value of the last call.
func (b *TenantUsageApplyConfiguration) WithRawCapacity(value int64) *TenantUsageApplyConfiguration {
	b.RawCapacity = &value
	return b
}

// WithUsage sets the Usage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Usage field is set to the value of the last call.
func (b *TenantUsageApplyConfiguration) WithUsage(value int64) *TenantUsageApplyConfiguration {
	b.Usage = &value
	return b
}

// WithRawUsage sets the RawUsage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RawUsage field is set to the value of the last call.
func (b *TenantUsageApplyConfiguration) WithRawUsage(value int64) *TenantUsageApplyConfiguration {
	b.RawUsage = &value
	return b
}

// WithTiers adds the given value to the Tiers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tiers field.
func (b *TenantUsageApplyConfiguration) WithTiers(values ...*TierUsageApplyConfiguration) *TenantUsageApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTiers")
		}
		b.Tiers = append(b.Tiers, *values[i])
	}
	return b
}
