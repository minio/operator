// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v1 "k8s.io/api/core/v1"
)

// SideCarsApplyConfiguration represents an declarative configuration of the SideCars type for use
// with apply.
type SideCarsApplyConfiguration struct {
	Containers           []v1.Container             `json:"containers,omitempty"`
	VolumeClaimTemplates []v1.PersistentVolumeClaim `json:"volumeClaimTemplates,omitempty"`
	Volumes              []v1.Volume                `json:"volumes,omitempty"`
	Resources            *v1.ResourceRequirements   `json:"resources,omitempty"`
}

// SideCarsApplyConfiguration constructs an declarative configuration of the SideCars type for use with
// apply.
func SideCars() *SideCarsApplyConfiguration {
	return &SideCarsApplyConfiguration{}
}

// WithContainers adds the given value to the Containers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Containers field.
func (b *SideCarsApplyConfiguration) WithContainers(values ...v1.Container) *SideCarsApplyConfiguration {
	for i := range values {
		b.Containers = append(b.Containers, values[i])
	}
	return b
}

// WithVolumeClaimTemplates adds the given value to the VolumeClaimTemplates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VolumeClaimTemplates field.
func (b *SideCarsApplyConfiguration) WithVolumeClaimTemplates(values ...v1.PersistentVolumeClaim) *SideCarsApplyConfiguration {
	for i := range values {
		b.VolumeClaimTemplates = append(b.VolumeClaimTemplates, values[i])
	}
	return b
}

// WithVolumes adds the given value to the Volumes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Volumes field.
func (b *SideCarsApplyConfiguration) WithVolumes(values ...v1.Volume) *SideCarsApplyConfiguration {
	for i := range values {
		b.Volumes = append(b.Volumes, values[i])
	}
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *SideCarsApplyConfiguration) WithResources(value v1.ResourceRequirements) *SideCarsApplyConfiguration {
	b.Resources = &value
	return b
}
