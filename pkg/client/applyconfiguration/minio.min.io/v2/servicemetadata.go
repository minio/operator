// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// ServiceMetadataApplyConfiguration represents an declarative configuration of the ServiceMetadata type for use
// with apply.
type ServiceMetadataApplyConfiguration struct {
	MinIOServiceLabels        map[string]string `json:"minioServiceLabels,omitempty"`
	MinIOServiceAnnotations   map[string]string `json:"minioServiceAnnotations,omitempty"`
	ConsoleServiceLabels      map[string]string `json:"consoleServiceLabels,omitempty"`
	ConsoleServiceAnnotations map[string]string `json:"consoleServiceAnnotations,omitempty"`
}

// ServiceMetadataApplyConfiguration constructs an declarative configuration of the ServiceMetadata type for use with
// apply.
func ServiceMetadata() *ServiceMetadataApplyConfiguration {
	return &ServiceMetadataApplyConfiguration{}
}

// WithMinIOServiceLabels puts the entries into the MinIOServiceLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the MinIOServiceLabels field,
// overwriting an existing map entries in MinIOServiceLabels field with the same key.
func (b *ServiceMetadataApplyConfiguration) WithMinIOServiceLabels(entries map[string]string) *ServiceMetadataApplyConfiguration {
	if b.MinIOServiceLabels == nil && len(entries) > 0 {
		b.MinIOServiceLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.MinIOServiceLabels[k] = v
	}
	return b
}

// WithMinIOServiceAnnotations puts the entries into the MinIOServiceAnnotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the MinIOServiceAnnotations field,
// overwriting an existing map entries in MinIOServiceAnnotations field with the same key.
func (b *ServiceMetadataApplyConfiguration) WithMinIOServiceAnnotations(entries map[string]string) *ServiceMetadataApplyConfiguration {
	if b.MinIOServiceAnnotations == nil && len(entries) > 0 {
		b.MinIOServiceAnnotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.MinIOServiceAnnotations[k] = v
	}
	return b
}

// WithConsoleServiceLabels puts the entries into the ConsoleServiceLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ConsoleServiceLabels field,
// overwriting an existing map entries in ConsoleServiceLabels field with the same key.
func (b *ServiceMetadataApplyConfiguration) WithConsoleServiceLabels(entries map[string]string) *ServiceMetadataApplyConfiguration {
	if b.ConsoleServiceLabels == nil && len(entries) > 0 {
		b.ConsoleServiceLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ConsoleServiceLabels[k] = v
	}
	return b
}

// WithConsoleServiceAnnotations puts the entries into the ConsoleServiceAnnotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ConsoleServiceAnnotations field,
// overwriting an existing map entries in ConsoleServiceAnnotations field with the same key.
func (b *ServiceMetadataApplyConfiguration) WithConsoleServiceAnnotations(entries map[string]string) *ServiceMetadataApplyConfiguration {
	if b.ConsoleServiceAnnotations == nil && len(entries) > 0 {
		b.ConsoleServiceAnnotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ConsoleServiceAnnotations[k] = v
	}
	return b
}
