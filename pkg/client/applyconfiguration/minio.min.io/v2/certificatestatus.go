// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// CertificateStatusApplyConfiguration represents an declarative configuration of the CertificateStatus type for use
// with apply.
type CertificateStatusApplyConfiguration struct {
	AutoCertEnabled    *bool                                 `json:"autoCertEnabled,omitempty"`
	CustomCertificates *CustomCertificatesApplyConfiguration `json:"customCertificates,omitempty"`
}

// CertificateStatusApplyConfiguration constructs an declarative configuration of the CertificateStatus type for use with
// apply.
func CertificateStatus() *CertificateStatusApplyConfiguration {
	return &CertificateStatusApplyConfiguration{}
}

// WithAutoCertEnabled sets the AutoCertEnabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AutoCertEnabled field is set to the value of the last call.
func (b *CertificateStatusApplyConfiguration) WithAutoCertEnabled(value bool) *CertificateStatusApplyConfiguration {
	b.AutoCertEnabled = &value
	return b
}

// WithCustomCertificates sets the CustomCertificates field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CustomCertificates field is set to the value of the last call.
func (b *CertificateStatusApplyConfiguration) WithCustomCertificates(value *CustomCertificatesApplyConfiguration) *CertificateStatusApplyConfiguration {
	b.CustomCertificates = value
	return b
}
