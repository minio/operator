// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	jobminiov1alpha1 "github.com/minio/operator/pkg/apis/job.min.io/v1alpha1"
)

// MinIOJobSpecApplyConfiguration represents an declarative configuration of the MinIOJobSpec type for use
// with apply.
type MinIOJobSpecApplyConfiguration struct {
	ServiceAccountName *string                           `json:"serviceAccountName,omitempty"`
	TenantRef          *TenantRefApplyConfiguration      `json:"tenant,omitempty"`
	Execution          *jobminiov1alpha1.Execution       `json:"execution,omitempty"`
	FailureStrategy    *jobminiov1alpha1.FailureStrategy `json:"failureStrategy,omitempty"`
	Commands           []CommandSpecApplyConfiguration   `json:"commands,omitempty"`
}

// MinIOJobSpecApplyConfiguration constructs an declarative configuration of the MinIOJobSpec type for use with
// apply.
func MinIOJobSpec() *MinIOJobSpecApplyConfiguration {
	return &MinIOJobSpecApplyConfiguration{}
}

// WithServiceAccountName sets the ServiceAccountName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccountName field is set to the value of the last call.
func (b *MinIOJobSpecApplyConfiguration) WithServiceAccountName(value string) *MinIOJobSpecApplyConfiguration {
	b.ServiceAccountName = &value
	return b
}

// WithTenantRef sets the TenantRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TenantRef field is set to the value of the last call.
func (b *MinIOJobSpecApplyConfiguration) WithTenantRef(value *TenantRefApplyConfiguration) *MinIOJobSpecApplyConfiguration {
	b.TenantRef = value
	return b
}

// WithExecution sets the Execution field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Execution field is set to the value of the last call.
func (b *MinIOJobSpecApplyConfiguration) WithExecution(value jobminiov1alpha1.Execution) *MinIOJobSpecApplyConfiguration {
	b.Execution = &value
	return b
}

// WithFailureStrategy sets the FailureStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailureStrategy field is set to the value of the last call.
func (b *MinIOJobSpecApplyConfiguration) WithFailureStrategy(value jobminiov1alpha1.FailureStrategy) *MinIOJobSpecApplyConfiguration {
	b.FailureStrategy = &value
	return b
}

// WithCommands adds the given value to the Commands field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Commands field.
func (b *MinIOJobSpecApplyConfiguration) WithCommands(values ...*CommandSpecApplyConfiguration) *MinIOJobSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithCommands")
		}
		b.Commands = append(b.Commands, *values[i])
	}
	return b
}
