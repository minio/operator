// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// MinIOJobStatusApplyConfiguration represents an declarative configuration of the MinIOJobStatus type for use
// with apply.
type MinIOJobStatusApplyConfiguration struct {
	Phase          *string                           `json:"phase,omitempty"`
	CommandsStatus []CommandStatusApplyConfiguration `json:"commands,omitempty"`
}

// MinIOJobStatusApplyConfiguration constructs an declarative configuration of the MinIOJobStatus type for use with
// apply.
func MinIOJobStatus() *MinIOJobStatusApplyConfiguration {
	return &MinIOJobStatusApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *MinIOJobStatusApplyConfiguration) WithPhase(value string) *MinIOJobStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithCommandsStatus adds the given value to the CommandsStatus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CommandsStatus field.
func (b *MinIOJobStatusApplyConfiguration) WithCommandsStatus(values ...*CommandStatusApplyConfiguration) *MinIOJobStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithCommandsStatus")
		}
		b.CommandsStatus = append(b.CommandsStatus, *values[i])
	}
	return b
}
