// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// CommandSpecApplyConfiguration represents an declarative configuration of the CommandSpec type for use
// with apply.
type CommandSpecApplyConfiguration struct {
	Operation *string  `json:"op,omitempty"`
	Args      []string `json:"args,omitempty"`
	DependsOn []string `json:"dependsOn,omitempty"`
}

// CommandSpecApplyConfiguration constructs an declarative configuration of the CommandSpec type for use with
// apply.
func CommandSpec() *CommandSpecApplyConfiguration {
	return &CommandSpecApplyConfiguration{}
}

// WithOperation sets the Operation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Operation field is set to the value of the last call.
func (b *CommandSpecApplyConfiguration) WithOperation(value string) *CommandSpecApplyConfiguration {
	b.Operation = &value
	return b
}

// WithArgs adds the given value to the Args field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Args field.
func (b *CommandSpecApplyConfiguration) WithArgs(values ...string) *CommandSpecApplyConfiguration {
	for i := range values {
		b.Args = append(b.Args, values[i])
	}
	return b
}

// WithDependsOn adds the given value to the DependsOn field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DependsOn field.
func (b *CommandSpecApplyConfiguration) WithDependsOn(values ...string) *CommandSpecApplyConfiguration {
	for i := range values {
		b.DependsOn = append(b.DependsOn, values[i])
	}
	return b
}
