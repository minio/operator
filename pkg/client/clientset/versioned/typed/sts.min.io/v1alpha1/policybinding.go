// This file is part of MinIO Operator
// Copyright (c) 2024 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "github.com/minio/operator/pkg/apis/sts.min.io/v1alpha1"
	stsminiov1alpha1 "github.com/minio/operator/pkg/client/applyconfiguration/sts.min.io/v1alpha1"
	scheme "github.com/minio/operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// PolicyBindingsGetter has a method to return a PolicyBindingInterface.
// A group's client should implement this interface.
type PolicyBindingsGetter interface {
	PolicyBindings(namespace string) PolicyBindingInterface
}

// PolicyBindingInterface has methods to work with PolicyBinding resources.
type PolicyBindingInterface interface {
	Create(ctx context.Context, policyBinding *v1alpha1.PolicyBinding, opts v1.CreateOptions) (*v1alpha1.PolicyBinding, error)
	Update(ctx context.Context, policyBinding *v1alpha1.PolicyBinding, opts v1.UpdateOptions) (*v1alpha1.PolicyBinding, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, policyBinding *v1alpha1.PolicyBinding, opts v1.UpdateOptions) (*v1alpha1.PolicyBinding, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.PolicyBinding, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.PolicyBindingList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.PolicyBinding, err error)
	Apply(ctx context.Context, policyBinding *stsminiov1alpha1.PolicyBindingApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.PolicyBinding, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, policyBinding *stsminiov1alpha1.PolicyBindingApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.PolicyBinding, err error)
	PolicyBindingExpansion
}

// policyBindings implements PolicyBindingInterface
type policyBindings struct {
	*gentype.ClientWithListAndApply[*v1alpha1.PolicyBinding, *v1alpha1.PolicyBindingList, *stsminiov1alpha1.PolicyBindingApplyConfiguration]
}

// newPolicyBindings returns a PolicyBindings
func newPolicyBindings(c *StsV1alpha1Client, namespace string) *policyBindings {
	return &policyBindings{
		gentype.NewClientWithListAndApply[*v1alpha1.PolicyBinding, *v1alpha1.PolicyBindingList, *stsminiov1alpha1.PolicyBindingApplyConfiguration](
			"policybindings",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1alpha1.PolicyBinding { return &v1alpha1.PolicyBinding{} },
			func() *v1alpha1.PolicyBindingList { return &v1alpha1.PolicyBindingList{} }),
	}
}
