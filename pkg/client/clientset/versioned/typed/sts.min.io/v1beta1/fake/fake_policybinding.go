// This file is part of MinIO Operator
// Copyright (c) 2024 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "github.com/minio/operator/pkg/apis/sts.min.io/v1beta1"
	stsminiov1beta1 "github.com/minio/operator/pkg/client/applyconfiguration/sts.min.io/v1beta1"
	typedstsminiov1beta1 "github.com/minio/operator/pkg/client/clientset/versioned/typed/sts.min.io/v1beta1"
	gentype "k8s.io/client-go/gentype"
)

// fakePolicyBindings implements PolicyBindingInterface
type fakePolicyBindings struct {
	*gentype.FakeClientWithListAndApply[*v1beta1.PolicyBinding, *v1beta1.PolicyBindingList, *stsminiov1beta1.PolicyBindingApplyConfiguration]
	Fake *FakeStsV1beta1
}

func newFakePolicyBindings(fake *FakeStsV1beta1, namespace string) typedstsminiov1beta1.PolicyBindingInterface {
	return &fakePolicyBindings{
		gentype.NewFakeClientWithListAndApply[*v1beta1.PolicyBinding, *v1beta1.PolicyBindingList, *stsminiov1beta1.PolicyBindingApplyConfiguration](
			fake.Fake,
			namespace,
			v1beta1.SchemeGroupVersion.WithResource("policybindings"),
			v1beta1.SchemeGroupVersion.WithKind("PolicyBinding"),
			func() *v1beta1.PolicyBinding { return &v1beta1.PolicyBinding{} },
			func() *v1beta1.PolicyBindingList { return &v1beta1.PolicyBindingList{} },
			func(dst, src *v1beta1.PolicyBindingList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta1.PolicyBindingList) []*v1beta1.PolicyBinding {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1beta1.PolicyBindingList, items []*v1beta1.PolicyBinding) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
