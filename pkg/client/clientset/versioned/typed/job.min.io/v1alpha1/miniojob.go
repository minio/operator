// This file is part of MinIO Operator
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	jobminiov1alpha1 "github.com/minio/operator/pkg/apis/job.min.io/v1alpha1"
	applyconfigurationjobminiov1alpha1 "github.com/minio/operator/pkg/client/applyconfiguration/job.min.io/v1alpha1"
	scheme "github.com/minio/operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// MinIOJobsGetter has a method to return a MinIOJobInterface.
// A group's client should implement this interface.
type MinIOJobsGetter interface {
	MinIOJobs(namespace string) MinIOJobInterface
}

// MinIOJobInterface has methods to work with MinIOJob resources.
type MinIOJobInterface interface {
	Create(ctx context.Context, minIOJob *jobminiov1alpha1.MinIOJob, opts v1.CreateOptions) (*jobminiov1alpha1.MinIOJob, error)
	Update(ctx context.Context, minIOJob *jobminiov1alpha1.MinIOJob, opts v1.UpdateOptions) (*jobminiov1alpha1.MinIOJob, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, minIOJob *jobminiov1alpha1.MinIOJob, opts v1.UpdateOptions) (*jobminiov1alpha1.MinIOJob, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*jobminiov1alpha1.MinIOJob, error)
	List(ctx context.Context, opts v1.ListOptions) (*jobminiov1alpha1.MinIOJobList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *jobminiov1alpha1.MinIOJob, err error)
	Apply(ctx context.Context, minIOJob *applyconfigurationjobminiov1alpha1.MinIOJobApplyConfiguration, opts v1.ApplyOptions) (result *jobminiov1alpha1.MinIOJob, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, minIOJob *applyconfigurationjobminiov1alpha1.MinIOJobApplyConfiguration, opts v1.ApplyOptions) (result *jobminiov1alpha1.MinIOJob, err error)
	MinIOJobExpansion
}

// minIOJobs implements MinIOJobInterface
type minIOJobs struct {
	*gentype.ClientWithListAndApply[*jobminiov1alpha1.MinIOJob, *jobminiov1alpha1.MinIOJobList, *applyconfigurationjobminiov1alpha1.MinIOJobApplyConfiguration]
}

// newMinIOJobs returns a MinIOJobs
func newMinIOJobs(c *JobV1alpha1Client, namespace string) *minIOJobs {
	return &minIOJobs{
		gentype.NewClientWithListAndApply[*jobminiov1alpha1.MinIOJob, *jobminiov1alpha1.MinIOJobList, *applyconfigurationjobminiov1alpha1.MinIOJobApplyConfiguration](
			"miniojobs",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *jobminiov1alpha1.MinIOJob { return &jobminiov1alpha1.MinIOJob{} },
			func() *jobminiov1alpha1.MinIOJobList { return &jobminiov1alpha1.MinIOJobList{} },
		),
	}
}
