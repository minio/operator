// This file is part of MinIO Operator
// Copyright (c) 2024 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by client-gen. DO NOT EDIT.

package v2

import (
	"context"

	v2 "github.com/minio/operator/pkg/apis/minio.min.io/v2"
	miniominiov2 "github.com/minio/operator/pkg/client/applyconfiguration/minio.min.io/v2"
	scheme "github.com/minio/operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// TenantsGetter has a method to return a TenantInterface.
// A group's client should implement this interface.
type TenantsGetter interface {
	Tenants(namespace string) TenantInterface
}

// TenantInterface has methods to work with Tenant resources.
type TenantInterface interface {
	Create(ctx context.Context, tenant *v2.Tenant, opts v1.CreateOptions) (*v2.Tenant, error)
	Update(ctx context.Context, tenant *v2.Tenant, opts v1.UpdateOptions) (*v2.Tenant, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, tenant *v2.Tenant, opts v1.UpdateOptions) (*v2.Tenant, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v2.Tenant, error)
	List(ctx context.Context, opts v1.ListOptions) (*v2.TenantList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v2.Tenant, err error)
	Apply(ctx context.Context, tenant *miniominiov2.TenantApplyConfiguration, opts v1.ApplyOptions) (result *v2.Tenant, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, tenant *miniominiov2.TenantApplyConfiguration, opts v1.ApplyOptions) (result *v2.Tenant, err error)
	TenantExpansion
}

// tenants implements TenantInterface
type tenants struct {
	*gentype.ClientWithListAndApply[*v2.Tenant, *v2.TenantList, *miniominiov2.TenantApplyConfiguration]
}

// newTenants returns a Tenants
func newTenants(c *MinioV2Client, namespace string) *tenants {
	return &tenants{
		gentype.NewClientWithListAndApply[*v2.Tenant, *v2.TenantList, *miniominiov2.TenantApplyConfiguration](
			"tenants",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v2.Tenant { return &v2.Tenant{} },
			func() *v2.TenantList { return &v2.TenantList{} }),
	}
}
