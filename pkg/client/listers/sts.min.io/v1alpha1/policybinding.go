// This file is part of MinIO Operator
// Copyright (c) 2021 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/minio/operator/pkg/apis/sts.min.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyBindingLister helps list PolicyBindings.
// All objects returned here must be treated as read-only.
type PolicyBindingLister interface {
	// List lists all PolicyBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyBinding, err error)
	// PolicyBindings returns an object that can list and get PolicyBindings.
	PolicyBindings(namespace string) PolicyBindingNamespaceLister
	PolicyBindingListerExpansion
}

// policyBindingLister implements the PolicyBindingLister interface.
type policyBindingLister struct {
	indexer cache.Indexer
}

// NewPolicyBindingLister returns a new PolicyBindingLister.
func NewPolicyBindingLister(indexer cache.Indexer) PolicyBindingLister {
	return &policyBindingLister{indexer: indexer}
}

// List lists all PolicyBindings in the indexer.
func (s *policyBindingLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyBinding))
	})
	return ret, err
}

// PolicyBindings returns an object that can list and get PolicyBindings.
func (s *policyBindingLister) PolicyBindings(namespace string) PolicyBindingNamespaceLister {
	return policyBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyBindingNamespaceLister helps list and get PolicyBindings.
// All objects returned here must be treated as read-only.
type PolicyBindingNamespaceLister interface {
	// List lists all PolicyBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyBinding, err error)
	// Get retrieves the PolicyBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PolicyBinding, error)
	PolicyBindingNamespaceListerExpansion
}

// policyBindingNamespaceLister implements the PolicyBindingNamespaceLister
// interface.
type policyBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyBindings in the indexer for a given namespace.
func (s policyBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyBinding))
	})
	return ret, err
}

// Get retrieves the PolicyBinding from the indexer for a given namespace and name.
func (s policyBindingNamespaceLister) Get(name string) (*v1alpha1.PolicyBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("policybinding"), name)
	}
	return obj.(*v1alpha1.PolicyBinding), nil
}
