name: UI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

# This ensures that previous jobs for the PR are canceled when the PR is
# updated.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:


  lint-job:
    name: Checking Lint
    runs-on: [ ubuntu-latest ]
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        os: [ ubuntu-latest ]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go ${{ matrix.go-version }} on ${{ matrix.os }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
        id: go

      - name: Build on ${{ matrix.os }}
        env:
          GO111MODULE: on
          GOOS: linux
        run: |
          make verify


  semgrep-static-code-analysis:
    name: "semgrep checks"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
      - name: Scanning code on ${{ matrix.os }}
        continue-on-error: false
        run: |
          # Install semgrep rather than using a container due to:
          # https://github.com/actions/checkout/issues/334
          sudo apt install -y python3-pip || apt install -y python3-pip
          pip3 install semgrep
          semgrep --config semgrep.yaml $(pwd)/web-app --error


  ui-assets:
    name: "React Code Has No Warnings & Prettified"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        os: [ ubuntu-latest ]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Read .nvmrc
        id: node_version
        run: echo "$(cat .nvmrc)" && echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_ENV
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NVMRC }}
          cache: 'yarn'
          cache-dependency-path: web-app/yarn.lock
      - uses: actions/cache@v3
        id: assets-cache
        name: Assets Cache
        with:
          path: |
            ./web-app/build/
          key: ${{ runner.os }}-assets-${{ github.run_id }}
      - name: Install Dependencies
        working-directory: ./web-app
        continue-on-error: false
        run: |
          yarn install --frozen-lockfile --immutable
      - name: Check for Warnings in build output
        working-directory: ./web-app
        continue-on-error: false
        run: |
          ./check-warnings.sh
      - name: Check if Files are Prettified
        working-directory: ./web-app
        continue-on-error: false
        run: |
          ./check-prettier.sh
  reuse-golang-dependencies:
    name: reuse golang dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        os: [ ubuntu-latest ]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Go ${{ matrix.go-version }} on ${{ matrix.os }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
        id: go
      - name: Build on ${{ matrix.os }}
        env:
          GO111MODULE: on
          GOOS: linux
        run: |
          go mod download

  compile-binary:
    name: Compiles on Go ${{ matrix.go-version }} and ${{ matrix.os }}
    needs:
      - lint-job
      - ui-assets
      - reuse-golang-dependencies
      - semgrep-static-code-analysis
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        os: [ ubuntu-latest ]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go ${{ matrix.go-version }} on ${{ matrix.os }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
        id: go
      - uses: actions/cache@v3
        name: Console Binary Cache
        with:
          path: |
            ./minio-operator
          key: ${{ runner.os }}-binary-${{ github.run_id }}
      - uses: actions/cache@v3
        id: assets-cache
        name: Assets Cache
        with:
          path: |
            ./web-app/build/
          key: ${{ runner.os }}-assets-${{ github.run_id }}
      - name: Build on ${{ matrix.os }}
        env:
          GO111MODULE: on
          GOOS: linux
        run: |
          make operator
  
  
  


  all-operator-tests-1:
    name: Operator UI Tests Part 1
    needs:
      - compile-binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        os: [ ubuntu-latest ]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NVMRC }}
      - name: Install MinIO JS
        working-directory: ./
        continue-on-error: false
        run: |
          yarn add minio


      - uses: actions/cache@v3
        name: Console Binary Cache
        with:
          path: |
            ./minio-operator
          key: ${{ runner.os }}-binary-${{ github.run_id }}


      - uses: actions/cache@v3
        id: assets-cache
        name: Assets Cache
        with:
          path: |
            ./web-app/build/
          key: ${{ runner.os }}-assets-${{ github.run_id }}


      # Runs a set of commands using the runners shell
      - name: Start Kind for Operator UI
        run: |
          "${GITHUB_WORKSPACE}/web-app/tests/scripts/operator.sh"

      - name: Run TestCafe Tests
        uses: DevExpress/testcafe-action@latest
        with:
          args: '"chrome:headless" web-app/tests/operator/login --skip-js-errors -c 3'
