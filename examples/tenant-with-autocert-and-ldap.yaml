---
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVqakNDQXZhZ0F3SUJBZ0lRYXNHSUZkdmxUWlJ0b3NjVVRHT1RaREFOQmdrcWhraUc5dzBCQVFzRkFEQ0IKdFRFZU1Cd0dBMVVFQ2hNVmJXdGpaWEowSUdSbGRtVnNiM0J0Wlc1MElFTkJNVVV3UXdZRFZRUUxERHhoYkdWMgpjMnRBVEdWdWFXNXpMVTFoWTBKdmIyc3RVSEp2TG14dlkyRnNJQ2hNWlc1cGJpQkJiR1YyYzJ0cElFaDFaWEowCllTQkJjbWxoY3lreFREQktCZ05WQkFNTVEyMXJZMlZ5ZENCaGJHVjJjMnRBVEdWdWFXNXpMVTFoWTBKdmIyc3QKVUhKdkxteHZZMkZzSUNoTVpXNXBiaUJCYkdWMmMydHBJRWgxWlhKMFlTQkJjbWxoY3lrd0hoY05NakF4TVRFNQpNRFV6TnpJeldoY05Nak13TWpFNU1EVXpOekl6V2pCaU1TY3dKUVlEVlFRS0V4NXRhMk5sY25RZ1pHVjJaV3h2CmNHMWxiblFnWTJWeWRHbG1hV05oZEdVeE56QTFCZ05WQkFzTUxtRnNaWFp6YTBCMGFXWmhMbXh2WTJGc0lDaE0KWlc1cGJpQkJiR1YyYzJ0cElFaDFaWEowWVNCQmNtbGhjeWt3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQgpEd0F3Z2dFS0FvSUJBUUNyQlErQTkzbkVYNW44SVpIV1ZBTzVFd1U2Wi8rZ21KNnhzRFhGU3VocGFRR2ZvUERHCkw1NFN3VlR6R0JUZHhsQ0VyLzBia0U4bDl4UkozYWtnZEd5NmZtTmJDbWVVK2Z5dUovcG8xTjRqUkxwZDZISWgKSFAxSjYvSHhLMDR1V25kbXBSWUMrRk4yRjNWTS9mWnRhYTFYR0pORkhCellQemJ1NC9WZ2wwTHhFWnluUXBtMAp1eEwxWWpUTjVnY2RIcDhXaTBScisxbEdaeDU3WWNISFhPTmZISnFLRndscWs0NC9hZHlSRnpsUlYyTU5jYXBhCk1mVzRTaE9XU21jUE1OMytSdzBkcXhvbVdQWEhNZzRuRlplZlhaWTkzTzFzNkJXUEVVaUV6OUFqN0JzQXdVd3cKTE83N09vNityYzJTUlQ4VUhBYTZORUhNOHFLZTErcHZKeG1CQWdNQkFBR2piREJxTUE0R0ExVWREd0VCL3dRRQpBd0lGb0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREFUQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZCk1CYUFGT01mT1Fkc1huZ3ZPRHhxTjFtRkpkUTNxSDBETUJRR0ExVWRFUVFOTUF1Q0NXeHZZMkZzYUc5emREQU4KQmdrcWhraUc5dzBCQVFzRkFBT0NBWUVBRHhQc1E3Y1JmQ3h6UnRHWHVodkR1ZG5jMG8yTVpvOWRhbzU3VkloaQpJa0FJU1JUZEh2b1ExMEs0RGdhZkVUQXVvWi9nWi9DVmpSdVpWenQ5VGpVanJhYjZCQXJzbEdLWmhSNGpPTllzCktWUFBhOWZnZ1R0RW9xaGNWWldsWnNEc2ZMY010aFNRcDhkNEt4ZE12ajQ3Yy9DSVB0YWd0SG53bTVDKzh6dysKUXl0eHNXUThWRGthQnhaSFY0aDVOMkJtSHFhdU12SXNWU09Gc2QvdHNWaDk1Z0hFcWN1Z3lHajBIaWJhRXZrNwpRbmt6OUlxbHljeUhZM2lnOVM2TVBNMDVSV2RYL0hndmpRcHJtaENxa3VHbGJYd2ZlUlZPY2xiMUNVNGYxVHNJCnVmLzIwS3dscUN1K0ozSG0wK1U3SWlwZ1RmaUQ3VzZIbkpPWnZudUhrM2JseUxQNnU1QnRKdHNkSTRhUm42RGcKRDZDZUZXWTRwY2tLdC9CQ1RORzlzblVsQ0xEYzFJYS9EbWZSUk9reUhhdkFLbnhHOWxTVDVFWDU2SjBtcDBuSgp1ZFlNTjdWWG03a3laVGkwY2FZV0dBOXBYVUFuYXgrazYxVjd4d1lVSk1hZlR1TXFmY3hUVndGQ0FRN2RTeFJYCk5DdUI5bVQ0ai85MlB0UXcvQWtwaUtwdAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQ3JCUStBOTNuRVg1bjgKSVpIV1ZBTzVFd1U2Wi8rZ21KNnhzRFhGU3VocGFRR2ZvUERHTDU0U3dWVHpHQlRkeGxDRXIvMGJrRThsOXhSSgozYWtnZEd5NmZtTmJDbWVVK2Z5dUovcG8xTjRqUkxwZDZISWhIUDFKNi9IeEswNHVXbmRtcFJZQytGTjJGM1ZNCi9mWnRhYTFYR0pORkhCellQemJ1NC9WZ2wwTHhFWnluUXBtMHV4TDFZalRONWdjZEhwOFdpMFJyKzFsR1p4NTcKWWNISFhPTmZISnFLRndscWs0NC9hZHlSRnpsUlYyTU5jYXBhTWZXNFNoT1dTbWNQTU4zK1J3MGRxeG9tV1BYSApNZzRuRlplZlhaWTkzTzFzNkJXUEVVaUV6OUFqN0JzQXdVd3dMTzc3T282K3JjMlNSVDhVSEFhNk5FSE04cUtlCjErcHZKeG1CQWdNQkFBRUNnZ0VCQUpEWXFXZnVzc2hhdkYzcXhNMUZ2UjE4ZVpvZFNVbm8yY2ZmV2J0dkZXZHEKRTREeTI5clBxODl3eFpWYkdSazVCU3RNcjFBd0tva2FPcW5SUHBTSlp5bVJNRytFWVhTeFFvenl1VWtldWNJZgpUTVdLd1ZkQWFWcTVwdUkvYm1rZUlERGtzNzd5T2lZeitocXFvcFBLeEpDVzlPeTh3Y1Y1elBvS1F1SjdXcXczCmZxV25XNExEUUVKeEtqYm1lOHBTWU10dll2V2hQREk1QTNycXY2eGFUTWtQYkRNM0kzUHJiNyt6WTlaRXpMMTIKV0UrQ09rUmZtSS8rU0IwUkhEWGhZS3pHTGRDZ3V3U3JpNXN2VVV5Z2tyZ3hTemhBR1JCaE0yaGFYeERwQjIvTApndVNZam9FNUFaTlhqUTZxMzBDeGZOZVNpSUpBVWlUNnR0NTh4OWMyZkUwQ2dZRUEyMGw0TTc3ZGkxb21SNTFVCkdQejlCKzFVVDVobUFldXhpQ1JSUEFqeXhEUlpVcUZoaDlWWjJTVTZGMXB5WGM5N29qQ20vOWduZk9kZkxFWVkKN0RWUXNSSC9qbURVcW9pNVNXOVNNRnFDbVhvencvZGNtSkVxRFRMVUdCWmYwR0IxdGk5NW5RNk10YmRBOHFoaApGR1FwZngzSWxndnlpK3BZUXlsa3B3RnUwcjhDZ1lFQXg2Ymh6dVc3eXVnVDZnUXZiRmsxZkhvRmIyWitmVXB4CkZOOFpsa045ZmR3T3U0WnJvd1pFVFlQMEk1RmxobVoyYWcwR3d3Z3Y0NzkzWlE4RkJ5RnljK1JuRVBvUWY1enQKNStQemtSZVNMZStsTWlneHRXL0w2Qmk2cUZWcjRRRzNSYzl4UGg2QmV4ZG9qTjc2alJtdTB6WnB1YUZUU1AwMwpFQTZnYXhRSVk3OENnWUFWRWQwYjA3WUR3cmkwM3RnS3dwd3BXOU5qQm5pZXJKL1ZQZkFVUGFQZDJFM1EwN0xFClUycWJvNmtPUDJHSHcvelVHNnFnSUl2Q3c1UndjNWZIY21QN2I0aEhqT1JDTW5yakpIQVlOMG9mSncrOFA1TkYKRVlXaDJRVnAveFJidURqM05WNlJDYW5aZCs4a29hc2FRM2w5UGtaY3JHODBwR0t3cVZTRGUyN0Rqd0tCZ0VkSApsM3JzbmwxVStqY2tnMkhsZjZrUFQzMTBWRmliQ1VCd1hvdzlVRUp0SEgxckFtYlR4L0w4MTE4VGUvRytCeXpaCnRiNVAzL2twMUpDcUNodC9uNE1zMm5jL01FQy9ZRmpZRTQrTG9NN3hya0w0QXJkS1VMeHVoOFd0cWJSTmpvZEkKQnFBcytBRmdYQjFmUm9pMTBLcnIxRmRIOTVvcGZVMG9TN0d2RjBlMUFvR0JBTC9JQ1NCeTJBU1VCbk1Sd0VOVgpRT2tSVmVVdC9taHcySlZ3SmZsNm80UVpRYm5qMGFoVnVwZmVDQTBTR2lSSlFWYlM1N0t2Q3o5SFdVSlVLUTJLCmllMmRkQXpQNTJtaE43QlV6NG1zcTNUcWtzaWFqSk1vcWkvM2xka2lsZkdEM2ExejhBd25qS0J4THpGZG4xZTQKMG8xU3N0Y2svYnd6bXlVb1Z6RjhmZTJaCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  name: localhost-certificate
  namespace: default
type: kubernetes.io/tls
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: billy-ldif
data:
  billy.ldif: |
    # LDIF fragment to create group branch under root
    dn: uid=billy,dc=example,dc=org
    uid: billy
    cn: billy
    sn: 3
    objectClass: top
    objectClass: posixAccount
    objectClass: inetOrgPerson
    loginShell: /bin/bash
    homeDirectory: /home/billy
    uidNumber: 14583102
    gidNumber: 14564100
    userPassword: billy123
    mail: billy@example.org
    gecos: Billy User

    # Create base group
    dn: ou=groups,dc=example,dc=org
    objectclass:organizationalunit
    ou: groups
    description: generic groups branch

    # create consoleAdmin group (this already exists on minio and have a policy of s3::*)
    dn: cn=consoleAdmin,ou=groups,dc=example,dc=org
    objectClass: top
    objectClass: posixGroup
    gidNumber: 678

    # Assing group to new user
    dn: cn=consoleAdmin,ou=groups,dc=example,dc=org
    changetype: modify
    add: memberuid
    memberuid: billy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openldap
spec:
  replicas: 1
  selector:
    matchLabels:
      app: openldap
  template:
    metadata:
      labels:
        app: openldap
    spec:
      volumes:
        - name: billy-configuration
          configMap:
            name: billy-ldif
      containers:
        - name: openldap
          image: osixia/openldap:1.3.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 389
              name: tcp-ldap
            - containerPort: 636
              name: tcp-ldap2
          volumeMounts:
            - name: billy-configuration
              mountPath: /tmp/billy.ldif
              subPath: billy.ldif
---
apiVersion: v1
kind: Service
metadata:
  name: openldap
  labels:
    name: openldap
spec:
  ports:
    - name: tcp-ldap
      port: 389
      targetPort: tcp-ldap
    - name: tcp-ldap2
      port: 636
      targetPort: tcp-ldap2
  selector:
    app: openldap
---
## Secret to be used as MinIO Root Credentials
apiVersion: v1
kind: Secret
metadata:
  name: minio-autocert-ldap-minio-creds-secret
type: Opaque
data:
  ## Access Key for MinIO Tenant, base64 encoded (echo -n 'minio' | base64)
  accesskey: bWluaW8=
  ## Secret Key for MinIO Tenant, base64 encoded (echo -n 'minio123' | base64)
  secretkey: bWluaW8xMjM=
---
## MinIO Tenant Definition
apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  name: minio-autocert-ldap
  ## Optionally pass labels to be applied to the statefulset pods
  labels:
    app: minio-autocert-ldap-minio
  ## Annotations for MinIO Tenant Pods
  annotations:
    prometheus.io/path: /minio/v2/metrics/cluster
    prometheus.io/port: "9000"
    prometheus.io/scrape: "true"

## If a scheduler is specified here, Tenant pods will be dispatched by specified scheduler.
## If not specified, the Tenant pods will be dispatched by default scheduler.
# scheduler:
#  name: my-custom-scheduler

spec:
  ## Registry location and Tag to download MinIO Server image
  image: minio/minio:RELEASE.2021-08-25T00-41-18Z
  imagePullPolicy: IfNotPresent

  ## Secret with credentials to be used by MinIO Tenant.
  ## Refers to the secret object created above.
  credsSecret:
    name: minio-autocert-ldap-minio-creds-secret

  ## Specification for MinIO Pool(s) in this Tenant.
  pools:
    - servers: 4
      volumesPerServer: 4
      volumeClaimTemplate:
        metadata:
          name: data
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
  #    - servers: 4
  #      volumesPerServer: 4
  #      volumeClaimTemplate:
  #        metadata:
  #          name: data
  #        spec:
  #          accessModes:
  #            - ReadWriteOnce
  #          resources:
  #            requests:
  #              storage: 1Gi
  ## Mount path where PV will be mounted inside container(s).
  mountPath: /export
    ## Sub path inside Mount path where MinIO stores data.
  # subPath: /data

  ## Enable automatic Kubernetes based certificate generation and signing as explained in
  ## https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster
  requestAutoCert: true

  externalCertSecret:
    - name: localhost-certificate
      type: kubernetes.io/tls

  ## This field is used only when "requestAutoCert" is set to true. Use this field to set CommonName
  ## for the auto-generated certificate. Internal DNS name for the pod will be used if CommonName is
  ## not provided. DNS name format is *.minio.default.svc.cluster.local
  certConfig:
    commonName: ""
    organizationName: []
    dnsNames: []

  ## PodManagement policy for MinIO Tenant Pods. Can be "OrderedReady" or "Parallel"
  ## Refer https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
  ## for details.
  podManagementPolicy: Parallel

  ## Add environment variables to be set in MinIO container (https://github.com/minio/minio/tree/master/docs/config)
  env:
    - name: MINIO_IDENTITY_LDAP_SERVER_ADDR
      value: "openldap.default.svc.cluster.local:389"
    - name: MINIO_IDENTITY_LDAP_USERNAME_FORMAT
      value: "uid=%s,dc=example,dc=org"
    - name: MINIO_IDENTITY_LDAP_USERNAME_SEARCH_FILTER
      value: "(|(objectclass=posixAccount)(uid=%s))"
    - name: MINIO_IDENTITY_LDAP_TLS_SKIP_VERIFY
      value: "on"
    - name: MINIO_IDENTITY_LDAP_SERVER_INSECURE
      value: "on"

  ## PriorityClassName indicates the Pod priority and hence importance of a Pod relative to other Pods.
  ## This is applied to MinIO pods only.
  ## Refer Kubernetes documentation for details https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass/
  # priorityClassName: high-priority


