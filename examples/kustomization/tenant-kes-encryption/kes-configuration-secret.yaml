apiVersion: v1
kind: Secret
metadata:
  name: kes-configuration
  namespace: tenant-kms-encrypted
type: Opaque
stringData:
  server-config.yaml: |-
    version: v1
    address: :7373
    admin:
      identity: _ # Effectively disabled since no root identity necessary.
    tls:
      key: /tmp/kes/server.key   # Path to the TLS private key
      cert: /tmp/kes/server.crt # Path to the TLS certificate
      proxy:
        identities: []
        header:
          cert: X-Tls-Client-Cert
    policy:
      my-policy:
        allow:
        - /v1/api
        - /v1/key/create/*
        - /v1/key/generate/*
        - /v1/key/decrypt/*
        - /v1/key/bulk/decrypt/*
        identities:
        - ${MINIO_KES_IDENTITY}
    cache:
      expiry:
        any: 5m0s
        unused: 20s
    log:
      error: on
      audit: off
    keystore:
      ## KES configured with fs (File System mode) doesnt work in Kubernetes environments and it's not recommended
      ## use a real KMS
      # fs:
      #   path: "./keys" # Path to directory. Keys will be stored as files. Not Recommended for Production.
      vault:
        endpoint: "http://vault.default.svc.cluster.local:8200" # The Vault endpoint
        namespace: "" # An optional Vault namespace. See: https://www.vaultproject.io/docs/enterprise/namespaces/index.html
        prefix: "my-minio"    # An optional K/V prefix. The server will store keys under this prefix.
        approle:    # AppRole credentials. See: https://www.vaultproject.io/docs/auth/approle.html
          id: "<YOUR APPROLE ID HERE>"      # Your AppRole Role ID
          secret: "<YOUR APPROLE SECRET ID HERE>"  # Your AppRole Secret ID
          retry: 15s  # Duration until the server tries to re-authenticate after connection loss.
        tls:        # The Vault client TLS configuration for mTLS authentication and certificate verification
          key: ""     # Path to the TLS client private key for mTLS authentication to Vault
          cert: ""    # Path to the TLS client certificate for mTLS authentication to Vault
          ca: ""      # Path to one or multiple PEM root CA certificates
        status:     # Vault status configuration. The server will periodically reach out to Vault to check its status.
          ping: 10s   # Duration until the server checks Vault's status again.
      # aws:
      #   # The AWS SecretsManager key store. The server will store
      #   # secret keys at the AWS SecretsManager encrypted with
      #   # AWS-KMS. See: https://aws.amazon.com/secrets-manager
      #   secretsmanager:
      #     endpoint: ""   # The AWS SecretsManager endpoint      - e.g.: secretsmanager.us-east-2.amazonaws.com
      #     region: ""     # The AWS region of the SecretsManager - e.g.: us-east-2
      #     kmskey: ""     # The AWS-KMS key ID used to en/decrypt secrets at the SecretsManager. By default (if not set) the default AWS-KMS key will be used.
      #     credentials:   # The AWS credentials for accessing secrets at the AWS SecretsManager.
      #       accesskey: ""  # Your AWS Access Key
      #       secretkey: ""  # Your AWS Secret Key
      #       token: ""      # Your AWS session token (usually optional)
      # gcp:
      #   secretmanager:
      #     # The project ID is a unique, user-assigned ID that can be used by Google APIs.
      #     # The project ID must be a unique string of 6 to 30 lowercase letters, digits, or hyphens.
      #     # It must start with a letter, and cannot have a trailing hyphen.
      #     # See: https://cloud.google.com/resource-manager/docs/creating-managing-projects#before_you_begin
      #     project_id: <PROJECT_ID>
      #     # An optional GCP SecretManager endpoint. If not set, defaults to: secretmanager.googleapis.com:443
      #     endpoint: ""
      #     # An optional list of GCP OAuth2 scopes. For a list of GCP scopes refer to: https://developers.google.com/identity/protocols/oauth2/scopes
      #     # If not set, the GCP default scopes are used.
      #     scopes: 
      #     - "https://www.googleapis.com/auth/cloud-platform"
      #     # The credentials for your GCP service account. If running inside GCP (app engine) the credentials
      #     # can be empty and will be fetched from the app engine environment automatically.
      #     credentials:
      #       client_email:   "" # The service account email                          - e.g. <account>@<project-ID>.iam.gserviceaccount.com
      #       client_id:      "" # The service account client ID                      - e.g. 113491952745362495489"
      #       private_key_id: "" # The service account private key                    - e.g. 381514ebd3cf45a64ca8adc561f0ce28fca5ec06
      #       private_key:    ""
      #     ## KES configured with fs (File System mode) doesnt work in Kubernetes environments and it's not recommended
